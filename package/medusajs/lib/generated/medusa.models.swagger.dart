// ignore_for_file: type=lint

import 'package:json_annotation/json_annotation.dart';
import 'package:collection/collection.dart';
import 'dart:convert';

import 'medusa.enums.swagger.dart' as enums;

part 'medusa.models.swagger.g.dart';

@JsonSerializable(explicitToJson: true)
class Address {
  const Address({
    required this.id,
    required this.customerId,
    this.customer,
    required this.company,
    required this.firstName,
    required this.lastName,
    required this.address1,
    required this.address2,
    required this.city,
    required this.countryCode,
    this.country,
    required this.province,
    required this.postalCode,
    required this.phone,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Address.fromJson(Map<String, dynamic> json) =>
      _$AddressFromJson(json);

  static const toJsonFactory = _$AddressToJson;
  Map<String, dynamic> toJson() => _$AddressToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'customer_id', includeIfNull: false, defaultValue: 'default')
  final String? customerId;
  @JsonKey(name: 'customer', includeIfNull: false)
  final Customer? customer;
  @JsonKey(name: 'company', includeIfNull: false, defaultValue: 'default')
  final String? company;
  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String? firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String? lastName;
  @JsonKey(name: 'address_1', includeIfNull: false, defaultValue: 'default')
  final String? address1;
  @JsonKey(name: 'address_2', includeIfNull: false, defaultValue: 'default')
  final String? address2;
  @JsonKey(name: 'city', includeIfNull: false, defaultValue: 'default')
  final String? city;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String? countryCode;
  @JsonKey(name: 'country', includeIfNull: false)
  final Country? country;
  @JsonKey(name: 'province', includeIfNull: false, defaultValue: 'default')
  final String? province;
  @JsonKey(name: 'postal_code', includeIfNull: false, defaultValue: 'default')
  final String? postalCode;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AddressFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AddressExtension on Address {
  Address copyWith(
      {String? id,
      String? customerId,
      Customer? customer,
      String? company,
      String? firstName,
      String? lastName,
      String? address1,
      String? address2,
      String? city,
      String? countryCode,
      Country? country,
      String? province,
      String? postalCode,
      String? phone,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Address(
        id: id ?? this.id,
        customerId: customerId ?? this.customerId,
        customer: customer ?? this.customer,
        company: company ?? this.company,
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        countryCode: countryCode ?? this.countryCode,
        country: country ?? this.country,
        province: province ?? this.province,
        postalCode: postalCode ?? this.postalCode,
        phone: phone ?? this.phone,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Address copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? customerId,
      Wrapped<Customer?>? customer,
      Wrapped<String?>? company,
      Wrapped<String?>? firstName,
      Wrapped<String?>? lastName,
      Wrapped<String?>? address1,
      Wrapped<String?>? address2,
      Wrapped<String?>? city,
      Wrapped<String?>? countryCode,
      Wrapped<Country?>? country,
      Wrapped<String?>? province,
      Wrapped<String?>? postalCode,
      Wrapped<String?>? phone,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Address(
        id: (id != null ? id.value : this.id),
        customerId: (customerId != null ? customerId.value : this.customerId),
        customer: (customer != null ? customer.value : this.customer),
        company: (company != null ? company.value : this.company),
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        address1: (address1 != null ? address1.value : this.address1),
        address2: (address2 != null ? address2.value : this.address2),
        city: (city != null ? city.value : this.city),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        country: (country != null ? country.value : this.country),
        province: (province != null ? province.value : this.province),
        postalCode: (postalCode != null ? postalCode.value : this.postalCode),
        phone: (phone != null ? phone.value : this.phone),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AddressCreatePayload {
  const AddressCreatePayload({
    required this.firstName,
    required this.lastName,
    this.phone,
    this.company,
    required this.address1,
    this.address2,
    required this.city,
    required this.countryCode,
    this.province,
    required this.postalCode,
    this.metadata,
  });

  factory AddressCreatePayload.fromJson(Map<String, dynamic> json) =>
      _$AddressCreatePayloadFromJson(json);

  static const toJsonFactory = _$AddressCreatePayloadToJson;
  Map<String, dynamic> toJson() => _$AddressCreatePayloadToJson(this);

  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String lastName;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'company', includeIfNull: false, defaultValue: 'default')
  final String? company;
  @JsonKey(name: 'address_1', includeIfNull: false, defaultValue: 'default')
  final String address1;
  @JsonKey(name: 'address_2', includeIfNull: false, defaultValue: 'default')
  final String? address2;
  @JsonKey(name: 'city', includeIfNull: false, defaultValue: 'default')
  final String city;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String countryCode;
  @JsonKey(name: 'province', includeIfNull: false, defaultValue: 'default')
  final String? province;
  @JsonKey(name: 'postal_code', includeIfNull: false, defaultValue: 'default')
  final String postalCode;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AddressCreatePayloadFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AddressCreatePayloadExtension on AddressCreatePayload {
  AddressCreatePayload copyWith(
      {String? firstName,
      String? lastName,
      String? phone,
      String? company,
      String? address1,
      String? address2,
      String? city,
      String? countryCode,
      String? province,
      String? postalCode,
      Object? metadata}) {
    return AddressCreatePayload(
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        phone: phone ?? this.phone,
        company: company ?? this.company,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        countryCode: countryCode ?? this.countryCode,
        province: province ?? this.province,
        postalCode: postalCode ?? this.postalCode,
        metadata: metadata ?? this.metadata);
  }

  AddressCreatePayload copyWithWrapped(
      {Wrapped<String>? firstName,
      Wrapped<String>? lastName,
      Wrapped<String?>? phone,
      Wrapped<String?>? company,
      Wrapped<String>? address1,
      Wrapped<String?>? address2,
      Wrapped<String>? city,
      Wrapped<String>? countryCode,
      Wrapped<String?>? province,
      Wrapped<String>? postalCode,
      Wrapped<Object?>? metadata}) {
    return AddressCreatePayload(
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        phone: (phone != null ? phone.value : this.phone),
        company: (company != null ? company.value : this.company),
        address1: (address1 != null ? address1.value : this.address1),
        address2: (address2 != null ? address2.value : this.address2),
        city: (city != null ? city.value : this.city),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        province: (province != null ? province.value : this.province),
        postalCode: (postalCode != null ? postalCode.value : this.postalCode),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AddressPayload {
  const AddressPayload({
    this.firstName,
    this.lastName,
    this.phone,
    this.company,
    this.address1,
    this.address2,
    this.city,
    this.countryCode,
    this.province,
    this.postalCode,
    this.metadata,
  });

  factory AddressPayload.fromJson(Map<String, dynamic> json) =>
      _$AddressPayloadFromJson(json);

  static const toJsonFactory = _$AddressPayloadToJson;
  Map<String, dynamic> toJson() => _$AddressPayloadToJson(this);

  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String? firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String? lastName;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'company', includeIfNull: false, defaultValue: 'default')
  final String? company;
  @JsonKey(name: 'address_1', includeIfNull: false, defaultValue: 'default')
  final String? address1;
  @JsonKey(name: 'address_2', includeIfNull: false, defaultValue: 'default')
  final String? address2;
  @JsonKey(name: 'city', includeIfNull: false, defaultValue: 'default')
  final String? city;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String? countryCode;
  @JsonKey(name: 'province', includeIfNull: false, defaultValue: 'default')
  final String? province;
  @JsonKey(name: 'postal_code', includeIfNull: false, defaultValue: 'default')
  final String? postalCode;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AddressPayloadFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AddressPayloadExtension on AddressPayload {
  AddressPayload copyWith(
      {String? firstName,
      String? lastName,
      String? phone,
      String? company,
      String? address1,
      String? address2,
      String? city,
      String? countryCode,
      String? province,
      String? postalCode,
      Object? metadata}) {
    return AddressPayload(
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        phone: phone ?? this.phone,
        company: company ?? this.company,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        countryCode: countryCode ?? this.countryCode,
        province: province ?? this.province,
        postalCode: postalCode ?? this.postalCode,
        metadata: metadata ?? this.metadata);
  }

  AddressPayload copyWithWrapped(
      {Wrapped<String?>? firstName,
      Wrapped<String?>? lastName,
      Wrapped<String?>? phone,
      Wrapped<String?>? company,
      Wrapped<String?>? address1,
      Wrapped<String?>? address2,
      Wrapped<String?>? city,
      Wrapped<String?>? countryCode,
      Wrapped<String?>? province,
      Wrapped<String?>? postalCode,
      Wrapped<Object?>? metadata}) {
    return AddressPayload(
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        phone: (phone != null ? phone.value : this.phone),
        company: (company != null ? company.value : this.company),
        address1: (address1 != null ? address1.value : this.address1),
        address2: (address2 != null ? address2.value : this.address2),
        city: (city != null ? city.value : this.city),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        province: (province != null ? province.value : this.province),
        postalCode: (postalCode != null ? postalCode.value : this.postalCode),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminAppsListRes {
  const AdminAppsListRes({
    required this.apps,
  });

  factory AdminAppsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminAppsListResFromJson(json);

  static const toJsonFactory = _$AdminAppsListResToJson;
  Map<String, dynamic> toJson() => _$AdminAppsListResToJson(this);

  @JsonKey(name: 'apps', includeIfNull: false, defaultValue: <OAuth>[])
  final List<OAuth> apps;
  static const fromJsonFactory = _$AdminAppsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminAppsListResExtension on AdminAppsListRes {
  AdminAppsListRes copyWith({List<OAuth>? apps}) {
    return AdminAppsListRes(apps: apps ?? this.apps);
  }

  AdminAppsListRes copyWithWrapped({Wrapped<List<OAuth>>? apps}) {
    return AdminAppsListRes(apps: (apps != null ? apps.value : this.apps));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminAppsRes {
  const AdminAppsRes({
    required this.apps,
  });

  factory AdminAppsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminAppsResFromJson(json);

  static const toJsonFactory = _$AdminAppsResToJson;
  Map<String, dynamic> toJson() => _$AdminAppsResToJson(this);

  @JsonKey(name: 'apps', includeIfNull: false)
  final OAuth apps;
  static const fromJsonFactory = _$AdminAppsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminAppsResExtension on AdminAppsRes {
  AdminAppsRes copyWith({OAuth? apps}) {
    return AdminAppsRes(apps: apps ?? this.apps);
  }

  AdminAppsRes copyWithWrapped({Wrapped<OAuth>? apps}) {
    return AdminAppsRes(apps: (apps != null ? apps.value : this.apps));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminAuthRes {
  const AdminAuthRes({
    required this.user,
  });

  factory AdminAuthRes.fromJson(Map<String, dynamic> json) =>
      _$AdminAuthResFromJson(json);

  static const toJsonFactory = _$AdminAuthResToJson;
  Map<String, dynamic> toJson() => _$AdminAuthResToJson(this);

  @JsonKey(name: 'user', includeIfNull: false)
  final User user;
  static const fromJsonFactory = _$AdminAuthResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminAuthResExtension on AdminAuthRes {
  AdminAuthRes copyWith({User? user}) {
    return AdminAuthRes(user: user ?? this.user);
  }

  AdminAuthRes copyWithWrapped({Wrapped<User>? user}) {
    return AdminAuthRes(user: (user != null ? user.value : this.user));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminBatchJobListRes {
  const AdminBatchJobListRes({
    required this.batchJobs,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminBatchJobListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminBatchJobListResFromJson(json);

  static const toJsonFactory = _$AdminBatchJobListResToJson;
  Map<String, dynamic> toJson() => _$AdminBatchJobListResToJson(this);

  @JsonKey(name: 'batch_jobs', includeIfNull: false, defaultValue: <BatchJob>[])
  final List<BatchJob> batchJobs;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminBatchJobListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminBatchJobListResExtension on AdminBatchJobListRes {
  AdminBatchJobListRes copyWith(
      {List<BatchJob>? batchJobs, int? count, int? offset, int? limit}) {
    return AdminBatchJobListRes(
        batchJobs: batchJobs ?? this.batchJobs,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminBatchJobListRes copyWithWrapped(
      {Wrapped<List<BatchJob>>? batchJobs,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminBatchJobListRes(
        batchJobs: (batchJobs != null ? batchJobs.value : this.batchJobs),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminBatchJobRes {
  const AdminBatchJobRes({
    required this.batchJob,
  });

  factory AdminBatchJobRes.fromJson(Map<String, dynamic> json) =>
      _$AdminBatchJobResFromJson(json);

  static const toJsonFactory = _$AdminBatchJobResToJson;
  Map<String, dynamic> toJson() => _$AdminBatchJobResToJson(this);

  @JsonKey(name: 'batch_job', includeIfNull: false)
  final BatchJob? batchJob;
  static const fromJsonFactory = _$AdminBatchJobResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminBatchJobResExtension on AdminBatchJobRes {
  AdminBatchJobRes copyWith({BatchJob? batchJob}) {
    return AdminBatchJobRes(batchJob: batchJob ?? this.batchJob);
  }

  AdminBatchJobRes copyWithWrapped({Wrapped<BatchJob?>? batchJob}) {
    return AdminBatchJobRes(
        batchJob: (batchJob != null ? batchJob.value : this.batchJob));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminBearerAuthRes {
  const AdminBearerAuthRes({
    this.accessToken,
  });

  factory AdminBearerAuthRes.fromJson(Map<String, dynamic> json) =>
      _$AdminBearerAuthResFromJson(json);

  static const toJsonFactory = _$AdminBearerAuthResToJson;
  Map<String, dynamic> toJson() => _$AdminBearerAuthResToJson(this);

  @JsonKey(name: 'access_token', includeIfNull: false, defaultValue: 'default')
  final String? accessToken;
  static const fromJsonFactory = _$AdminBearerAuthResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminBearerAuthResExtension on AdminBearerAuthRes {
  AdminBearerAuthRes copyWith({String? accessToken}) {
    return AdminBearerAuthRes(accessToken: accessToken ?? this.accessToken);
  }

  AdminBearerAuthRes copyWithWrapped({Wrapped<String?>? accessToken}) {
    return AdminBearerAuthRes(
        accessToken:
            (accessToken != null ? accessToken.value : this.accessToken));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCollectionsDeleteRes {
  const AdminCollectionsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminCollectionsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCollectionsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminCollectionsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminCollectionsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminCollectionsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCollectionsDeleteResExtension on AdminCollectionsDeleteRes {
  AdminCollectionsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminCollectionsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminCollectionsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminCollectionsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCollectionsListRes {
  const AdminCollectionsListRes({
    required this.collections,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminCollectionsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCollectionsListResFromJson(json);

  static const toJsonFactory = _$AdminCollectionsListResToJson;
  Map<String, dynamic> toJson() => _$AdminCollectionsListResToJson(this);

  @JsonKey(
      name: 'collections',
      includeIfNull: false,
      defaultValue: <ProductCollection>[])
  final List<ProductCollection> collections;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminCollectionsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCollectionsListResExtension on AdminCollectionsListRes {
  AdminCollectionsListRes copyWith(
      {List<ProductCollection>? collections,
      int? count,
      int? offset,
      int? limit}) {
    return AdminCollectionsListRes(
        collections: collections ?? this.collections,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminCollectionsListRes copyWithWrapped(
      {Wrapped<List<ProductCollection>>? collections,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminCollectionsListRes(
        collections:
            (collections != null ? collections.value : this.collections),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCollectionsRes {
  const AdminCollectionsRes({
    required this.collection,
  });

  factory AdminCollectionsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCollectionsResFromJson(json);

  static const toJsonFactory = _$AdminCollectionsResToJson;
  Map<String, dynamic> toJson() => _$AdminCollectionsResToJson(this);

  @JsonKey(name: 'collection', includeIfNull: false)
  final ProductCollection collection;
  static const fromJsonFactory = _$AdminCollectionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCollectionsResExtension on AdminCollectionsRes {
  AdminCollectionsRes copyWith({ProductCollection? collection}) {
    return AdminCollectionsRes(collection: collection ?? this.collection);
  }

  AdminCollectionsRes copyWithWrapped(
      {Wrapped<ProductCollection>? collection}) {
    return AdminCollectionsRes(
        collection: (collection != null ? collection.value : this.collection));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCreateUserRequest {
  const AdminCreateUserRequest({
    required this.email,
    this.firstName,
    this.lastName,
    this.role,
    required this.password,
  });

  factory AdminCreateUserRequest.fromJson(Map<String, dynamic> json) =>
      _$AdminCreateUserRequestFromJson(json);

  static const toJsonFactory = _$AdminCreateUserRequestToJson;
  Map<String, dynamic> toJson() => _$AdminCreateUserRequestToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String? firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String? lastName;
  @JsonKey(
    name: 'role',
    includeIfNull: false,
    toJson: adminCreateUserRequestRoleNullableToJson,
    fromJson: adminCreateUserRequestRoleNullableFromJson,
  )
  final enums.AdminCreateUserRequestRole? role;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String password;
  static const fromJsonFactory = _$AdminCreateUserRequestFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCreateUserRequestExtension on AdminCreateUserRequest {
  AdminCreateUserRequest copyWith(
      {String? email,
      String? firstName,
      String? lastName,
      enums.AdminCreateUserRequestRole? role,
      String? password}) {
    return AdminCreateUserRequest(
        email: email ?? this.email,
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        role: role ?? this.role,
        password: password ?? this.password);
  }

  AdminCreateUserRequest copyWithWrapped(
      {Wrapped<String>? email,
      Wrapped<String?>? firstName,
      Wrapped<String?>? lastName,
      Wrapped<enums.AdminCreateUserRequestRole?>? role,
      Wrapped<String>? password}) {
    return AdminCreateUserRequest(
        email: (email != null ? email.value : this.email),
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        role: (role != null ? role.value : this.role),
        password: (password != null ? password.value : this.password));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCurrenciesListRes {
  const AdminCurrenciesListRes({
    required this.currencies,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminCurrenciesListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCurrenciesListResFromJson(json);

  static const toJsonFactory = _$AdminCurrenciesListResToJson;
  Map<String, dynamic> toJson() => _$AdminCurrenciesListResToJson(this);

  @JsonKey(name: 'currencies', includeIfNull: false, defaultValue: <Currency>[])
  final List<Currency> currencies;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminCurrenciesListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCurrenciesListResExtension on AdminCurrenciesListRes {
  AdminCurrenciesListRes copyWith(
      {List<Currency>? currencies, int? count, int? offset, int? limit}) {
    return AdminCurrenciesListRes(
        currencies: currencies ?? this.currencies,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminCurrenciesListRes copyWithWrapped(
      {Wrapped<List<Currency>>? currencies,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminCurrenciesListRes(
        currencies: (currencies != null ? currencies.value : this.currencies),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCurrenciesRes {
  const AdminCurrenciesRes({
    required this.currency,
  });

  factory AdminCurrenciesRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCurrenciesResFromJson(json);

  static const toJsonFactory = _$AdminCurrenciesResToJson;
  Map<String, dynamic> toJson() => _$AdminCurrenciesResToJson(this);

  @JsonKey(name: 'currency', includeIfNull: false)
  final Currency currency;
  static const fromJsonFactory = _$AdminCurrenciesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCurrenciesResExtension on AdminCurrenciesRes {
  AdminCurrenciesRes copyWith({Currency? currency}) {
    return AdminCurrenciesRes(currency: currency ?? this.currency);
  }

  AdminCurrenciesRes copyWithWrapped({Wrapped<Currency>? currency}) {
    return AdminCurrenciesRes(
        currency: (currency != null ? currency.value : this.currency));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCustomerGroupsDeleteRes {
  const AdminCustomerGroupsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminCustomerGroupsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCustomerGroupsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminCustomerGroupsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminCustomerGroupsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminCustomerGroupsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCustomerGroupsDeleteResExtension
    on AdminCustomerGroupsDeleteRes {
  AdminCustomerGroupsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminCustomerGroupsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminCustomerGroupsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminCustomerGroupsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCustomerGroupsListRes {
  const AdminCustomerGroupsListRes({
    required this.customerGroups,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminCustomerGroupsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCustomerGroupsListResFromJson(json);

  static const toJsonFactory = _$AdminCustomerGroupsListResToJson;
  Map<String, dynamic> toJson() => _$AdminCustomerGroupsListResToJson(this);

  @JsonKey(
      name: 'customer_groups',
      includeIfNull: false,
      defaultValue: <CustomerGroup>[])
  final List<CustomerGroup> customerGroups;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminCustomerGroupsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCustomerGroupsListResExtension on AdminCustomerGroupsListRes {
  AdminCustomerGroupsListRes copyWith(
      {List<CustomerGroup>? customerGroups,
      int? count,
      int? offset,
      int? limit}) {
    return AdminCustomerGroupsListRes(
        customerGroups: customerGroups ?? this.customerGroups,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminCustomerGroupsListRes copyWithWrapped(
      {Wrapped<List<CustomerGroup>>? customerGroups,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminCustomerGroupsListRes(
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCustomerGroupsRes {
  const AdminCustomerGroupsRes({
    required this.customerGroup,
  });

  factory AdminCustomerGroupsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCustomerGroupsResFromJson(json);

  static const toJsonFactory = _$AdminCustomerGroupsResToJson;
  Map<String, dynamic> toJson() => _$AdminCustomerGroupsResToJson(this);

  @JsonKey(name: 'customer_group', includeIfNull: false)
  final CustomerGroup? customerGroup;
  static const fromJsonFactory = _$AdminCustomerGroupsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCustomerGroupsResExtension on AdminCustomerGroupsRes {
  AdminCustomerGroupsRes copyWith({CustomerGroup? customerGroup}) {
    return AdminCustomerGroupsRes(
        customerGroup: customerGroup ?? this.customerGroup);
  }

  AdminCustomerGroupsRes copyWithWrapped(
      {Wrapped<CustomerGroup?>? customerGroup}) {
    return AdminCustomerGroupsRes(
        customerGroup:
            (customerGroup != null ? customerGroup.value : this.customerGroup));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCustomersListRes {
  const AdminCustomersListRes({
    required this.customers,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminCustomersListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCustomersListResFromJson(json);

  static const toJsonFactory = _$AdminCustomersListResToJson;
  Map<String, dynamic> toJson() => _$AdminCustomersListResToJson(this);

  @JsonKey(name: 'customers', includeIfNull: false, defaultValue: <Customer>[])
  final List<Customer> customers;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminCustomersListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCustomersListResExtension on AdminCustomersListRes {
  AdminCustomersListRes copyWith(
      {List<Customer>? customers, int? count, int? offset, int? limit}) {
    return AdminCustomersListRes(
        customers: customers ?? this.customers,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminCustomersListRes copyWithWrapped(
      {Wrapped<List<Customer>>? customers,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminCustomersListRes(
        customers: (customers != null ? customers.value : this.customers),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminCustomersRes {
  const AdminCustomersRes({
    required this.customer,
  });

  factory AdminCustomersRes.fromJson(Map<String, dynamic> json) =>
      _$AdminCustomersResFromJson(json);

  static const toJsonFactory = _$AdminCustomersResToJson;
  Map<String, dynamic> toJson() => _$AdminCustomersResToJson(this);

  @JsonKey(name: 'customer', includeIfNull: false)
  final Customer customer;
  static const fromJsonFactory = _$AdminCustomersResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminCustomersResExtension on AdminCustomersRes {
  AdminCustomersRes copyWith({Customer? customer}) {
    return AdminCustomersRes(customer: customer ?? this.customer);
  }

  AdminCustomersRes copyWithWrapped({Wrapped<Customer>? customer}) {
    return AdminCustomersRes(
        customer: (customer != null ? customer.value : this.customer));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteCustomerGroupsGroupCustomerBatchReq {
  const AdminDeleteCustomerGroupsGroupCustomerBatchReq({
    required this.customerIds,
  });

  factory AdminDeleteCustomerGroupsGroupCustomerBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteCustomerGroupsGroupCustomerBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeleteCustomerGroupsGroupCustomerBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteCustomerGroupsGroupCustomerBatchReqToJson(this);

  @JsonKey(name: 'customer_ids', includeIfNull: false)
  final List<AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item>
      customerIds;
  static const fromJsonFactory =
      _$AdminDeleteCustomerGroupsGroupCustomerBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteCustomerGroupsGroupCustomerBatchReqExtension
    on AdminDeleteCustomerGroupsGroupCustomerBatchReq {
  AdminDeleteCustomerGroupsGroupCustomerBatchReq copyWith(
      {List<AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item>?
          customerIds}) {
    return AdminDeleteCustomerGroupsGroupCustomerBatchReq(
        customerIds: customerIds ?? this.customerIds);
  }

  AdminDeleteCustomerGroupsGroupCustomerBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item>>?
          customerIds}) {
    return AdminDeleteCustomerGroupsGroupCustomerBatchReq(
        customerIds:
            (customerIds != null ? customerIds.value : this.customerIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteDiscountsDiscountConditionsConditionBatchReq {
  const AdminDeleteDiscountsDiscountConditionsConditionBatchReq({
    required this.resources,
  });

  factory AdminDeleteDiscountsDiscountConditionsConditionBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteDiscountsDiscountConditionsConditionBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeleteDiscountsDiscountConditionsConditionBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteDiscountsDiscountConditionsConditionBatchReqToJson(this);

  @JsonKey(name: 'resources', includeIfNull: false)
  final List<
          AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item>
      resources;
  static const fromJsonFactory =
      _$AdminDeleteDiscountsDiscountConditionsConditionBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteDiscountsDiscountConditionsConditionBatchReqExtension
    on AdminDeleteDiscountsDiscountConditionsConditionBatchReq {
  AdminDeleteDiscountsDiscountConditionsConditionBatchReq copyWith(
      {List<AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item>?
          resources}) {
    return AdminDeleteDiscountsDiscountConditionsConditionBatchReq(
        resources: resources ?? this.resources);
  }

  AdminDeleteDiscountsDiscountConditionsConditionBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item>>?
          resources}) {
    return AdminDeleteDiscountsDiscountConditionsConditionBatchReq(
        resources: (resources != null ? resources.value : this.resources));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeletePriceListPricesPricesReq {
  const AdminDeletePriceListPricesPricesReq({
    this.priceIds,
  });

  factory AdminDeletePriceListPricesPricesReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeletePriceListPricesPricesReqFromJson(json);

  static const toJsonFactory = _$AdminDeletePriceListPricesPricesReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeletePriceListPricesPricesReqToJson(this);

  @JsonKey(name: 'price_ids', includeIfNull: false, defaultValue: <String>[])
  final List<String>? priceIds;
  static const fromJsonFactory = _$AdminDeletePriceListPricesPricesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeletePriceListPricesPricesReqExtension
    on AdminDeletePriceListPricesPricesReq {
  AdminDeletePriceListPricesPricesReq copyWith({List<String>? priceIds}) {
    return AdminDeletePriceListPricesPricesReq(
        priceIds: priceIds ?? this.priceIds);
  }

  AdminDeletePriceListPricesPricesReq copyWithWrapped(
      {Wrapped<List<String>?>? priceIds}) {
    return AdminDeletePriceListPricesPricesReq(
        priceIds: (priceIds != null ? priceIds.value : this.priceIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeletePriceListsPriceListProductsPricesBatchReq {
  const AdminDeletePriceListsPriceListProductsPricesBatchReq({
    this.productIds,
  });

  factory AdminDeletePriceListsPriceListProductsPricesBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeletePriceListsPriceListProductsPricesBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeletePriceListsPriceListProductsPricesBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeletePriceListsPriceListProductsPricesBatchReqToJson(this);

  @JsonKey(name: 'product_ids', includeIfNull: false, defaultValue: <String>[])
  final List<String>? productIds;
  static const fromJsonFactory =
      _$AdminDeletePriceListsPriceListProductsPricesBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeletePriceListsPriceListProductsPricesBatchReqExtension
    on AdminDeletePriceListsPriceListProductsPricesBatchReq {
  AdminDeletePriceListsPriceListProductsPricesBatchReq copyWith(
      {List<String>? productIds}) {
    return AdminDeletePriceListsPriceListProductsPricesBatchReq(
        productIds: productIds ?? this.productIds);
  }

  AdminDeletePriceListsPriceListProductsPricesBatchReq copyWithWrapped(
      {Wrapped<List<String>?>? productIds}) {
    return AdminDeletePriceListsPriceListProductsPricesBatchReq(
        productIds: (productIds != null ? productIds.value : this.productIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteProductCategoriesCategoryProductsBatchReq {
  const AdminDeleteProductCategoriesCategoryProductsBatchReq({
    required this.productIds,
  });

  factory AdminDeleteProductCategoriesCategoryProductsBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteProductCategoriesCategoryProductsBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeleteProductCategoriesCategoryProductsBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteProductCategoriesCategoryProductsBatchReqToJson(this);

  @JsonKey(name: 'product_ids', includeIfNull: false)
  final List<
          AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item>
      productIds;
  static const fromJsonFactory =
      _$AdminDeleteProductCategoriesCategoryProductsBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteProductCategoriesCategoryProductsBatchReqExtension
    on AdminDeleteProductCategoriesCategoryProductsBatchReq {
  AdminDeleteProductCategoriesCategoryProductsBatchReq copyWith(
      {List<AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item>?
          productIds}) {
    return AdminDeleteProductCategoriesCategoryProductsBatchReq(
        productIds: productIds ?? this.productIds);
  }

  AdminDeleteProductCategoriesCategoryProductsBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item>>?
          productIds}) {
    return AdminDeleteProductCategoriesCategoryProductsBatchReq(
        productIds: (productIds != null ? productIds.value : this.productIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteProductsFromCollectionReq {
  const AdminDeleteProductsFromCollectionReq({
    required this.productIds,
  });

  factory AdminDeleteProductsFromCollectionReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteProductsFromCollectionReqFromJson(json);

  static const toJsonFactory = _$AdminDeleteProductsFromCollectionReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteProductsFromCollectionReqToJson(this);

  @JsonKey(name: 'product_ids', includeIfNull: false, defaultValue: <String>[])
  final List<String> productIds;
  static const fromJsonFactory = _$AdminDeleteProductsFromCollectionReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteProductsFromCollectionReqExtension
    on AdminDeleteProductsFromCollectionReq {
  AdminDeleteProductsFromCollectionReq copyWith({List<String>? productIds}) {
    return AdminDeleteProductsFromCollectionReq(
        productIds: productIds ?? this.productIds);
  }

  AdminDeleteProductsFromCollectionReq copyWithWrapped(
      {Wrapped<List<String>>? productIds}) {
    return AdminDeleteProductsFromCollectionReq(
        productIds: (productIds != null ? productIds.value : this.productIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteProductsFromCollectionRes {
  const AdminDeleteProductsFromCollectionRes({
    required this.id,
    required this.object,
    required this.removedProducts,
  });

  factory AdminDeleteProductsFromCollectionRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteProductsFromCollectionResFromJson(json);

  static const toJsonFactory = _$AdminDeleteProductsFromCollectionResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteProductsFromCollectionResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(
      name: 'removed_products', includeIfNull: false, defaultValue: <String>[])
  final List<String> removedProducts;
  static const fromJsonFactory = _$AdminDeleteProductsFromCollectionResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteProductsFromCollectionResExtension
    on AdminDeleteProductsFromCollectionRes {
  AdminDeleteProductsFromCollectionRes copyWith(
      {String? id, String? object, List<String>? removedProducts}) {
    return AdminDeleteProductsFromCollectionRes(
        id: id ?? this.id,
        object: object ?? this.object,
        removedProducts: removedProducts ?? this.removedProducts);
  }

  AdminDeleteProductsFromCollectionRes copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? object,
      Wrapped<List<String>>? removedProducts}) {
    return AdminDeleteProductsFromCollectionRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        removedProducts: (removedProducts != null
            ? removedProducts.value
            : this.removedProducts));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeletePublishableApiKeySalesChannelsBatchReq {
  const AdminDeletePublishableApiKeySalesChannelsBatchReq({
    required this.salesChannelIds,
  });

  factory AdminDeletePublishableApiKeySalesChannelsBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeletePublishableApiKeySalesChannelsBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeletePublishableApiKeySalesChannelsBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeletePublishableApiKeySalesChannelsBatchReqToJson(this);

  @JsonKey(name: 'sales_channel_ids', includeIfNull: false)
  final List<
          AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item>
      salesChannelIds;
  static const fromJsonFactory =
      _$AdminDeletePublishableApiKeySalesChannelsBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeletePublishableApiKeySalesChannelsBatchReqExtension
    on AdminDeletePublishableApiKeySalesChannelsBatchReq {
  AdminDeletePublishableApiKeySalesChannelsBatchReq copyWith(
      {List<AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item>?
          salesChannelIds}) {
    return AdminDeletePublishableApiKeySalesChannelsBatchReq(
        salesChannelIds: salesChannelIds ?? this.salesChannelIds);
  }

  AdminDeletePublishableApiKeySalesChannelsBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item>>?
          salesChannelIds}) {
    return AdminDeletePublishableApiKeySalesChannelsBatchReq(
        salesChannelIds: (salesChannelIds != null
            ? salesChannelIds.value
            : this.salesChannelIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteSalesChannelsChannelProductsBatchReq {
  const AdminDeleteSalesChannelsChannelProductsBatchReq({
    required this.productIds,
  });

  factory AdminDeleteSalesChannelsChannelProductsBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteSalesChannelsChannelProductsBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeleteSalesChannelsChannelProductsBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteSalesChannelsChannelProductsBatchReqToJson(this);

  @JsonKey(name: 'product_ids', includeIfNull: false)
  final List<AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item>
      productIds;
  static const fromJsonFactory =
      _$AdminDeleteSalesChannelsChannelProductsBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteSalesChannelsChannelProductsBatchReqExtension
    on AdminDeleteSalesChannelsChannelProductsBatchReq {
  AdminDeleteSalesChannelsChannelProductsBatchReq copyWith(
      {List<AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item>?
          productIds}) {
    return AdminDeleteSalesChannelsChannelProductsBatchReq(
        productIds: productIds ?? this.productIds);
  }

  AdminDeleteSalesChannelsChannelProductsBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item>>?
          productIds}) {
    return AdminDeleteSalesChannelsChannelProductsBatchReq(
        productIds: (productIds != null ? productIds.value : this.productIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteSalesChannelsChannelStockLocationsReq {
  const AdminDeleteSalesChannelsChannelStockLocationsReq({
    required this.locationId,
  });

  factory AdminDeleteSalesChannelsChannelStockLocationsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteSalesChannelsChannelStockLocationsReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeleteSalesChannelsChannelStockLocationsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteSalesChannelsChannelStockLocationsReqToJson(this);

  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  static const fromJsonFactory =
      _$AdminDeleteSalesChannelsChannelStockLocationsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteSalesChannelsChannelStockLocationsReqExtension
    on AdminDeleteSalesChannelsChannelStockLocationsReq {
  AdminDeleteSalesChannelsChannelStockLocationsReq copyWith(
      {String? locationId}) {
    return AdminDeleteSalesChannelsChannelStockLocationsReq(
        locationId: locationId ?? this.locationId);
  }

  AdminDeleteSalesChannelsChannelStockLocationsReq copyWithWrapped(
      {Wrapped<String>? locationId}) {
    return AdminDeleteSalesChannelsChannelStockLocationsReq(
        locationId: (locationId != null ? locationId.value : this.locationId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteShippingProfileRes {
  const AdminDeleteShippingProfileRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminDeleteShippingProfileRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDeleteShippingProfileResFromJson(json);

  static const toJsonFactory = _$AdminDeleteShippingProfileResToJson;
  Map<String, dynamic> toJson() => _$AdminDeleteShippingProfileResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminDeleteShippingProfileResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteShippingProfileResExtension
    on AdminDeleteShippingProfileRes {
  AdminDeleteShippingProfileRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminDeleteShippingProfileRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminDeleteShippingProfileRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminDeleteShippingProfileRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteTaxRatesTaxRateProductTypesReq {
  const AdminDeleteTaxRatesTaxRateProductTypesReq({
    required this.productTypes,
  });

  factory AdminDeleteTaxRatesTaxRateProductTypesReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteTaxRatesTaxRateProductTypesReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeleteTaxRatesTaxRateProductTypesReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteTaxRatesTaxRateProductTypesReqToJson(this);

  @JsonKey(
      name: 'product_types', includeIfNull: false, defaultValue: <String>[])
  final List<String> productTypes;
  static const fromJsonFactory =
      _$AdminDeleteTaxRatesTaxRateProductTypesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteTaxRatesTaxRateProductTypesReqExtension
    on AdminDeleteTaxRatesTaxRateProductTypesReq {
  AdminDeleteTaxRatesTaxRateProductTypesReq copyWith(
      {List<String>? productTypes}) {
    return AdminDeleteTaxRatesTaxRateProductTypesReq(
        productTypes: productTypes ?? this.productTypes);
  }

  AdminDeleteTaxRatesTaxRateProductTypesReq copyWithWrapped(
      {Wrapped<List<String>>? productTypes}) {
    return AdminDeleteTaxRatesTaxRateProductTypesReq(
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteTaxRatesTaxRateProductsReq {
  const AdminDeleteTaxRatesTaxRateProductsReq({
    required this.products,
  });

  factory AdminDeleteTaxRatesTaxRateProductsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteTaxRatesTaxRateProductsReqFromJson(json);

  static const toJsonFactory = _$AdminDeleteTaxRatesTaxRateProductsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteTaxRatesTaxRateProductsReqToJson(this);

  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <String>[])
  final List<String> products;
  static const fromJsonFactory =
      _$AdminDeleteTaxRatesTaxRateProductsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteTaxRatesTaxRateProductsReqExtension
    on AdminDeleteTaxRatesTaxRateProductsReq {
  AdminDeleteTaxRatesTaxRateProductsReq copyWith({List<String>? products}) {
    return AdminDeleteTaxRatesTaxRateProductsReq(
        products: products ?? this.products);
  }

  AdminDeleteTaxRatesTaxRateProductsReq copyWithWrapped(
      {Wrapped<List<String>>? products}) {
    return AdminDeleteTaxRatesTaxRateProductsReq(
        products: (products != null ? products.value : this.products));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteTaxRatesTaxRateShippingOptionsReq {
  const AdminDeleteTaxRatesTaxRateShippingOptionsReq({
    required this.shippingOptions,
  });

  factory AdminDeleteTaxRatesTaxRateShippingOptionsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteTaxRatesTaxRateShippingOptionsReqFromJson(json);

  static const toJsonFactory =
      _$AdminDeleteTaxRatesTaxRateShippingOptionsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteTaxRatesTaxRateShippingOptionsReqToJson(this);

  @JsonKey(
      name: 'shipping_options', includeIfNull: false, defaultValue: <String>[])
  final List<String> shippingOptions;
  static const fromJsonFactory =
      _$AdminDeleteTaxRatesTaxRateShippingOptionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteTaxRatesTaxRateShippingOptionsReqExtension
    on AdminDeleteTaxRatesTaxRateShippingOptionsReq {
  AdminDeleteTaxRatesTaxRateShippingOptionsReq copyWith(
      {List<String>? shippingOptions}) {
    return AdminDeleteTaxRatesTaxRateShippingOptionsReq(
        shippingOptions: shippingOptions ?? this.shippingOptions);
  }

  AdminDeleteTaxRatesTaxRateShippingOptionsReq copyWithWrapped(
      {Wrapped<List<String>>? shippingOptions}) {
    return AdminDeleteTaxRatesTaxRateShippingOptionsReq(
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteUploadsReq {
  const AdminDeleteUploadsReq({
    required this.fileKey,
  });

  factory AdminDeleteUploadsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminDeleteUploadsReqFromJson(json);

  static const toJsonFactory = _$AdminDeleteUploadsReqToJson;
  Map<String, dynamic> toJson() => _$AdminDeleteUploadsReqToJson(this);

  @JsonKey(name: 'file_key', includeIfNull: false, defaultValue: 'default')
  final String fileKey;
  static const fromJsonFactory = _$AdminDeleteUploadsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteUploadsReqExtension on AdminDeleteUploadsReq {
  AdminDeleteUploadsReq copyWith({String? fileKey}) {
    return AdminDeleteUploadsReq(fileKey: fileKey ?? this.fileKey);
  }

  AdminDeleteUploadsReq copyWithWrapped({Wrapped<String>? fileKey}) {
    return AdminDeleteUploadsReq(
        fileKey: (fileKey != null ? fileKey.value : this.fileKey));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteUploadsRes {
  const AdminDeleteUploadsRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminDeleteUploadsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDeleteUploadsResFromJson(json);

  static const toJsonFactory = _$AdminDeleteUploadsResToJson;
  Map<String, dynamic> toJson() => _$AdminDeleteUploadsResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminDeleteUploadsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteUploadsResExtension on AdminDeleteUploadsRes {
  AdminDeleteUploadsRes copyWith({String? id, String? object, bool? deleted}) {
    return AdminDeleteUploadsRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminDeleteUploadsRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminDeleteUploadsRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteUserRes {
  const AdminDeleteUserRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminDeleteUserRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDeleteUserResFromJson(json);

  static const toJsonFactory = _$AdminDeleteUserResToJson;
  Map<String, dynamic> toJson() => _$AdminDeleteUserResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminDeleteUserResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteUserResExtension on AdminDeleteUserRes {
  AdminDeleteUserRes copyWith({String? id, String? object, bool? deleted}) {
    return AdminDeleteUserRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminDeleteUserRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminDeleteUserRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDiscountConditionsDeleteRes {
  const AdminDiscountConditionsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
    required this.discount,
  });

  factory AdminDiscountConditionsDeleteRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDiscountConditionsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminDiscountConditionsDeleteResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDiscountConditionsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  @JsonKey(name: 'discount', includeIfNull: false)
  final Discount discount;
  static const fromJsonFactory = _$AdminDiscountConditionsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDiscountConditionsDeleteResExtension
    on AdminDiscountConditionsDeleteRes {
  AdminDiscountConditionsDeleteRes copyWith(
      {String? id, String? object, bool? deleted, Discount? discount}) {
    return AdminDiscountConditionsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted,
        discount: discount ?? this.discount);
  }

  AdminDiscountConditionsDeleteRes copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? object,
      Wrapped<bool>? deleted,
      Wrapped<Discount>? discount}) {
    return AdminDiscountConditionsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted),
        discount: (discount != null ? discount.value : this.discount));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDiscountConditionsRes {
  const AdminDiscountConditionsRes({
    required this.discountCondition,
  });

  factory AdminDiscountConditionsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDiscountConditionsResFromJson(json);

  static const toJsonFactory = _$AdminDiscountConditionsResToJson;
  Map<String, dynamic> toJson() => _$AdminDiscountConditionsResToJson(this);

  @JsonKey(name: 'discount_condition', includeIfNull: false)
  final DiscountCondition? discountCondition;
  static const fromJsonFactory = _$AdminDiscountConditionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDiscountConditionsResExtension on AdminDiscountConditionsRes {
  AdminDiscountConditionsRes copyWith({DiscountCondition? discountCondition}) {
    return AdminDiscountConditionsRes(
        discountCondition: discountCondition ?? this.discountCondition);
  }

  AdminDiscountConditionsRes copyWithWrapped(
      {Wrapped<DiscountCondition?>? discountCondition}) {
    return AdminDiscountConditionsRes(
        discountCondition: (discountCondition != null
            ? discountCondition.value
            : this.discountCondition));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDiscountsDeleteRes {
  const AdminDiscountsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminDiscountsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDiscountsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminDiscountsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminDiscountsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminDiscountsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDiscountsDeleteResExtension on AdminDiscountsDeleteRes {
  AdminDiscountsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminDiscountsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminDiscountsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminDiscountsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDiscountsListRes {
  const AdminDiscountsListRes({
    required this.discounts,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminDiscountsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDiscountsListResFromJson(json);

  static const toJsonFactory = _$AdminDiscountsListResToJson;
  Map<String, dynamic> toJson() => _$AdminDiscountsListResToJson(this);

  @JsonKey(name: 'discounts', includeIfNull: false, defaultValue: <Discount>[])
  final List<Discount> discounts;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminDiscountsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDiscountsListResExtension on AdminDiscountsListRes {
  AdminDiscountsListRes copyWith(
      {List<Discount>? discounts, int? count, int? offset, int? limit}) {
    return AdminDiscountsListRes(
        discounts: discounts ?? this.discounts,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminDiscountsListRes copyWithWrapped(
      {Wrapped<List<Discount>>? discounts,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminDiscountsListRes(
        discounts: (discounts != null ? discounts.value : this.discounts),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDiscountsRes {
  const AdminDiscountsRes({
    required this.discount,
  });

  factory AdminDiscountsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDiscountsResFromJson(json);

  static const toJsonFactory = _$AdminDiscountsResToJson;
  Map<String, dynamic> toJson() => _$AdminDiscountsResToJson(this);

  @JsonKey(name: 'discount', includeIfNull: false)
  final Discount discount;
  static const fromJsonFactory = _$AdminDiscountsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDiscountsResExtension on AdminDiscountsRes {
  AdminDiscountsRes copyWith({Discount? discount}) {
    return AdminDiscountsRes(discount: discount ?? this.discount);
  }

  AdminDiscountsRes copyWithWrapped({Wrapped<Discount>? discount}) {
    return AdminDiscountsRes(
        discount: (discount != null ? discount.value : this.discount));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDraftOrdersDeleteRes {
  const AdminDraftOrdersDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminDraftOrdersDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDraftOrdersDeleteResFromJson(json);

  static const toJsonFactory = _$AdminDraftOrdersDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminDraftOrdersDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminDraftOrdersDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDraftOrdersDeleteResExtension on AdminDraftOrdersDeleteRes {
  AdminDraftOrdersDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminDraftOrdersDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminDraftOrdersDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminDraftOrdersDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDraftOrdersListRes {
  const AdminDraftOrdersListRes({
    required this.draftOrders,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminDraftOrdersListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDraftOrdersListResFromJson(json);

  static const toJsonFactory = _$AdminDraftOrdersListResToJson;
  Map<String, dynamic> toJson() => _$AdminDraftOrdersListResToJson(this);

  @JsonKey(
      name: 'draft_orders', includeIfNull: false, defaultValue: <DraftOrder>[])
  final List<DraftOrder> draftOrders;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminDraftOrdersListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDraftOrdersListResExtension on AdminDraftOrdersListRes {
  AdminDraftOrdersListRes copyWith(
      {List<DraftOrder>? draftOrders, int? count, int? offset, int? limit}) {
    return AdminDraftOrdersListRes(
        draftOrders: draftOrders ?? this.draftOrders,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminDraftOrdersListRes copyWithWrapped(
      {Wrapped<List<DraftOrder>>? draftOrders,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminDraftOrdersListRes(
        draftOrders:
            (draftOrders != null ? draftOrders.value : this.draftOrders),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDraftOrdersRes {
  const AdminDraftOrdersRes({
    required this.draftOrder,
  });

  factory AdminDraftOrdersRes.fromJson(Map<String, dynamic> json) =>
      _$AdminDraftOrdersResFromJson(json);

  static const toJsonFactory = _$AdminDraftOrdersResToJson;
  Map<String, dynamic> toJson() => _$AdminDraftOrdersResToJson(this);

  @JsonKey(name: 'draft_order', includeIfNull: false)
  final DraftOrder? draftOrder;
  static const fromJsonFactory = _$AdminDraftOrdersResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDraftOrdersResExtension on AdminDraftOrdersRes {
  AdminDraftOrdersRes copyWith({DraftOrder? draftOrder}) {
    return AdminDraftOrdersRes(draftOrder: draftOrder ?? this.draftOrder);
  }

  AdminDraftOrdersRes copyWithWrapped({Wrapped<DraftOrder?>? draftOrder}) {
    return AdminDraftOrdersRes(
        draftOrder: (draftOrder != null ? draftOrder.value : this.draftOrder));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminExtendedStoresRes {
  const AdminExtendedStoresRes({
    required this.store,
  });

  factory AdminExtendedStoresRes.fromJson(Map<String, dynamic> json) =>
      _$AdminExtendedStoresResFromJson(json);

  static const toJsonFactory = _$AdminExtendedStoresResToJson;
  Map<String, dynamic> toJson() => _$AdminExtendedStoresResToJson(this);

  @JsonKey(name: 'store', includeIfNull: false)
  final ExtendedStoreDTO store;
  static const fromJsonFactory = _$AdminExtendedStoresResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminExtendedStoresResExtension on AdminExtendedStoresRes {
  AdminExtendedStoresRes copyWith({ExtendedStoreDTO? store}) {
    return AdminExtendedStoresRes(store: store ?? this.store);
  }

  AdminExtendedStoresRes copyWithWrapped({Wrapped<ExtendedStoreDTO>? store}) {
    return AdminExtendedStoresRes(
        store: (store != null ? store.value : this.store));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminGetRegionsRegionFulfillmentOptionsRes {
  const AdminGetRegionsRegionFulfillmentOptionsRes({
    required this.fulfillmentOptions,
  });

  factory AdminGetRegionsRegionFulfillmentOptionsRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminGetRegionsRegionFulfillmentOptionsResFromJson(json);

  static const toJsonFactory =
      _$AdminGetRegionsRegionFulfillmentOptionsResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminGetRegionsRegionFulfillmentOptionsResToJson(this);

  @JsonKey(name: 'fulfillment_options', includeIfNull: false)
  final List<AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item>
      fulfillmentOptions;
  static const fromJsonFactory =
      _$AdminGetRegionsRegionFulfillmentOptionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminGetRegionsRegionFulfillmentOptionsResExtension
    on AdminGetRegionsRegionFulfillmentOptionsRes {
  AdminGetRegionsRegionFulfillmentOptionsRes copyWith(
      {List<AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item>?
          fulfillmentOptions}) {
    return AdminGetRegionsRegionFulfillmentOptionsRes(
        fulfillmentOptions: fulfillmentOptions ?? this.fulfillmentOptions);
  }

  AdminGetRegionsRegionFulfillmentOptionsRes copyWithWrapped(
      {Wrapped<
              List<
                  AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item>>?
          fulfillmentOptions}) {
    return AdminGetRegionsRegionFulfillmentOptionsRes(
        fulfillmentOptions: (fulfillmentOptions != null
            ? fulfillmentOptions.value
            : this.fulfillmentOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminGetVariantsVariantInventoryRes {
  const AdminGetVariantsVariantInventoryRes({
    this.variant,
  });

  factory AdminGetVariantsVariantInventoryRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminGetVariantsVariantInventoryResFromJson(json);

  static const toJsonFactory = _$AdminGetVariantsVariantInventoryResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminGetVariantsVariantInventoryResToJson(this);

  @JsonKey(name: 'variant', includeIfNull: false)
  final VariantInventory? variant;
  static const fromJsonFactory = _$AdminGetVariantsVariantInventoryResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminGetVariantsVariantInventoryResExtension
    on AdminGetVariantsVariantInventoryRes {
  AdminGetVariantsVariantInventoryRes copyWith({VariantInventory? variant}) {
    return AdminGetVariantsVariantInventoryRes(
        variant: variant ?? this.variant);
  }

  AdminGetVariantsVariantInventoryRes copyWithWrapped(
      {Wrapped<VariantInventory?>? variant}) {
    return AdminGetVariantsVariantInventoryRes(
        variant: (variant != null ? variant.value : this.variant));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminGiftCardsDeleteRes {
  const AdminGiftCardsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminGiftCardsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminGiftCardsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminGiftCardsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminGiftCardsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminGiftCardsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminGiftCardsDeleteResExtension on AdminGiftCardsDeleteRes {
  AdminGiftCardsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminGiftCardsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminGiftCardsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminGiftCardsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminGiftCardsListRes {
  const AdminGiftCardsListRes({
    required this.giftCards,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminGiftCardsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminGiftCardsListResFromJson(json);

  static const toJsonFactory = _$AdminGiftCardsListResToJson;
  Map<String, dynamic> toJson() => _$AdminGiftCardsListResToJson(this);

  @JsonKey(name: 'gift_cards', includeIfNull: false, defaultValue: <GiftCard>[])
  final List<GiftCard> giftCards;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminGiftCardsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminGiftCardsListResExtension on AdminGiftCardsListRes {
  AdminGiftCardsListRes copyWith(
      {List<GiftCard>? giftCards, int? count, int? offset, int? limit}) {
    return AdminGiftCardsListRes(
        giftCards: giftCards ?? this.giftCards,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminGiftCardsListRes copyWithWrapped(
      {Wrapped<List<GiftCard>>? giftCards,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminGiftCardsListRes(
        giftCards: (giftCards != null ? giftCards.value : this.giftCards),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminGiftCardsRes {
  const AdminGiftCardsRes({
    required this.giftCard,
  });

  factory AdminGiftCardsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminGiftCardsResFromJson(json);

  static const toJsonFactory = _$AdminGiftCardsResToJson;
  Map<String, dynamic> toJson() => _$AdminGiftCardsResToJson(this);

  @JsonKey(name: 'gift_card', includeIfNull: false)
  final GiftCard? giftCard;
  static const fromJsonFactory = _$AdminGiftCardsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminGiftCardsResExtension on AdminGiftCardsRes {
  AdminGiftCardsRes copyWith({GiftCard? giftCard}) {
    return AdminGiftCardsRes(giftCard: giftCard ?? this.giftCard);
  }

  AdminGiftCardsRes copyWithWrapped({Wrapped<GiftCard?>? giftCard}) {
    return AdminGiftCardsRes(
        giftCard: (giftCard != null ? giftCard.value : this.giftCard));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminInventoryItemsDeleteRes {
  const AdminInventoryItemsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminInventoryItemsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminInventoryItemsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminInventoryItemsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminInventoryItemsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminInventoryItemsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminInventoryItemsDeleteResExtension
    on AdminInventoryItemsDeleteRes {
  AdminInventoryItemsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminInventoryItemsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminInventoryItemsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminInventoryItemsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminInventoryItemsListRes {
  const AdminInventoryItemsListRes({
    required this.inventoryItems,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminInventoryItemsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminInventoryItemsListResFromJson(json);

  static const toJsonFactory = _$AdminInventoryItemsListResToJson;
  Map<String, dynamic> toJson() => _$AdminInventoryItemsListResToJson(this);

  @JsonKey(
      name: 'inventory_items',
      includeIfNull: false,
      defaultValue: <InventoryItemDTO>[])
  final List<InventoryItemDTO> inventoryItems;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminInventoryItemsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminInventoryItemsListResExtension on AdminInventoryItemsListRes {
  AdminInventoryItemsListRes copyWith(
      {List<InventoryItemDTO>? inventoryItems,
      int? count,
      int? offset,
      int? limit}) {
    return AdminInventoryItemsListRes(
        inventoryItems: inventoryItems ?? this.inventoryItems,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminInventoryItemsListRes copyWithWrapped(
      {Wrapped<List<InventoryItemDTO>>? inventoryItems,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminInventoryItemsListRes(
        inventoryItems: (inventoryItems != null
            ? inventoryItems.value
            : this.inventoryItems),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminInventoryItemsListWithVariantsAndLocationLevelsRes {
  const AdminInventoryItemsListWithVariantsAndLocationLevelsRes({
    required this.inventoryItems,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminInventoryItemsListWithVariantsAndLocationLevelsRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminInventoryItemsListWithVariantsAndLocationLevelsResFromJson(json);

  static const toJsonFactory =
      _$AdminInventoryItemsListWithVariantsAndLocationLevelsResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminInventoryItemsListWithVariantsAndLocationLevelsResToJson(this);

  @JsonKey(
      name: 'inventory_items',
      includeIfNull: false,
      defaultValue: <DecoratedInventoryItemDTO>[])
  final List<DecoratedInventoryItemDTO> inventoryItems;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory =
      _$AdminInventoryItemsListWithVariantsAndLocationLevelsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminInventoryItemsListWithVariantsAndLocationLevelsResExtension
    on AdminInventoryItemsListWithVariantsAndLocationLevelsRes {
  AdminInventoryItemsListWithVariantsAndLocationLevelsRes copyWith(
      {List<DecoratedInventoryItemDTO>? inventoryItems,
      int? count,
      int? offset,
      int? limit}) {
    return AdminInventoryItemsListWithVariantsAndLocationLevelsRes(
        inventoryItems: inventoryItems ?? this.inventoryItems,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminInventoryItemsListWithVariantsAndLocationLevelsRes copyWithWrapped(
      {Wrapped<List<DecoratedInventoryItemDTO>>? inventoryItems,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminInventoryItemsListWithVariantsAndLocationLevelsRes(
        inventoryItems: (inventoryItems != null
            ? inventoryItems.value
            : this.inventoryItems),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminInventoryItemsLocationLevelsRes {
  const AdminInventoryItemsLocationLevelsRes({
    required this.inventoryItem,
  });

  factory AdminInventoryItemsLocationLevelsRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminInventoryItemsLocationLevelsResFromJson(json);

  static const toJsonFactory = _$AdminInventoryItemsLocationLevelsResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminInventoryItemsLocationLevelsResToJson(this);

  @JsonKey(name: 'inventory_item', includeIfNull: false)
  final AdminInventoryItemsLocationLevelsRes$InventoryItem inventoryItem;
  static const fromJsonFactory = _$AdminInventoryItemsLocationLevelsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminInventoryItemsLocationLevelsResExtension
    on AdminInventoryItemsLocationLevelsRes {
  AdminInventoryItemsLocationLevelsRes copyWith(
      {AdminInventoryItemsLocationLevelsRes$InventoryItem? inventoryItem}) {
    return AdminInventoryItemsLocationLevelsRes(
        inventoryItem: inventoryItem ?? this.inventoryItem);
  }

  AdminInventoryItemsLocationLevelsRes copyWithWrapped(
      {Wrapped<AdminInventoryItemsLocationLevelsRes$InventoryItem>?
          inventoryItem}) {
    return AdminInventoryItemsLocationLevelsRes(
        inventoryItem:
            (inventoryItem != null ? inventoryItem.value : this.inventoryItem));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminInventoryItemsRes {
  const AdminInventoryItemsRes({
    required this.inventoryItem,
  });

  factory AdminInventoryItemsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminInventoryItemsResFromJson(json);

  static const toJsonFactory = _$AdminInventoryItemsResToJson;
  Map<String, dynamic> toJson() => _$AdminInventoryItemsResToJson(this);

  @JsonKey(name: 'inventory_item', includeIfNull: false)
  final InventoryItemDTO? inventoryItem;
  static const fromJsonFactory = _$AdminInventoryItemsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminInventoryItemsResExtension on AdminInventoryItemsRes {
  AdminInventoryItemsRes copyWith({InventoryItemDTO? inventoryItem}) {
    return AdminInventoryItemsRes(
        inventoryItem: inventoryItem ?? this.inventoryItem);
  }

  AdminInventoryItemsRes copyWithWrapped(
      {Wrapped<InventoryItemDTO?>? inventoryItem}) {
    return AdminInventoryItemsRes(
        inventoryItem:
            (inventoryItem != null ? inventoryItem.value : this.inventoryItem));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminInviteDeleteRes {
  const AdminInviteDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminInviteDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminInviteDeleteResFromJson(json);

  static const toJsonFactory = _$AdminInviteDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminInviteDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminInviteDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminInviteDeleteResExtension on AdminInviteDeleteRes {
  AdminInviteDeleteRes copyWith({String? id, String? object, bool? deleted}) {
    return AdminInviteDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminInviteDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminInviteDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminListInvitesRes {
  const AdminListInvitesRes({
    required this.invites,
  });

  factory AdminListInvitesRes.fromJson(Map<String, dynamic> json) =>
      _$AdminListInvitesResFromJson(json);

  static const toJsonFactory = _$AdminListInvitesResToJson;
  Map<String, dynamic> toJson() => _$AdminListInvitesResToJson(this);

  @JsonKey(name: 'invites', includeIfNull: false, defaultValue: <Invite>[])
  final List<Invite> invites;
  static const fromJsonFactory = _$AdminListInvitesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminListInvitesResExtension on AdminListInvitesRes {
  AdminListInvitesRes copyWith({List<Invite>? invites}) {
    return AdminListInvitesRes(invites: invites ?? this.invites);
  }

  AdminListInvitesRes copyWithWrapped({Wrapped<List<Invite>>? invites}) {
    return AdminListInvitesRes(
        invites: (invites != null ? invites.value : this.invites));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminNotesDeleteRes {
  const AdminNotesDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminNotesDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminNotesDeleteResFromJson(json);

  static const toJsonFactory = _$AdminNotesDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminNotesDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminNotesDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminNotesDeleteResExtension on AdminNotesDeleteRes {
  AdminNotesDeleteRes copyWith({String? id, String? object, bool? deleted}) {
    return AdminNotesDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminNotesDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminNotesDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminNotesListRes {
  const AdminNotesListRes({
    required this.notes,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminNotesListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminNotesListResFromJson(json);

  static const toJsonFactory = _$AdminNotesListResToJson;
  Map<String, dynamic> toJson() => _$AdminNotesListResToJson(this);

  @JsonKey(name: 'notes', includeIfNull: false, defaultValue: <Note>[])
  final List<Note> notes;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminNotesListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminNotesListResExtension on AdminNotesListRes {
  AdminNotesListRes copyWith(
      {List<Note>? notes, int? count, int? offset, int? limit}) {
    return AdminNotesListRes(
        notes: notes ?? this.notes,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminNotesListRes copyWithWrapped(
      {Wrapped<List<Note>>? notes,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminNotesListRes(
        notes: (notes != null ? notes.value : this.notes),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminNotesRes {
  const AdminNotesRes({
    required this.note,
  });

  factory AdminNotesRes.fromJson(Map<String, dynamic> json) =>
      _$AdminNotesResFromJson(json);

  static const toJsonFactory = _$AdminNotesResToJson;
  Map<String, dynamic> toJson() => _$AdminNotesResToJson(this);

  @JsonKey(name: 'note', includeIfNull: false)
  final Note note;
  static const fromJsonFactory = _$AdminNotesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminNotesResExtension on AdminNotesRes {
  AdminNotesRes copyWith({Note? note}) {
    return AdminNotesRes(note: note ?? this.note);
  }

  AdminNotesRes copyWithWrapped({Wrapped<Note>? note}) {
    return AdminNotesRes(note: (note != null ? note.value : this.note));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminNotificationsListRes {
  const AdminNotificationsListRes({
    required this.notifications,
    this.count,
    this.offset,
    this.limit,
  });

  factory AdminNotificationsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminNotificationsListResFromJson(json);

  static const toJsonFactory = _$AdminNotificationsListResToJson;
  Map<String, dynamic> toJson() => _$AdminNotificationsListResToJson(this);

  @JsonKey(
      name: 'notifications',
      includeIfNull: false,
      defaultValue: <Notification>[])
  final List<Notification> notifications;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int? count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int? offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int? limit;
  static const fromJsonFactory = _$AdminNotificationsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminNotificationsListResExtension on AdminNotificationsListRes {
  AdminNotificationsListRes copyWith(
      {List<Notification>? notifications,
      int? count,
      int? offset,
      int? limit}) {
    return AdminNotificationsListRes(
        notifications: notifications ?? this.notifications,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminNotificationsListRes copyWithWrapped(
      {Wrapped<List<Notification>>? notifications,
      Wrapped<int?>? count,
      Wrapped<int?>? offset,
      Wrapped<int?>? limit}) {
    return AdminNotificationsListRes(
        notifications:
            (notifications != null ? notifications.value : this.notifications),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminNotificationsRes {
  const AdminNotificationsRes({
    required this.notification,
  });

  factory AdminNotificationsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminNotificationsResFromJson(json);

  static const toJsonFactory = _$AdminNotificationsResToJson;
  Map<String, dynamic> toJson() => _$AdminNotificationsResToJson(this);

  @JsonKey(name: 'notification', includeIfNull: false)
  final Notification notification;
  static const fromJsonFactory = _$AdminNotificationsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminNotificationsResExtension on AdminNotificationsRes {
  AdminNotificationsRes copyWith({Notification? notification}) {
    return AdminNotificationsRes(
        notification: notification ?? this.notification);
  }

  AdminNotificationsRes copyWithWrapped({Wrapped<Notification>? notification}) {
    return AdminNotificationsRes(
        notification:
            (notification != null ? notification.value : this.notification));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminOrderEditDeleteRes {
  const AdminOrderEditDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminOrderEditDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminOrderEditDeleteResFromJson(json);

  static const toJsonFactory = _$AdminOrderEditDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminOrderEditDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminOrderEditDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminOrderEditDeleteResExtension on AdminOrderEditDeleteRes {
  AdminOrderEditDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminOrderEditDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminOrderEditDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminOrderEditDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminOrderEditItemChangeDeleteRes {
  const AdminOrderEditItemChangeDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminOrderEditItemChangeDeleteRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminOrderEditItemChangeDeleteResFromJson(json);

  static const toJsonFactory = _$AdminOrderEditItemChangeDeleteResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminOrderEditItemChangeDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminOrderEditItemChangeDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminOrderEditItemChangeDeleteResExtension
    on AdminOrderEditItemChangeDeleteRes {
  AdminOrderEditItemChangeDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminOrderEditItemChangeDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminOrderEditItemChangeDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminOrderEditItemChangeDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminOrderEditsListRes {
  const AdminOrderEditsListRes({
    required this.orderEdits,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminOrderEditsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminOrderEditsListResFromJson(json);

  static const toJsonFactory = _$AdminOrderEditsListResToJson;
  Map<String, dynamic> toJson() => _$AdminOrderEditsListResToJson(this);

  @JsonKey(
      name: 'order_edits', includeIfNull: false, defaultValue: <OrderEdit>[])
  final List<OrderEdit> orderEdits;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminOrderEditsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminOrderEditsListResExtension on AdminOrderEditsListRes {
  AdminOrderEditsListRes copyWith(
      {List<OrderEdit>? orderEdits, int? count, int? offset, int? limit}) {
    return AdminOrderEditsListRes(
        orderEdits: orderEdits ?? this.orderEdits,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminOrderEditsListRes copyWithWrapped(
      {Wrapped<List<OrderEdit>>? orderEdits,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminOrderEditsListRes(
        orderEdits: (orderEdits != null ? orderEdits.value : this.orderEdits),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminOrderEditsRes {
  const AdminOrderEditsRes({
    required this.orderEdit,
  });

  factory AdminOrderEditsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminOrderEditsResFromJson(json);

  static const toJsonFactory = _$AdminOrderEditsResToJson;
  Map<String, dynamic> toJson() => _$AdminOrderEditsResToJson(this);

  @JsonKey(name: 'order_edit', includeIfNull: false)
  final OrderEdit? orderEdit;
  static const fromJsonFactory = _$AdminOrderEditsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminOrderEditsResExtension on AdminOrderEditsRes {
  AdminOrderEditsRes copyWith({OrderEdit? orderEdit}) {
    return AdminOrderEditsRes(orderEdit: orderEdit ?? this.orderEdit);
  }

  AdminOrderEditsRes copyWithWrapped({Wrapped<OrderEdit?>? orderEdit}) {
    return AdminOrderEditsRes(
        orderEdit: (orderEdit != null ? orderEdit.value : this.orderEdit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminOrdersListRes {
  const AdminOrdersListRes({
    required this.orders,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminOrdersListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminOrdersListResFromJson(json);

  static const toJsonFactory = _$AdminOrdersListResToJson;
  Map<String, dynamic> toJson() => _$AdminOrdersListResToJson(this);

  @JsonKey(name: 'orders', includeIfNull: false, defaultValue: <Order>[])
  final List<Order> orders;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminOrdersListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminOrdersListResExtension on AdminOrdersListRes {
  AdminOrdersListRes copyWith(
      {List<Order>? orders, int? count, int? offset, int? limit}) {
    return AdminOrdersListRes(
        orders: orders ?? this.orders,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminOrdersListRes copyWithWrapped(
      {Wrapped<List<Order>>? orders,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminOrdersListRes(
        orders: (orders != null ? orders.value : this.orders),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminOrdersOrderLineItemReservationReq {
  const AdminOrdersOrderLineItemReservationReq({
    required this.locationId,
    this.quantity,
  });

  factory AdminOrdersOrderLineItemReservationReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminOrdersOrderLineItemReservationReqFromJson(json);

  static const toJsonFactory = _$AdminOrdersOrderLineItemReservationReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminOrdersOrderLineItemReservationReqToJson(this);

  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  @JsonKey(name: 'quantity', includeIfNull: false)
  final double? quantity;
  static const fromJsonFactory =
      _$AdminOrdersOrderLineItemReservationReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminOrdersOrderLineItemReservationReqExtension
    on AdminOrdersOrderLineItemReservationReq {
  AdminOrdersOrderLineItemReservationReq copyWith(
      {String? locationId, double? quantity}) {
    return AdminOrdersOrderLineItemReservationReq(
        locationId: locationId ?? this.locationId,
        quantity: quantity ?? this.quantity);
  }

  AdminOrdersOrderLineItemReservationReq copyWithWrapped(
      {Wrapped<String>? locationId, Wrapped<double?>? quantity}) {
    return AdminOrdersOrderLineItemReservationReq(
        locationId: (locationId != null ? locationId.value : this.locationId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminOrdersRes {
  const AdminOrdersRes({
    required this.order,
  });

  factory AdminOrdersRes.fromJson(Map<String, dynamic> json) =>
      _$AdminOrdersResFromJson(json);

  static const toJsonFactory = _$AdminOrdersResToJson;
  Map<String, dynamic> toJson() => _$AdminOrdersResToJson(this);

  @JsonKey(name: 'order', includeIfNull: false)
  final Order order;
  static const fromJsonFactory = _$AdminOrdersResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminOrdersResExtension on AdminOrdersRes {
  AdminOrdersRes copyWith({Order? order}) {
    return AdminOrdersRes(order: order ?? this.order);
  }

  AdminOrdersRes copyWithWrapped({Wrapped<Order>? order}) {
    return AdminOrdersRes(order: (order != null ? order.value : this.order));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPaymentCollectionDeleteRes {
  const AdminPaymentCollectionDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminPaymentCollectionDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPaymentCollectionDeleteResFromJson(json);

  static const toJsonFactory = _$AdminPaymentCollectionDeleteResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPaymentCollectionDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminPaymentCollectionDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPaymentCollectionDeleteResExtension
    on AdminPaymentCollectionDeleteRes {
  AdminPaymentCollectionDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminPaymentCollectionDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminPaymentCollectionDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminPaymentCollectionDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPaymentCollectionsRes {
  const AdminPaymentCollectionsRes({
    required this.paymentCollection,
  });

  factory AdminPaymentCollectionsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPaymentCollectionsResFromJson(json);

  static const toJsonFactory = _$AdminPaymentCollectionsResToJson;
  Map<String, dynamic> toJson() => _$AdminPaymentCollectionsResToJson(this);

  @JsonKey(name: 'payment_collection', includeIfNull: false)
  final PaymentCollection? paymentCollection;
  static const fromJsonFactory = _$AdminPaymentCollectionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPaymentCollectionsResExtension on AdminPaymentCollectionsRes {
  AdminPaymentCollectionsRes copyWith({PaymentCollection? paymentCollection}) {
    return AdminPaymentCollectionsRes(
        paymentCollection: paymentCollection ?? this.paymentCollection);
  }

  AdminPaymentCollectionsRes copyWithWrapped(
      {Wrapped<PaymentCollection?>? paymentCollection}) {
    return AdminPaymentCollectionsRes(
        paymentCollection: (paymentCollection != null
            ? paymentCollection.value
            : this.paymentCollection));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPaymentProvidersList {
  const AdminPaymentProvidersList({
    required this.paymentProviders,
  });

  factory AdminPaymentProvidersList.fromJson(Map<String, dynamic> json) =>
      _$AdminPaymentProvidersListFromJson(json);

  static const toJsonFactory = _$AdminPaymentProvidersListToJson;
  Map<String, dynamic> toJson() => _$AdminPaymentProvidersListToJson(this);

  @JsonKey(
      name: 'payment_providers',
      includeIfNull: false,
      defaultValue: <PaymentProvider>[])
  final List<PaymentProvider> paymentProviders;
  static const fromJsonFactory = _$AdminPaymentProvidersListFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPaymentProvidersListExtension on AdminPaymentProvidersList {
  AdminPaymentProvidersList copyWith(
      {List<PaymentProvider>? paymentProviders}) {
    return AdminPaymentProvidersList(
        paymentProviders: paymentProviders ?? this.paymentProviders);
  }

  AdminPaymentProvidersList copyWithWrapped(
      {Wrapped<List<PaymentProvider>>? paymentProviders}) {
    return AdminPaymentProvidersList(
        paymentProviders: (paymentProviders != null
            ? paymentProviders.value
            : this.paymentProviders));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPaymentRes {
  const AdminPaymentRes({
    required this.payment,
  });

  factory AdminPaymentRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPaymentResFromJson(json);

  static const toJsonFactory = _$AdminPaymentResToJson;
  Map<String, dynamic> toJson() => _$AdminPaymentResToJson(this);

  @JsonKey(name: 'payment', includeIfNull: false)
  final Payment payment;
  static const fromJsonFactory = _$AdminPaymentResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPaymentResExtension on AdminPaymentRes {
  AdminPaymentRes copyWith({Payment? payment}) {
    return AdminPaymentRes(payment: payment ?? this.payment);
  }

  AdminPaymentRes copyWithWrapped({Wrapped<Payment>? payment}) {
    return AdminPaymentRes(
        payment: (payment != null ? payment.value : this.payment));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostAppsReq {
  const AdminPostAppsReq({
    required this.applicationName,
    required this.state,
    required this.code,
  });

  factory AdminPostAppsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostAppsReqFromJson(json);

  static const toJsonFactory = _$AdminPostAppsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostAppsReqToJson(this);

  @JsonKey(
      name: 'application_name', includeIfNull: false, defaultValue: 'default')
  final String applicationName;
  @JsonKey(name: 'state', includeIfNull: false, defaultValue: 'default')
  final String state;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  static const fromJsonFactory = _$AdminPostAppsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostAppsReqExtension on AdminPostAppsReq {
  AdminPostAppsReq copyWith(
      {String? applicationName, String? state, String? code}) {
    return AdminPostAppsReq(
        applicationName: applicationName ?? this.applicationName,
        state: state ?? this.state,
        code: code ?? this.code);
  }

  AdminPostAppsReq copyWithWrapped(
      {Wrapped<String>? applicationName,
      Wrapped<String>? state,
      Wrapped<String>? code}) {
    return AdminPostAppsReq(
        applicationName: (applicationName != null
            ? applicationName.value
            : this.applicationName),
        state: (state != null ? state.value : this.state),
        code: (code != null ? code.value : this.code));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostAuthReq {
  const AdminPostAuthReq({
    required this.email,
    required this.password,
  });

  factory AdminPostAuthReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostAuthReqFromJson(json);

  static const toJsonFactory = _$AdminPostAuthReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostAuthReqToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String password;
  static const fromJsonFactory = _$AdminPostAuthReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostAuthReqExtension on AdminPostAuthReq {
  AdminPostAuthReq copyWith({String? email, String? password}) {
    return AdminPostAuthReq(
        email: email ?? this.email, password: password ?? this.password);
  }

  AdminPostAuthReq copyWithWrapped(
      {Wrapped<String>? email, Wrapped<String>? password}) {
    return AdminPostAuthReq(
        email: (email != null ? email.value : this.email),
        password: (password != null ? password.value : this.password));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostBatchesReq {
  const AdminPostBatchesReq({
    required this.type,
    required this.context,
    this.dryRun,
  });

  factory AdminPostBatchesReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostBatchesReqFromJson(json);

  static const toJsonFactory = _$AdminPostBatchesReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostBatchesReqToJson(this);

  @JsonKey(name: 'type', includeIfNull: false, defaultValue: 'default')
  final String type;
  @JsonKey(name: 'context', includeIfNull: false)
  final Object context;
  @JsonKey(name: 'dry_run', includeIfNull: false, defaultValue: false)
  final bool? dryRun;
  static const fromJsonFactory = _$AdminPostBatchesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostBatchesReqExtension on AdminPostBatchesReq {
  AdminPostBatchesReq copyWith({String? type, Object? context, bool? dryRun}) {
    return AdminPostBatchesReq(
        type: type ?? this.type,
        context: context ?? this.context,
        dryRun: dryRun ?? this.dryRun);
  }

  AdminPostBatchesReq copyWithWrapped(
      {Wrapped<String>? type,
      Wrapped<Object>? context,
      Wrapped<bool?>? dryRun}) {
    return AdminPostBatchesReq(
        type: (type != null ? type.value : this.type),
        context: (context != null ? context.value : this.context),
        dryRun: (dryRun != null ? dryRun.value : this.dryRun));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCollectionsCollectionReq {
  const AdminPostCollectionsCollectionReq({
    this.title,
    this.handle,
    this.metadata,
  });

  factory AdminPostCollectionsCollectionReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostCollectionsCollectionReqFromJson(json);

  static const toJsonFactory = _$AdminPostCollectionsCollectionReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostCollectionsCollectionReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostCollectionsCollectionReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCollectionsCollectionReqExtension
    on AdminPostCollectionsCollectionReq {
  AdminPostCollectionsCollectionReq copyWith(
      {String? title, String? handle, Object? metadata}) {
    return AdminPostCollectionsCollectionReq(
        title: title ?? this.title,
        handle: handle ?? this.handle,
        metadata: metadata ?? this.metadata);
  }

  AdminPostCollectionsCollectionReq copyWithWrapped(
      {Wrapped<String?>? title,
      Wrapped<String?>? handle,
      Wrapped<Object?>? metadata}) {
    return AdminPostCollectionsCollectionReq(
        title: (title != null ? title.value : this.title),
        handle: (handle != null ? handle.value : this.handle),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCollectionsReq {
  const AdminPostCollectionsReq({
    required this.title,
    this.handle,
    this.metadata,
  });

  factory AdminPostCollectionsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostCollectionsReqFromJson(json);

  static const toJsonFactory = _$AdminPostCollectionsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostCollectionsReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostCollectionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCollectionsReqExtension on AdminPostCollectionsReq {
  AdminPostCollectionsReq copyWith(
      {String? title, String? handle, Object? metadata}) {
    return AdminPostCollectionsReq(
        title: title ?? this.title,
        handle: handle ?? this.handle,
        metadata: metadata ?? this.metadata);
  }

  AdminPostCollectionsReq copyWithWrapped(
      {Wrapped<String>? title,
      Wrapped<String?>? handle,
      Wrapped<Object?>? metadata}) {
    return AdminPostCollectionsReq(
        title: (title != null ? title.value : this.title),
        handle: (handle != null ? handle.value : this.handle),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCurrenciesCurrencyReq {
  const AdminPostCurrenciesCurrencyReq({
    this.includesTax,
  });

  factory AdminPostCurrenciesCurrencyReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostCurrenciesCurrencyReqFromJson(json);

  static const toJsonFactory = _$AdminPostCurrenciesCurrencyReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostCurrenciesCurrencyReqToJson(this);

  @JsonKey(name: 'includes_tax', includeIfNull: false)
  final bool? includesTax;
  static const fromJsonFactory = _$AdminPostCurrenciesCurrencyReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCurrenciesCurrencyReqExtension
    on AdminPostCurrenciesCurrencyReq {
  AdminPostCurrenciesCurrencyReq copyWith({bool? includesTax}) {
    return AdminPostCurrenciesCurrencyReq(
        includesTax: includesTax ?? this.includesTax);
  }

  AdminPostCurrenciesCurrencyReq copyWithWrapped(
      {Wrapped<bool?>? includesTax}) {
    return AdminPostCurrenciesCurrencyReq(
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCustomerGroupsGroupCustomersBatchReq {
  const AdminPostCustomerGroupsGroupCustomersBatchReq({
    required this.customerIds,
  });

  factory AdminPostCustomerGroupsGroupCustomersBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostCustomerGroupsGroupCustomersBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostCustomerGroupsGroupCustomersBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostCustomerGroupsGroupCustomersBatchReqToJson(this);

  @JsonKey(name: 'customer_ids', includeIfNull: false)
  final List<AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item>
      customerIds;
  static const fromJsonFactory =
      _$AdminPostCustomerGroupsGroupCustomersBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCustomerGroupsGroupCustomersBatchReqExtension
    on AdminPostCustomerGroupsGroupCustomersBatchReq {
  AdminPostCustomerGroupsGroupCustomersBatchReq copyWith(
      {List<AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item>?
          customerIds}) {
    return AdminPostCustomerGroupsGroupCustomersBatchReq(
        customerIds: customerIds ?? this.customerIds);
  }

  AdminPostCustomerGroupsGroupCustomersBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item>>?
          customerIds}) {
    return AdminPostCustomerGroupsGroupCustomersBatchReq(
        customerIds:
            (customerIds != null ? customerIds.value : this.customerIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCustomerGroupsGroupReq {
  const AdminPostCustomerGroupsGroupReq({
    this.name,
    this.metadata,
  });

  factory AdminPostCustomerGroupsGroupReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostCustomerGroupsGroupReqFromJson(json);

  static const toJsonFactory = _$AdminPostCustomerGroupsGroupReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostCustomerGroupsGroupReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostCustomerGroupsGroupReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCustomerGroupsGroupReqExtension
    on AdminPostCustomerGroupsGroupReq {
  AdminPostCustomerGroupsGroupReq copyWith({String? name, Object? metadata}) {
    return AdminPostCustomerGroupsGroupReq(
        name: name ?? this.name, metadata: metadata ?? this.metadata);
  }

  AdminPostCustomerGroupsGroupReq copyWithWrapped(
      {Wrapped<String?>? name, Wrapped<Object?>? metadata}) {
    return AdminPostCustomerGroupsGroupReq(
        name: (name != null ? name.value : this.name),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCustomerGroupsReq {
  const AdminPostCustomerGroupsReq({
    required this.name,
    this.metadata,
  });

  factory AdminPostCustomerGroupsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostCustomerGroupsReqFromJson(json);

  static const toJsonFactory = _$AdminPostCustomerGroupsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostCustomerGroupsReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostCustomerGroupsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCustomerGroupsReqExtension on AdminPostCustomerGroupsReq {
  AdminPostCustomerGroupsReq copyWith({String? name, Object? metadata}) {
    return AdminPostCustomerGroupsReq(
        name: name ?? this.name, metadata: metadata ?? this.metadata);
  }

  AdminPostCustomerGroupsReq copyWithWrapped(
      {Wrapped<String>? name, Wrapped<Object?>? metadata}) {
    return AdminPostCustomerGroupsReq(
        name: (name != null ? name.value : this.name),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCustomersCustomerReq {
  const AdminPostCustomersCustomerReq({
    this.email,
    this.firstName,
    this.lastName,
    this.phone,
    this.password,
    this.groups,
    this.metadata,
  });

  factory AdminPostCustomersCustomerReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostCustomersCustomerReqFromJson(json);

  static const toJsonFactory = _$AdminPostCustomersCustomerReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostCustomersCustomerReqToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String? email;
  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String? firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String? lastName;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String? password;
  @JsonKey(name: 'groups', includeIfNull: false)
  final List<AdminPostCustomersCustomerReq$Groups$Item>? groups;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostCustomersCustomerReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCustomersCustomerReqExtension
    on AdminPostCustomersCustomerReq {
  AdminPostCustomersCustomerReq copyWith(
      {String? email,
      String? firstName,
      String? lastName,
      String? phone,
      String? password,
      List<AdminPostCustomersCustomerReq$Groups$Item>? groups,
      Object? metadata}) {
    return AdminPostCustomersCustomerReq(
        email: email ?? this.email,
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        phone: phone ?? this.phone,
        password: password ?? this.password,
        groups: groups ?? this.groups,
        metadata: metadata ?? this.metadata);
  }

  AdminPostCustomersCustomerReq copyWithWrapped(
      {Wrapped<String?>? email,
      Wrapped<String?>? firstName,
      Wrapped<String?>? lastName,
      Wrapped<String?>? phone,
      Wrapped<String?>? password,
      Wrapped<List<AdminPostCustomersCustomerReq$Groups$Item>?>? groups,
      Wrapped<Object?>? metadata}) {
    return AdminPostCustomersCustomerReq(
        email: (email != null ? email.value : this.email),
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        phone: (phone != null ? phone.value : this.phone),
        password: (password != null ? password.value : this.password),
        groups: (groups != null ? groups.value : this.groups),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCustomersReq {
  const AdminPostCustomersReq({
    required this.email,
    required this.firstName,
    required this.lastName,
    required this.password,
    this.phone,
    this.metadata,
  });

  factory AdminPostCustomersReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostCustomersReqFromJson(json);

  static const toJsonFactory = _$AdminPostCustomersReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostCustomersReqToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String lastName;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String password;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostCustomersReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCustomersReqExtension on AdminPostCustomersReq {
  AdminPostCustomersReq copyWith(
      {String? email,
      String? firstName,
      String? lastName,
      String? password,
      String? phone,
      Object? metadata}) {
    return AdminPostCustomersReq(
        email: email ?? this.email,
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        password: password ?? this.password,
        phone: phone ?? this.phone,
        metadata: metadata ?? this.metadata);
  }

  AdminPostCustomersReq copyWithWrapped(
      {Wrapped<String>? email,
      Wrapped<String>? firstName,
      Wrapped<String>? lastName,
      Wrapped<String>? password,
      Wrapped<String?>? phone,
      Wrapped<Object?>? metadata}) {
    return AdminPostCustomersReq(
        email: (email != null ? email.value : this.email),
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        password: (password != null ? password.value : this.password),
        phone: (phone != null ? phone.value : this.phone),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsDiscountConditions {
  const AdminPostDiscountsDiscountConditions({
    required this.$operator,
    this.products,
    this.productTypes,
    this.productCollections,
    this.productTags,
    this.customerGroups,
  });

  factory AdminPostDiscountsDiscountConditions.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDiscountsDiscountConditionsFromJson(json);

  static const toJsonFactory = _$AdminPostDiscountsDiscountConditionsToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDiscountsDiscountConditionsToJson(this);

  @JsonKey(
    name: 'operator',
    includeIfNull: false,
    toJson: adminPostDiscountsDiscountConditionsOperatorToJson,
    fromJson: adminPostDiscountsDiscountConditionsOperatorFromJson,
  )
  final enums.AdminPostDiscountsDiscountConditionsOperator $operator;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <String>[])
  final List<String>? products;
  @JsonKey(
      name: 'product_types', includeIfNull: false, defaultValue: <String>[])
  final List<String>? productTypes;
  @JsonKey(
      name: 'product_collections',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? productCollections;
  @JsonKey(name: 'product_tags', includeIfNull: false, defaultValue: <String>[])
  final List<String>? productTags;
  @JsonKey(
      name: 'customer_groups', includeIfNull: false, defaultValue: <String>[])
  final List<String>? customerGroups;
  static const fromJsonFactory = _$AdminPostDiscountsDiscountConditionsFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsDiscountConditionsExtension
    on AdminPostDiscountsDiscountConditions {
  AdminPostDiscountsDiscountConditions copyWith(
      {enums.AdminPostDiscountsDiscountConditionsOperator? $operator,
      List<String>? products,
      List<String>? productTypes,
      List<String>? productCollections,
      List<String>? productTags,
      List<String>? customerGroups}) {
    return AdminPostDiscountsDiscountConditions(
        $operator: $operator ?? this.$operator,
        products: products ?? this.products,
        productTypes: productTypes ?? this.productTypes,
        productCollections: productCollections ?? this.productCollections,
        productTags: productTags ?? this.productTags,
        customerGroups: customerGroups ?? this.customerGroups);
  }

  AdminPostDiscountsDiscountConditions copyWithWrapped(
      {Wrapped<enums.AdminPostDiscountsDiscountConditionsOperator>? $operator,
      Wrapped<List<String>?>? products,
      Wrapped<List<String>?>? productTypes,
      Wrapped<List<String>?>? productCollections,
      Wrapped<List<String>?>? productTags,
      Wrapped<List<String>?>? customerGroups}) {
    return AdminPostDiscountsDiscountConditions(
        $operator: ($operator != null ? $operator.value : this.$operator),
        products: (products != null ? products.value : this.products),
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes),
        productCollections: (productCollections != null
            ? productCollections.value
            : this.productCollections),
        productTags:
            (productTags != null ? productTags.value : this.productTags),
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsDiscountConditionsCondition {
  const AdminPostDiscountsDiscountConditionsCondition({
    this.products,
    this.productTypes,
    this.productCollections,
    this.productTags,
    this.customerGroups,
  });

  factory AdminPostDiscountsDiscountConditionsCondition.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDiscountsDiscountConditionsConditionFromJson(json);

  static const toJsonFactory =
      _$AdminPostDiscountsDiscountConditionsConditionToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDiscountsDiscountConditionsConditionToJson(this);

  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <String>[])
  final List<String>? products;
  @JsonKey(
      name: 'product_types', includeIfNull: false, defaultValue: <String>[])
  final List<String>? productTypes;
  @JsonKey(
      name: 'product_collections',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? productCollections;
  @JsonKey(name: 'product_tags', includeIfNull: false, defaultValue: <String>[])
  final List<String>? productTags;
  @JsonKey(
      name: 'customer_groups', includeIfNull: false, defaultValue: <String>[])
  final List<String>? customerGroups;
  static const fromJsonFactory =
      _$AdminPostDiscountsDiscountConditionsConditionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsDiscountConditionsConditionExtension
    on AdminPostDiscountsDiscountConditionsCondition {
  AdminPostDiscountsDiscountConditionsCondition copyWith(
      {List<String>? products,
      List<String>? productTypes,
      List<String>? productCollections,
      List<String>? productTags,
      List<String>? customerGroups}) {
    return AdminPostDiscountsDiscountConditionsCondition(
        products: products ?? this.products,
        productTypes: productTypes ?? this.productTypes,
        productCollections: productCollections ?? this.productCollections,
        productTags: productTags ?? this.productTags,
        customerGroups: customerGroups ?? this.customerGroups);
  }

  AdminPostDiscountsDiscountConditionsCondition copyWithWrapped(
      {Wrapped<List<String>?>? products,
      Wrapped<List<String>?>? productTypes,
      Wrapped<List<String>?>? productCollections,
      Wrapped<List<String>?>? productTags,
      Wrapped<List<String>?>? customerGroups}) {
    return AdminPostDiscountsDiscountConditionsCondition(
        products: (products != null ? products.value : this.products),
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes),
        productCollections: (productCollections != null
            ? productCollections.value
            : this.productCollections),
        productTags:
            (productTags != null ? productTags.value : this.productTags),
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsDiscountConditionsConditionBatchReq {
  const AdminPostDiscountsDiscountConditionsConditionBatchReq({
    required this.resources,
  });

  factory AdminPostDiscountsDiscountConditionsConditionBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDiscountsDiscountConditionsConditionBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostDiscountsDiscountConditionsConditionBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDiscountsDiscountConditionsConditionBatchReqToJson(this);

  @JsonKey(name: 'resources', includeIfNull: false)
  final List<
          AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item>
      resources;
  static const fromJsonFactory =
      _$AdminPostDiscountsDiscountConditionsConditionBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsDiscountConditionsConditionBatchReqExtension
    on AdminPostDiscountsDiscountConditionsConditionBatchReq {
  AdminPostDiscountsDiscountConditionsConditionBatchReq copyWith(
      {List<AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item>?
          resources}) {
    return AdminPostDiscountsDiscountConditionsConditionBatchReq(
        resources: resources ?? this.resources);
  }

  AdminPostDiscountsDiscountConditionsConditionBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item>>?
          resources}) {
    return AdminPostDiscountsDiscountConditionsConditionBatchReq(
        resources: (resources != null ? resources.value : this.resources));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsDiscountDynamicCodesReq {
  const AdminPostDiscountsDiscountDynamicCodesReq({
    required this.code,
    this.usageLimit,
    this.metadata,
  });

  factory AdminPostDiscountsDiscountDynamicCodesReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDiscountsDiscountDynamicCodesReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostDiscountsDiscountDynamicCodesReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDiscountsDiscountDynamicCodesReqToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  @JsonKey(name: 'usage_limit', includeIfNull: false)
  final double? usageLimit;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory =
      _$AdminPostDiscountsDiscountDynamicCodesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsDiscountDynamicCodesReqExtension
    on AdminPostDiscountsDiscountDynamicCodesReq {
  AdminPostDiscountsDiscountDynamicCodesReq copyWith(
      {String? code, double? usageLimit, Object? metadata}) {
    return AdminPostDiscountsDiscountDynamicCodesReq(
        code: code ?? this.code,
        usageLimit: usageLimit ?? this.usageLimit,
        metadata: metadata ?? this.metadata);
  }

  AdminPostDiscountsDiscountDynamicCodesReq copyWithWrapped(
      {Wrapped<String>? code,
      Wrapped<double?>? usageLimit,
      Wrapped<Object?>? metadata}) {
    return AdminPostDiscountsDiscountDynamicCodesReq(
        code: (code != null ? code.value : this.code),
        usageLimit: (usageLimit != null ? usageLimit.value : this.usageLimit),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsDiscountReq {
  const AdminPostDiscountsDiscountReq({
    this.code,
    this.rule,
    this.isDisabled,
    this.startsAt,
    this.endsAt,
    this.validDuration,
    this.usageLimit,
    this.regions,
    this.metadata,
  });

  factory AdminPostDiscountsDiscountReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostDiscountsDiscountReqFromJson(json);

  static const toJsonFactory = _$AdminPostDiscountsDiscountReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostDiscountsDiscountReqToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String? code;
  @JsonKey(name: 'rule', includeIfNull: false)
  final AdminPostDiscountsDiscountReq$Rule? rule;
  @JsonKey(name: 'is_disabled', includeIfNull: false)
  final bool? isDisabled;
  @JsonKey(name: 'starts_at', includeIfNull: false)
  final DateTime? startsAt;
  @JsonKey(name: 'ends_at', includeIfNull: false)
  final DateTime? endsAt;
  @JsonKey(
      name: 'valid_duration', includeIfNull: false, defaultValue: 'default')
  final String? validDuration;
  @JsonKey(name: 'usage_limit', includeIfNull: false)
  final double? usageLimit;
  @JsonKey(name: 'regions', includeIfNull: false, defaultValue: <String>[])
  final List<String>? regions;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostDiscountsDiscountReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsDiscountReqExtension
    on AdminPostDiscountsDiscountReq {
  AdminPostDiscountsDiscountReq copyWith(
      {String? code,
      AdminPostDiscountsDiscountReq$Rule? rule,
      bool? isDisabled,
      DateTime? startsAt,
      DateTime? endsAt,
      String? validDuration,
      double? usageLimit,
      List<String>? regions,
      Object? metadata}) {
    return AdminPostDiscountsDiscountReq(
        code: code ?? this.code,
        rule: rule ?? this.rule,
        isDisabled: isDisabled ?? this.isDisabled,
        startsAt: startsAt ?? this.startsAt,
        endsAt: endsAt ?? this.endsAt,
        validDuration: validDuration ?? this.validDuration,
        usageLimit: usageLimit ?? this.usageLimit,
        regions: regions ?? this.regions,
        metadata: metadata ?? this.metadata);
  }

  AdminPostDiscountsDiscountReq copyWithWrapped(
      {Wrapped<String?>? code,
      Wrapped<AdminPostDiscountsDiscountReq$Rule?>? rule,
      Wrapped<bool?>? isDisabled,
      Wrapped<DateTime?>? startsAt,
      Wrapped<DateTime?>? endsAt,
      Wrapped<String?>? validDuration,
      Wrapped<double?>? usageLimit,
      Wrapped<List<String>?>? regions,
      Wrapped<Object?>? metadata}) {
    return AdminPostDiscountsDiscountReq(
        code: (code != null ? code.value : this.code),
        rule: (rule != null ? rule.value : this.rule),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled),
        startsAt: (startsAt != null ? startsAt.value : this.startsAt),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        validDuration:
            (validDuration != null ? validDuration.value : this.validDuration),
        usageLimit: (usageLimit != null ? usageLimit.value : this.usageLimit),
        regions: (regions != null ? regions.value : this.regions),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsReq {
  const AdminPostDiscountsReq({
    required this.code,
    this.isDynamic,
    required this.rule,
    this.isDisabled,
    this.startsAt,
    this.endsAt,
    this.validDuration,
    required this.regions,
    this.usageLimit,
    this.metadata,
  });

  factory AdminPostDiscountsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostDiscountsReqFromJson(json);

  static const toJsonFactory = _$AdminPostDiscountsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostDiscountsReqToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  @JsonKey(name: 'is_dynamic', includeIfNull: false, defaultValue: false)
  final bool? isDynamic;
  @JsonKey(name: 'rule', includeIfNull: false)
  final AdminPostDiscountsReq$Rule rule;
  @JsonKey(name: 'is_disabled', includeIfNull: false, defaultValue: false)
  final bool? isDisabled;
  @JsonKey(name: 'starts_at', includeIfNull: false)
  final DateTime? startsAt;
  @JsonKey(name: 'ends_at', includeIfNull: false)
  final DateTime? endsAt;
  @JsonKey(
      name: 'valid_duration', includeIfNull: false, defaultValue: 'default')
  final String? validDuration;
  @JsonKey(name: 'regions', includeIfNull: false, defaultValue: <String>[])
  final List<String> regions;
  @JsonKey(name: 'usage_limit', includeIfNull: false)
  final double? usageLimit;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostDiscountsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsReqExtension on AdminPostDiscountsReq {
  AdminPostDiscountsReq copyWith(
      {String? code,
      bool? isDynamic,
      AdminPostDiscountsReq$Rule? rule,
      bool? isDisabled,
      DateTime? startsAt,
      DateTime? endsAt,
      String? validDuration,
      List<String>? regions,
      double? usageLimit,
      Object? metadata}) {
    return AdminPostDiscountsReq(
        code: code ?? this.code,
        isDynamic: isDynamic ?? this.isDynamic,
        rule: rule ?? this.rule,
        isDisabled: isDisabled ?? this.isDisabled,
        startsAt: startsAt ?? this.startsAt,
        endsAt: endsAt ?? this.endsAt,
        validDuration: validDuration ?? this.validDuration,
        regions: regions ?? this.regions,
        usageLimit: usageLimit ?? this.usageLimit,
        metadata: metadata ?? this.metadata);
  }

  AdminPostDiscountsReq copyWithWrapped(
      {Wrapped<String>? code,
      Wrapped<bool?>? isDynamic,
      Wrapped<AdminPostDiscountsReq$Rule>? rule,
      Wrapped<bool?>? isDisabled,
      Wrapped<DateTime?>? startsAt,
      Wrapped<DateTime?>? endsAt,
      Wrapped<String?>? validDuration,
      Wrapped<List<String>>? regions,
      Wrapped<double?>? usageLimit,
      Wrapped<Object?>? metadata}) {
    return AdminPostDiscountsReq(
        code: (code != null ? code.value : this.code),
        isDynamic: (isDynamic != null ? isDynamic.value : this.isDynamic),
        rule: (rule != null ? rule.value : this.rule),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled),
        startsAt: (startsAt != null ? startsAt.value : this.startsAt),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        validDuration:
            (validDuration != null ? validDuration.value : this.validDuration),
        regions: (regions != null ? regions.value : this.regions),
        usageLimit: (usageLimit != null ? usageLimit.value : this.usageLimit),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersDraftOrderLineItemsItemReq {
  const AdminPostDraftOrdersDraftOrderLineItemsItemReq({
    this.unitPrice,
    this.title,
    this.quantity,
    this.metadata,
  });

  factory AdminPostDraftOrdersDraftOrderLineItemsItemReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersDraftOrderLineItemsItemReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostDraftOrdersDraftOrderLineItemsItemReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDraftOrdersDraftOrderLineItemsItemReqToJson(this);

  @JsonKey(name: 'unit_price', includeIfNull: false, defaultValue: 36)
  final int? unitPrice;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int? quantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory =
      _$AdminPostDraftOrdersDraftOrderLineItemsItemReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersDraftOrderLineItemsItemReqExtension
    on AdminPostDraftOrdersDraftOrderLineItemsItemReq {
  AdminPostDraftOrdersDraftOrderLineItemsItemReq copyWith(
      {int? unitPrice, String? title, int? quantity, Object? metadata}) {
    return AdminPostDraftOrdersDraftOrderLineItemsItemReq(
        unitPrice: unitPrice ?? this.unitPrice,
        title: title ?? this.title,
        quantity: quantity ?? this.quantity,
        metadata: metadata ?? this.metadata);
  }

  AdminPostDraftOrdersDraftOrderLineItemsItemReq copyWithWrapped(
      {Wrapped<int?>? unitPrice,
      Wrapped<String?>? title,
      Wrapped<int?>? quantity,
      Wrapped<Object?>? metadata}) {
    return AdminPostDraftOrdersDraftOrderLineItemsItemReq(
        unitPrice: (unitPrice != null ? unitPrice.value : this.unitPrice),
        title: (title != null ? title.value : this.title),
        quantity: (quantity != null ? quantity.value : this.quantity),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersDraftOrderLineItemsReq {
  const AdminPostDraftOrdersDraftOrderLineItemsReq({
    this.variantId,
    this.unitPrice,
    this.title,
    required this.quantity,
    this.metadata,
  });

  factory AdminPostDraftOrdersDraftOrderLineItemsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersDraftOrderLineItemsReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostDraftOrdersDraftOrderLineItemsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDraftOrdersDraftOrderLineItemsReqToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String? variantId;
  @JsonKey(name: 'unit_price', includeIfNull: false, defaultValue: 36)
  final int? unitPrice;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory =
      _$AdminPostDraftOrdersDraftOrderLineItemsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersDraftOrderLineItemsReqExtension
    on AdminPostDraftOrdersDraftOrderLineItemsReq {
  AdminPostDraftOrdersDraftOrderLineItemsReq copyWith(
      {String? variantId,
      int? unitPrice,
      String? title,
      int? quantity,
      Object? metadata}) {
    return AdminPostDraftOrdersDraftOrderLineItemsReq(
        variantId: variantId ?? this.variantId,
        unitPrice: unitPrice ?? this.unitPrice,
        title: title ?? this.title,
        quantity: quantity ?? this.quantity,
        metadata: metadata ?? this.metadata);
  }

  AdminPostDraftOrdersDraftOrderLineItemsReq copyWithWrapped(
      {Wrapped<String?>? variantId,
      Wrapped<int?>? unitPrice,
      Wrapped<String?>? title,
      Wrapped<int>? quantity,
      Wrapped<Object?>? metadata}) {
    return AdminPostDraftOrdersDraftOrderLineItemsReq(
        variantId: (variantId != null ? variantId.value : this.variantId),
        unitPrice: (unitPrice != null ? unitPrice.value : this.unitPrice),
        title: (title != null ? title.value : this.title),
        quantity: (quantity != null ? quantity.value : this.quantity),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersDraftOrderRegisterPaymentRes {
  const AdminPostDraftOrdersDraftOrderRegisterPaymentRes({
    required this.order,
  });

  factory AdminPostDraftOrdersDraftOrderRegisterPaymentRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersDraftOrderRegisterPaymentResFromJson(json);

  static const toJsonFactory =
      _$AdminPostDraftOrdersDraftOrderRegisterPaymentResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDraftOrdersDraftOrderRegisterPaymentResToJson(this);

  @JsonKey(name: 'order', includeIfNull: false)
  final Order order;
  static const fromJsonFactory =
      _$AdminPostDraftOrdersDraftOrderRegisterPaymentResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersDraftOrderRegisterPaymentResExtension
    on AdminPostDraftOrdersDraftOrderRegisterPaymentRes {
  AdminPostDraftOrdersDraftOrderRegisterPaymentRes copyWith({Order? order}) {
    return AdminPostDraftOrdersDraftOrderRegisterPaymentRes(
        order: order ?? this.order);
  }

  AdminPostDraftOrdersDraftOrderRegisterPaymentRes copyWithWrapped(
      {Wrapped<Order>? order}) {
    return AdminPostDraftOrdersDraftOrderRegisterPaymentRes(
        order: (order != null ? order.value : this.order));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersDraftOrderReq {
  const AdminPostDraftOrdersDraftOrderReq({
    this.regionId,
    this.countryCode,
    this.email,
    this.billingAddress,
    this.shippingAddress,
    this.discounts,
    this.noNotificationOrder,
    this.customerId,
  });

  factory AdminPostDraftOrdersDraftOrderReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersDraftOrderReqFromJson(json);

  static const toJsonFactory = _$AdminPostDraftOrdersDraftOrderReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDraftOrdersDraftOrderReqToJson(this);

  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String? countryCode;
  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String? email;
  @JsonKey(name: 'billingAddress', includeIfNull: false)
  final dynamic billingAddress;
  @JsonKey(name: 'shippingAddress', includeIfNull: false)
  final dynamic shippingAddress;
  @JsonKey(name: 'discounts', includeIfNull: false)
  final List<AdminPostDraftOrdersDraftOrderReq$Discounts$Item>? discounts;
  @JsonKey(name: 'no_notification_order', includeIfNull: false)
  final bool? noNotificationOrder;
  @JsonKey(name: 'customer_id', includeIfNull: false, defaultValue: 'default')
  final String? customerId;
  static const fromJsonFactory = _$AdminPostDraftOrdersDraftOrderReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersDraftOrderReqExtension
    on AdminPostDraftOrdersDraftOrderReq {
  AdminPostDraftOrdersDraftOrderReq copyWith(
      {String? regionId,
      String? countryCode,
      String? email,
      dynamic billingAddress,
      dynamic shippingAddress,
      List<AdminPostDraftOrdersDraftOrderReq$Discounts$Item>? discounts,
      bool? noNotificationOrder,
      String? customerId}) {
    return AdminPostDraftOrdersDraftOrderReq(
        regionId: regionId ?? this.regionId,
        countryCode: countryCode ?? this.countryCode,
        email: email ?? this.email,
        billingAddress: billingAddress ?? this.billingAddress,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        discounts: discounts ?? this.discounts,
        noNotificationOrder: noNotificationOrder ?? this.noNotificationOrder,
        customerId: customerId ?? this.customerId);
  }

  AdminPostDraftOrdersDraftOrderReq copyWithWrapped(
      {Wrapped<String?>? regionId,
      Wrapped<String?>? countryCode,
      Wrapped<String?>? email,
      Wrapped<dynamic>? billingAddress,
      Wrapped<dynamic>? shippingAddress,
      Wrapped<List<AdminPostDraftOrdersDraftOrderReq$Discounts$Item>?>?
          discounts,
      Wrapped<bool?>? noNotificationOrder,
      Wrapped<String?>? customerId}) {
    return AdminPostDraftOrdersDraftOrderReq(
        regionId: (regionId != null ? regionId.value : this.regionId),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        email: (email != null ? email.value : this.email),
        billingAddress: (billingAddress != null
            ? billingAddress.value
            : this.billingAddress),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        discounts: (discounts != null ? discounts.value : this.discounts),
        noNotificationOrder: (noNotificationOrder != null
            ? noNotificationOrder.value
            : this.noNotificationOrder),
        customerId: (customerId != null ? customerId.value : this.customerId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersReq {
  const AdminPostDraftOrdersReq({
    this.status,
    required this.email,
    this.billingAddress,
    this.shippingAddress,
    this.items,
    required this.regionId,
    this.discounts,
    this.customerId,
    this.noNotificationOrder,
    required this.shippingMethods,
    this.metadata,
  });

  factory AdminPostDraftOrdersReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersReqFromJson(json);

  static const toJsonFactory = _$AdminPostDraftOrdersReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostDraftOrdersReqToJson(this);

  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: adminPostDraftOrdersReqStatusNullableToJson,
    fromJson: adminPostDraftOrdersReqStatusNullableFromJson,
  )
  final enums.AdminPostDraftOrdersReqStatus? status;
  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'billingAddress', includeIfNull: false)
  final dynamic billingAddress;
  @JsonKey(name: 'shippingAddress', includeIfNull: false)
  final dynamic shippingAddress;
  @JsonKey(name: 'items', includeIfNull: false)
  final List<AdminPostDraftOrdersReq$Items$Item>? items;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'discounts', includeIfNull: false)
  final List<AdminPostDraftOrdersReq$Discounts$Item>? discounts;
  @JsonKey(name: 'customer_id', includeIfNull: false, defaultValue: 'default')
  final String? customerId;
  @JsonKey(name: 'no_notification_order', includeIfNull: false)
  final bool? noNotificationOrder;
  @JsonKey(name: 'shipping_methods', includeIfNull: false)
  final List<AdminPostDraftOrdersReq$ShippingMethods$Item> shippingMethods;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostDraftOrdersReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersReqExtension on AdminPostDraftOrdersReq {
  AdminPostDraftOrdersReq copyWith(
      {enums.AdminPostDraftOrdersReqStatus? status,
      String? email,
      dynamic billingAddress,
      dynamic shippingAddress,
      List<AdminPostDraftOrdersReq$Items$Item>? items,
      String? regionId,
      List<AdminPostDraftOrdersReq$Discounts$Item>? discounts,
      String? customerId,
      bool? noNotificationOrder,
      List<AdminPostDraftOrdersReq$ShippingMethods$Item>? shippingMethods,
      Object? metadata}) {
    return AdminPostDraftOrdersReq(
        status: status ?? this.status,
        email: email ?? this.email,
        billingAddress: billingAddress ?? this.billingAddress,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        items: items ?? this.items,
        regionId: regionId ?? this.regionId,
        discounts: discounts ?? this.discounts,
        customerId: customerId ?? this.customerId,
        noNotificationOrder: noNotificationOrder ?? this.noNotificationOrder,
        shippingMethods: shippingMethods ?? this.shippingMethods,
        metadata: metadata ?? this.metadata);
  }

  AdminPostDraftOrdersReq copyWithWrapped(
      {Wrapped<enums.AdminPostDraftOrdersReqStatus?>? status,
      Wrapped<String>? email,
      Wrapped<dynamic>? billingAddress,
      Wrapped<dynamic>? shippingAddress,
      Wrapped<List<AdminPostDraftOrdersReq$Items$Item>?>? items,
      Wrapped<String>? regionId,
      Wrapped<List<AdminPostDraftOrdersReq$Discounts$Item>?>? discounts,
      Wrapped<String?>? customerId,
      Wrapped<bool?>? noNotificationOrder,
      Wrapped<List<AdminPostDraftOrdersReq$ShippingMethods$Item>>?
          shippingMethods,
      Wrapped<Object?>? metadata}) {
    return AdminPostDraftOrdersReq(
        status: (status != null ? status.value : this.status),
        email: (email != null ? email.value : this.email),
        billingAddress: (billingAddress != null
            ? billingAddress.value
            : this.billingAddress),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        items: (items != null ? items.value : this.items),
        regionId: (regionId != null ? regionId.value : this.regionId),
        discounts: (discounts != null ? discounts.value : this.discounts),
        customerId: (customerId != null ? customerId.value : this.customerId),
        noNotificationOrder: (noNotificationOrder != null
            ? noNotificationOrder.value
            : this.noNotificationOrder),
        shippingMethods: (shippingMethods != null
            ? shippingMethods.value
            : this.shippingMethods),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostGiftCardsGiftCardReq {
  const AdminPostGiftCardsGiftCardReq({
    this.balance,
    this.isDisabled,
    this.endsAt,
    this.regionId,
    this.metadata,
  });

  factory AdminPostGiftCardsGiftCardReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostGiftCardsGiftCardReqFromJson(json);

  static const toJsonFactory = _$AdminPostGiftCardsGiftCardReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostGiftCardsGiftCardReqToJson(this);

  @JsonKey(name: 'balance', includeIfNull: false, defaultValue: 36)
  final int? balance;
  @JsonKey(name: 'is_disabled', includeIfNull: false)
  final bool? isDisabled;
  @JsonKey(name: 'ends_at', includeIfNull: false)
  final DateTime? endsAt;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostGiftCardsGiftCardReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostGiftCardsGiftCardReqExtension
    on AdminPostGiftCardsGiftCardReq {
  AdminPostGiftCardsGiftCardReq copyWith(
      {int? balance,
      bool? isDisabled,
      DateTime? endsAt,
      String? regionId,
      Object? metadata}) {
    return AdminPostGiftCardsGiftCardReq(
        balance: balance ?? this.balance,
        isDisabled: isDisabled ?? this.isDisabled,
        endsAt: endsAt ?? this.endsAt,
        regionId: regionId ?? this.regionId,
        metadata: metadata ?? this.metadata);
  }

  AdminPostGiftCardsGiftCardReq copyWithWrapped(
      {Wrapped<int?>? balance,
      Wrapped<bool?>? isDisabled,
      Wrapped<DateTime?>? endsAt,
      Wrapped<String?>? regionId,
      Wrapped<Object?>? metadata}) {
    return AdminPostGiftCardsGiftCardReq(
        balance: (balance != null ? balance.value : this.balance),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        regionId: (regionId != null ? regionId.value : this.regionId),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostGiftCardsReq {
  const AdminPostGiftCardsReq({
    this.value,
    this.isDisabled,
    this.endsAt,
    required this.regionId,
    this.metadata,
  });

  factory AdminPostGiftCardsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostGiftCardsReqFromJson(json);

  static const toJsonFactory = _$AdminPostGiftCardsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostGiftCardsReqToJson(this);

  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 36)
  final int? value;
  @JsonKey(name: 'is_disabled', includeIfNull: false)
  final bool? isDisabled;
  @JsonKey(name: 'ends_at', includeIfNull: false)
  final DateTime? endsAt;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostGiftCardsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostGiftCardsReqExtension on AdminPostGiftCardsReq {
  AdminPostGiftCardsReq copyWith(
      {int? value,
      bool? isDisabled,
      DateTime? endsAt,
      String? regionId,
      Object? metadata}) {
    return AdminPostGiftCardsReq(
        value: value ?? this.value,
        isDisabled: isDisabled ?? this.isDisabled,
        endsAt: endsAt ?? this.endsAt,
        regionId: regionId ?? this.regionId,
        metadata: metadata ?? this.metadata);
  }

  AdminPostGiftCardsReq copyWithWrapped(
      {Wrapped<int?>? value,
      Wrapped<bool?>? isDisabled,
      Wrapped<DateTime?>? endsAt,
      Wrapped<String>? regionId,
      Wrapped<Object?>? metadata}) {
    return AdminPostGiftCardsReq(
        value: (value != null ? value.value : this.value),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        regionId: (regionId != null ? regionId.value : this.regionId),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostInventoryItemsInventoryItemReq {
  const AdminPostInventoryItemsInventoryItemReq({
    this.hsCode,
    this.originCountry,
    this.midCode,
    this.material,
    this.weight,
    this.height,
    this.width,
    this.length,
    this.title,
    this.description,
    this.thumbnail,
    this.requiresShipping,
  });

  factory AdminPostInventoryItemsInventoryItemReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostInventoryItemsInventoryItemReqFromJson(json);

  static const toJsonFactory = _$AdminPostInventoryItemsInventoryItemReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostInventoryItemsInventoryItemReqToJson(this);

  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(name: 'requires_shipping', includeIfNull: false)
  final bool? requiresShipping;
  static const fromJsonFactory =
      _$AdminPostInventoryItemsInventoryItemReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostInventoryItemsInventoryItemReqExtension
    on AdminPostInventoryItemsInventoryItemReq {
  AdminPostInventoryItemsInventoryItemReq copyWith(
      {String? hsCode,
      String? originCountry,
      String? midCode,
      String? material,
      double? weight,
      double? height,
      double? width,
      double? length,
      String? title,
      String? description,
      String? thumbnail,
      bool? requiresShipping}) {
    return AdminPostInventoryItemsInventoryItemReq(
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        weight: weight ?? this.weight,
        height: height ?? this.height,
        width: width ?? this.width,
        length: length ?? this.length,
        title: title ?? this.title,
        description: description ?? this.description,
        thumbnail: thumbnail ?? this.thumbnail,
        requiresShipping: requiresShipping ?? this.requiresShipping);
  }

  AdminPostInventoryItemsInventoryItemReq copyWithWrapped(
      {Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<double?>? weight,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<double?>? length,
      Wrapped<String?>? title,
      Wrapped<String?>? description,
      Wrapped<String?>? thumbnail,
      Wrapped<bool?>? requiresShipping}) {
    return AdminPostInventoryItemsInventoryItemReq(
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        weight: (weight != null ? weight.value : this.weight),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        length: (length != null ? length.value : this.length),
        title: (title != null ? title.value : this.title),
        description:
            (description != null ? description.value : this.description),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        requiresShipping: (requiresShipping != null
            ? requiresShipping.value
            : this.requiresShipping));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostInventoryItemsItemLocationLevelsLevelReq {
  const AdminPostInventoryItemsItemLocationLevelsLevelReq({
    this.stockedQuantity,
    this.incomingQuantity,
  });

  factory AdminPostInventoryItemsItemLocationLevelsLevelReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostInventoryItemsItemLocationLevelsLevelReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostInventoryItemsItemLocationLevelsLevelReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostInventoryItemsItemLocationLevelsLevelReqToJson(this);

  @JsonKey(name: 'stocked_quantity', includeIfNull: false)
  final double? stockedQuantity;
  @JsonKey(name: 'incoming_quantity', includeIfNull: false)
  final double? incomingQuantity;
  static const fromJsonFactory =
      _$AdminPostInventoryItemsItemLocationLevelsLevelReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostInventoryItemsItemLocationLevelsLevelReqExtension
    on AdminPostInventoryItemsItemLocationLevelsLevelReq {
  AdminPostInventoryItemsItemLocationLevelsLevelReq copyWith(
      {double? stockedQuantity, double? incomingQuantity}) {
    return AdminPostInventoryItemsItemLocationLevelsLevelReq(
        stockedQuantity: stockedQuantity ?? this.stockedQuantity,
        incomingQuantity: incomingQuantity ?? this.incomingQuantity);
  }

  AdminPostInventoryItemsItemLocationLevelsLevelReq copyWithWrapped(
      {Wrapped<double?>? stockedQuantity, Wrapped<double?>? incomingQuantity}) {
    return AdminPostInventoryItemsItemLocationLevelsLevelReq(
        stockedQuantity: (stockedQuantity != null
            ? stockedQuantity.value
            : this.stockedQuantity),
        incomingQuantity: (incomingQuantity != null
            ? incomingQuantity.value
            : this.incomingQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostInventoryItemsItemLocationLevelsReq {
  const AdminPostInventoryItemsItemLocationLevelsReq({
    required this.locationId,
    required this.stockedQuantity,
    this.incomingQuantity,
  });

  factory AdminPostInventoryItemsItemLocationLevelsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostInventoryItemsItemLocationLevelsReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostInventoryItemsItemLocationLevelsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostInventoryItemsItemLocationLevelsReqToJson(this);

  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  @JsonKey(name: 'stocked_quantity', includeIfNull: false)
  final double stockedQuantity;
  @JsonKey(name: 'incoming_quantity', includeIfNull: false)
  final double? incomingQuantity;
  static const fromJsonFactory =
      _$AdminPostInventoryItemsItemLocationLevelsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostInventoryItemsItemLocationLevelsReqExtension
    on AdminPostInventoryItemsItemLocationLevelsReq {
  AdminPostInventoryItemsItemLocationLevelsReq copyWith(
      {String? locationId, double? stockedQuantity, double? incomingQuantity}) {
    return AdminPostInventoryItemsItemLocationLevelsReq(
        locationId: locationId ?? this.locationId,
        stockedQuantity: stockedQuantity ?? this.stockedQuantity,
        incomingQuantity: incomingQuantity ?? this.incomingQuantity);
  }

  AdminPostInventoryItemsItemLocationLevelsReq copyWithWrapped(
      {Wrapped<String>? locationId,
      Wrapped<double>? stockedQuantity,
      Wrapped<double?>? incomingQuantity}) {
    return AdminPostInventoryItemsItemLocationLevelsReq(
        locationId: (locationId != null ? locationId.value : this.locationId),
        stockedQuantity: (stockedQuantity != null
            ? stockedQuantity.value
            : this.stockedQuantity),
        incomingQuantity: (incomingQuantity != null
            ? incomingQuantity.value
            : this.incomingQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostInventoryItemsReq {
  const AdminPostInventoryItemsReq({
    required this.variantId,
    this.sku,
    this.ean,
    this.upc,
    this.barcode,
    this.hsCode,
    this.inventoryQuantity,
    this.allowBackorder,
    this.manageInventory,
    this.weight,
    this.length,
    this.height,
    this.width,
    this.originCountry,
    this.midCode,
    this.material,
    this.title,
    this.description,
    this.thumbnail,
    this.metadata,
  });

  factory AdminPostInventoryItemsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostInventoryItemsReqFromJson(json);

  static const toJsonFactory = _$AdminPostInventoryItemsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostInventoryItemsReqToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String? sku;
  @JsonKey(name: 'ean', includeIfNull: false, defaultValue: 'default')
  final String? ean;
  @JsonKey(name: 'upc', includeIfNull: false, defaultValue: 'default')
  final String? upc;
  @JsonKey(name: 'barcode', includeIfNull: false, defaultValue: 'default')
  final String? barcode;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(name: 'inventory_quantity', includeIfNull: false, defaultValue: 36)
  final int? inventoryQuantity;
  @JsonKey(name: 'allow_backorder', includeIfNull: false)
  final bool? allowBackorder;
  @JsonKey(name: 'manage_inventory', includeIfNull: false, defaultValue: true)
  final bool? manageInventory;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostInventoryItemsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostInventoryItemsReqExtension on AdminPostInventoryItemsReq {
  AdminPostInventoryItemsReq copyWith(
      {String? variantId,
      String? sku,
      String? ean,
      String? upc,
      String? barcode,
      String? hsCode,
      int? inventoryQuantity,
      bool? allowBackorder,
      bool? manageInventory,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? originCountry,
      String? midCode,
      String? material,
      String? title,
      String? description,
      String? thumbnail,
      Object? metadata}) {
    return AdminPostInventoryItemsReq(
        variantId: variantId ?? this.variantId,
        sku: sku ?? this.sku,
        ean: ean ?? this.ean,
        upc: upc ?? this.upc,
        barcode: barcode ?? this.barcode,
        hsCode: hsCode ?? this.hsCode,
        inventoryQuantity: inventoryQuantity ?? this.inventoryQuantity,
        allowBackorder: allowBackorder ?? this.allowBackorder,
        manageInventory: manageInventory ?? this.manageInventory,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        title: title ?? this.title,
        description: description ?? this.description,
        thumbnail: thumbnail ?? this.thumbnail,
        metadata: metadata ?? this.metadata);
  }

  AdminPostInventoryItemsReq copyWithWrapped(
      {Wrapped<String>? variantId,
      Wrapped<String?>? sku,
      Wrapped<String?>? ean,
      Wrapped<String?>? upc,
      Wrapped<String?>? barcode,
      Wrapped<String?>? hsCode,
      Wrapped<int?>? inventoryQuantity,
      Wrapped<bool?>? allowBackorder,
      Wrapped<bool?>? manageInventory,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<String?>? title,
      Wrapped<String?>? description,
      Wrapped<String?>? thumbnail,
      Wrapped<Object?>? metadata}) {
    return AdminPostInventoryItemsReq(
        variantId: (variantId != null ? variantId.value : this.variantId),
        sku: (sku != null ? sku.value : this.sku),
        ean: (ean != null ? ean.value : this.ean),
        upc: (upc != null ? upc.value : this.upc),
        barcode: (barcode != null ? barcode.value : this.barcode),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        inventoryQuantity: (inventoryQuantity != null
            ? inventoryQuantity.value
            : this.inventoryQuantity),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder),
        manageInventory: (manageInventory != null
            ? manageInventory.value
            : this.manageInventory),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        title: (title != null ? title.value : this.title),
        description:
            (description != null ? description.value : this.description),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostInvitesInviteAcceptReq {
  const AdminPostInvitesInviteAcceptReq({
    required this.token,
    required this.user,
  });

  factory AdminPostInvitesInviteAcceptReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostInvitesInviteAcceptReqFromJson(json);

  static const toJsonFactory = _$AdminPostInvitesInviteAcceptReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostInvitesInviteAcceptReqToJson(this);

  @JsonKey(name: 'token', includeIfNull: false, defaultValue: 'default')
  final String token;
  @JsonKey(name: 'user', includeIfNull: false)
  final AdminPostInvitesInviteAcceptReq$User user;
  static const fromJsonFactory = _$AdminPostInvitesInviteAcceptReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostInvitesInviteAcceptReqExtension
    on AdminPostInvitesInviteAcceptReq {
  AdminPostInvitesInviteAcceptReq copyWith(
      {String? token, AdminPostInvitesInviteAcceptReq$User? user}) {
    return AdminPostInvitesInviteAcceptReq(
        token: token ?? this.token, user: user ?? this.user);
  }

  AdminPostInvitesInviteAcceptReq copyWithWrapped(
      {Wrapped<String>? token,
      Wrapped<AdminPostInvitesInviteAcceptReq$User>? user}) {
    return AdminPostInvitesInviteAcceptReq(
        token: (token != null ? token.value : this.token),
        user: (user != null ? user.value : this.user));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostInvitesReq {
  const AdminPostInvitesReq({
    required this.user,
    required this.role,
  });

  factory AdminPostInvitesReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostInvitesReqFromJson(json);

  static const toJsonFactory = _$AdminPostInvitesReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostInvitesReqToJson(this);

  @JsonKey(name: 'user', includeIfNull: false, defaultValue: 'default')
  final String user;
  @JsonKey(
    name: 'role',
    includeIfNull: false,
    toJson: adminPostInvitesReqRoleToJson,
    fromJson: adminPostInvitesReqRoleFromJson,
  )
  final enums.AdminPostInvitesReqRole role;
  static const fromJsonFactory = _$AdminPostInvitesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostInvitesReqExtension on AdminPostInvitesReq {
  AdminPostInvitesReq copyWith(
      {String? user, enums.AdminPostInvitesReqRole? role}) {
    return AdminPostInvitesReq(
        user: user ?? this.user, role: role ?? this.role);
  }

  AdminPostInvitesReq copyWithWrapped(
      {Wrapped<String>? user, Wrapped<enums.AdminPostInvitesReqRole>? role}) {
    return AdminPostInvitesReq(
        user: (user != null ? user.value : this.user),
        role: (role != null ? role.value : this.role));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostNotesNoteReq {
  const AdminPostNotesNoteReq({
    required this.value,
  });

  factory AdminPostNotesNoteReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostNotesNoteReqFromJson(json);

  static const toJsonFactory = _$AdminPostNotesNoteReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostNotesNoteReqToJson(this);

  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory = _$AdminPostNotesNoteReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostNotesNoteReqExtension on AdminPostNotesNoteReq {
  AdminPostNotesNoteReq copyWith({String? value}) {
    return AdminPostNotesNoteReq(value: value ?? this.value);
  }

  AdminPostNotesNoteReq copyWithWrapped({Wrapped<String>? value}) {
    return AdminPostNotesNoteReq(
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostNotesReq {
  const AdminPostNotesReq({
    required this.resourceId,
    required this.resourceType,
    required this.value,
  });

  factory AdminPostNotesReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostNotesReqFromJson(json);

  static const toJsonFactory = _$AdminPostNotesReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostNotesReqToJson(this);

  @JsonKey(name: 'resource_id', includeIfNull: false, defaultValue: 'default')
  final String resourceId;
  @JsonKey(name: 'resource_type', includeIfNull: false, defaultValue: 'default')
  final String resourceType;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory = _$AdminPostNotesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostNotesReqExtension on AdminPostNotesReq {
  AdminPostNotesReq copyWith(
      {String? resourceId, String? resourceType, String? value}) {
    return AdminPostNotesReq(
        resourceId: resourceId ?? this.resourceId,
        resourceType: resourceType ?? this.resourceType,
        value: value ?? this.value);
  }

  AdminPostNotesReq copyWithWrapped(
      {Wrapped<String>? resourceId,
      Wrapped<String>? resourceType,
      Wrapped<String>? value}) {
    return AdminPostNotesReq(
        resourceId: (resourceId != null ? resourceId.value : this.resourceId),
        resourceType:
            (resourceType != null ? resourceType.value : this.resourceType),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostNotificationsNotificationResendReq {
  const AdminPostNotificationsNotificationResendReq({
    this.to,
  });

  factory AdminPostNotificationsNotificationResendReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostNotificationsNotificationResendReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostNotificationsNotificationResendReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostNotificationsNotificationResendReqToJson(this);

  @JsonKey(name: 'to', includeIfNull: false, defaultValue: 'default')
  final String? to;
  static const fromJsonFactory =
      _$AdminPostNotificationsNotificationResendReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostNotificationsNotificationResendReqExtension
    on AdminPostNotificationsNotificationResendReq {
  AdminPostNotificationsNotificationResendReq copyWith({String? to}) {
    return AdminPostNotificationsNotificationResendReq(to: to ?? this.to);
  }

  AdminPostNotificationsNotificationResendReq copyWithWrapped(
      {Wrapped<String?>? to}) {
    return AdminPostNotificationsNotificationResendReq(
        to: (to != null ? to.value : this.to));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrderEditsEditLineItemsLineItemReq {
  const AdminPostOrderEditsEditLineItemsLineItemReq({
    required this.quantity,
  });

  factory AdminPostOrderEditsEditLineItemsLineItemReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrderEditsEditLineItemsLineItemReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrderEditsEditLineItemsLineItemReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrderEditsEditLineItemsLineItemReqToJson(this);

  @JsonKey(name: 'quantity', includeIfNull: false)
  final double quantity;
  static const fromJsonFactory =
      _$AdminPostOrderEditsEditLineItemsLineItemReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrderEditsEditLineItemsLineItemReqExtension
    on AdminPostOrderEditsEditLineItemsLineItemReq {
  AdminPostOrderEditsEditLineItemsLineItemReq copyWith({double? quantity}) {
    return AdminPostOrderEditsEditLineItemsLineItemReq(
        quantity: quantity ?? this.quantity);
  }

  AdminPostOrderEditsEditLineItemsLineItemReq copyWithWrapped(
      {Wrapped<double>? quantity}) {
    return AdminPostOrderEditsEditLineItemsLineItemReq(
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrderEditsEditLineItemsReq {
  const AdminPostOrderEditsEditLineItemsReq({
    required this.variantId,
    required this.quantity,
    this.metadata,
  });

  factory AdminPostOrderEditsEditLineItemsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrderEditsEditLineItemsReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrderEditsEditLineItemsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrderEditsEditLineItemsReqToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'quantity', includeIfNull: false)
  final double quantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostOrderEditsEditLineItemsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrderEditsEditLineItemsReqExtension
    on AdminPostOrderEditsEditLineItemsReq {
  AdminPostOrderEditsEditLineItemsReq copyWith(
      {String? variantId, double? quantity, Object? metadata}) {
    return AdminPostOrderEditsEditLineItemsReq(
        variantId: variantId ?? this.variantId,
        quantity: quantity ?? this.quantity,
        metadata: metadata ?? this.metadata);
  }

  AdminPostOrderEditsEditLineItemsReq copyWithWrapped(
      {Wrapped<String>? variantId,
      Wrapped<double>? quantity,
      Wrapped<Object?>? metadata}) {
    return AdminPostOrderEditsEditLineItemsReq(
        variantId: (variantId != null ? variantId.value : this.variantId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrderEditsOrderEditReq {
  const AdminPostOrderEditsOrderEditReq({
    this.internalNote,
  });

  factory AdminPostOrderEditsOrderEditReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostOrderEditsOrderEditReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrderEditsOrderEditReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrderEditsOrderEditReqToJson(this);

  @JsonKey(name: 'internal_note', includeIfNull: false, defaultValue: 'default')
  final String? internalNote;
  static const fromJsonFactory = _$AdminPostOrderEditsOrderEditReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrderEditsOrderEditReqExtension
    on AdminPostOrderEditsOrderEditReq {
  AdminPostOrderEditsOrderEditReq copyWith({String? internalNote}) {
    return AdminPostOrderEditsOrderEditReq(
        internalNote: internalNote ?? this.internalNote);
  }

  AdminPostOrderEditsOrderEditReq copyWithWrapped(
      {Wrapped<String?>? internalNote}) {
    return AdminPostOrderEditsOrderEditReq(
        internalNote:
            (internalNote != null ? internalNote.value : this.internalNote));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrderEditsReq {
  const AdminPostOrderEditsReq({
    required this.orderId,
    this.internalNote,
  });

  factory AdminPostOrderEditsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostOrderEditsReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrderEditsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostOrderEditsReqToJson(this);

  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String orderId;
  @JsonKey(name: 'internal_note', includeIfNull: false, defaultValue: 'default')
  final String? internalNote;
  static const fromJsonFactory = _$AdminPostOrderEditsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrderEditsReqExtension on AdminPostOrderEditsReq {
  AdminPostOrderEditsReq copyWith({String? orderId, String? internalNote}) {
    return AdminPostOrderEditsReq(
        orderId: orderId ?? this.orderId,
        internalNote: internalNote ?? this.internalNote);
  }

  AdminPostOrderEditsReq copyWithWrapped(
      {Wrapped<String>? orderId, Wrapped<String?>? internalNote}) {
    return AdminPostOrderEditsReq(
        orderId: (orderId != null ? orderId.value : this.orderId),
        internalNote:
            (internalNote != null ? internalNote.value : this.internalNote));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsClaimFulfillmentsReq {
  const AdminPostOrdersOrderClaimsClaimFulfillmentsReq({
    this.metadata,
    this.noNotification,
    this.locationId,
  });

  factory AdminPostOrdersOrderClaimsClaimFulfillmentsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsClaimFulfillmentsReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimFulfillmentsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsClaimFulfillmentsReqToJson(this);

  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String? locationId;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimFulfillmentsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsClaimFulfillmentsReqExtension
    on AdminPostOrdersOrderClaimsClaimFulfillmentsReq {
  AdminPostOrdersOrderClaimsClaimFulfillmentsReq copyWith(
      {Object? metadata, bool? noNotification, String? locationId}) {
    return AdminPostOrdersOrderClaimsClaimFulfillmentsReq(
        metadata: metadata ?? this.metadata,
        noNotification: noNotification ?? this.noNotification,
        locationId: locationId ?? this.locationId);
  }

  AdminPostOrdersOrderClaimsClaimFulfillmentsReq copyWithWrapped(
      {Wrapped<Object?>? metadata,
      Wrapped<bool?>? noNotification,
      Wrapped<String?>? locationId}) {
    return AdminPostOrdersOrderClaimsClaimFulfillmentsReq(
        metadata: (metadata != null ? metadata.value : this.metadata),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        locationId: (locationId != null ? locationId.value : this.locationId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsClaimReq {
  const AdminPostOrdersOrderClaimsClaimReq({
    this.claimItems,
    this.shippingMethods,
    this.noNotification,
    this.metadata,
  });

  factory AdminPostOrdersOrderClaimsClaimReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsClaimReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderClaimsClaimReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsClaimReqToJson(this);

  @JsonKey(name: 'claim_items', includeIfNull: false)
  final List<AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item>? claimItems;
  @JsonKey(name: 'shipping_methods', includeIfNull: false)
  final List<AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item>?
      shippingMethods;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostOrdersOrderClaimsClaimReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsClaimReqExtension
    on AdminPostOrdersOrderClaimsClaimReq {
  AdminPostOrdersOrderClaimsClaimReq copyWith(
      {List<AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item>? claimItems,
      List<AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item>?
          shippingMethods,
      bool? noNotification,
      Object? metadata}) {
    return AdminPostOrdersOrderClaimsClaimReq(
        claimItems: claimItems ?? this.claimItems,
        shippingMethods: shippingMethods ?? this.shippingMethods,
        noNotification: noNotification ?? this.noNotification,
        metadata: metadata ?? this.metadata);
  }

  AdminPostOrdersOrderClaimsClaimReq copyWithWrapped(
      {Wrapped<List<AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item>?>?
          claimItems,
      Wrapped<List<AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item>?>?
          shippingMethods,
      Wrapped<bool?>? noNotification,
      Wrapped<Object?>? metadata}) {
    return AdminPostOrdersOrderClaimsClaimReq(
        claimItems: (claimItems != null ? claimItems.value : this.claimItems),
        shippingMethods: (shippingMethods != null
            ? shippingMethods.value
            : this.shippingMethods),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsClaimShipmentsReq {
  const AdminPostOrdersOrderClaimsClaimShipmentsReq({
    required this.fulfillmentId,
    this.trackingNumbers,
  });

  factory AdminPostOrdersOrderClaimsClaimShipmentsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsClaimShipmentsReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimShipmentsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsClaimShipmentsReqToJson(this);

  @JsonKey(
      name: 'fulfillment_id', includeIfNull: false, defaultValue: 'default')
  final String fulfillmentId;
  @JsonKey(
      name: 'tracking_numbers', includeIfNull: false, defaultValue: <String>[])
  final List<String>? trackingNumbers;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimShipmentsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsClaimShipmentsReqExtension
    on AdminPostOrdersOrderClaimsClaimShipmentsReq {
  AdminPostOrdersOrderClaimsClaimShipmentsReq copyWith(
      {String? fulfillmentId, List<String>? trackingNumbers}) {
    return AdminPostOrdersOrderClaimsClaimShipmentsReq(
        fulfillmentId: fulfillmentId ?? this.fulfillmentId,
        trackingNumbers: trackingNumbers ?? this.trackingNumbers);
  }

  AdminPostOrdersOrderClaimsClaimShipmentsReq copyWithWrapped(
      {Wrapped<String>? fulfillmentId,
      Wrapped<List<String>?>? trackingNumbers}) {
    return AdminPostOrdersOrderClaimsClaimShipmentsReq(
        fulfillmentId:
            (fulfillmentId != null ? fulfillmentId.value : this.fulfillmentId),
        trackingNumbers: (trackingNumbers != null
            ? trackingNumbers.value
            : this.trackingNumbers));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsReq {
  const AdminPostOrdersOrderClaimsReq({
    required this.type,
    required this.claimItems,
    this.returnShipping,
    this.additionalItems,
    this.shippingMethods,
    this.shippingAddress,
    this.refundAmount,
    this.noNotification,
    this.returnLocationId,
    this.metadata,
  });

  factory AdminPostOrdersOrderClaimsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderClaimsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostOrdersOrderClaimsReqToJson(this);

  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: adminPostOrdersOrderClaimsReqTypeToJson,
    fromJson: adminPostOrdersOrderClaimsReqTypeFromJson,
  )
  final enums.AdminPostOrdersOrderClaimsReqType type;
  @JsonKey(name: 'claim_items', includeIfNull: false)
  final List<AdminPostOrdersOrderClaimsReq$ClaimItems$Item> claimItems;
  @JsonKey(name: 'return_shipping', includeIfNull: false)
  final AdminPostOrdersOrderClaimsReq$ReturnShipping? returnShipping;
  @JsonKey(name: 'additional_items', includeIfNull: false)
  final List<AdminPostOrdersOrderClaimsReq$AdditionalItems$Item>?
      additionalItems;
  @JsonKey(name: 'shipping_methods', includeIfNull: false)
  final List<AdminPostOrdersOrderClaimsReq$ShippingMethods$Item>?
      shippingMethods;
  @JsonKey(name: 'shipping_address', includeIfNull: false)
  final AddressPayload? shippingAddress;
  @JsonKey(name: 'refund_amount', includeIfNull: false, defaultValue: 36)
  final int? refundAmount;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(
      name: 'return_location_id', includeIfNull: false, defaultValue: 'default')
  final String? returnLocationId;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostOrdersOrderClaimsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsReqExtension
    on AdminPostOrdersOrderClaimsReq {
  AdminPostOrdersOrderClaimsReq copyWith(
      {enums.AdminPostOrdersOrderClaimsReqType? type,
      List<AdminPostOrdersOrderClaimsReq$ClaimItems$Item>? claimItems,
      AdminPostOrdersOrderClaimsReq$ReturnShipping? returnShipping,
      List<AdminPostOrdersOrderClaimsReq$AdditionalItems$Item>? additionalItems,
      List<AdminPostOrdersOrderClaimsReq$ShippingMethods$Item>? shippingMethods,
      AddressPayload? shippingAddress,
      int? refundAmount,
      bool? noNotification,
      String? returnLocationId,
      Object? metadata}) {
    return AdminPostOrdersOrderClaimsReq(
        type: type ?? this.type,
        claimItems: claimItems ?? this.claimItems,
        returnShipping: returnShipping ?? this.returnShipping,
        additionalItems: additionalItems ?? this.additionalItems,
        shippingMethods: shippingMethods ?? this.shippingMethods,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        refundAmount: refundAmount ?? this.refundAmount,
        noNotification: noNotification ?? this.noNotification,
        returnLocationId: returnLocationId ?? this.returnLocationId,
        metadata: metadata ?? this.metadata);
  }

  AdminPostOrdersOrderClaimsReq copyWithWrapped(
      {Wrapped<enums.AdminPostOrdersOrderClaimsReqType>? type,
      Wrapped<List<AdminPostOrdersOrderClaimsReq$ClaimItems$Item>>? claimItems,
      Wrapped<AdminPostOrdersOrderClaimsReq$ReturnShipping?>? returnShipping,
      Wrapped<List<AdminPostOrdersOrderClaimsReq$AdditionalItems$Item>?>?
          additionalItems,
      Wrapped<List<AdminPostOrdersOrderClaimsReq$ShippingMethods$Item>?>?
          shippingMethods,
      Wrapped<AddressPayload?>? shippingAddress,
      Wrapped<int?>? refundAmount,
      Wrapped<bool?>? noNotification,
      Wrapped<String?>? returnLocationId,
      Wrapped<Object?>? metadata}) {
    return AdminPostOrdersOrderClaimsReq(
        type: (type != null ? type.value : this.type),
        claimItems: (claimItems != null ? claimItems.value : this.claimItems),
        returnShipping: (returnShipping != null
            ? returnShipping.value
            : this.returnShipping),
        additionalItems: (additionalItems != null
            ? additionalItems.value
            : this.additionalItems),
        shippingMethods: (shippingMethods != null
            ? shippingMethods.value
            : this.shippingMethods),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        refundAmount:
            (refundAmount != null ? refundAmount.value : this.refundAmount),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        returnLocationId: (returnLocationId != null
            ? returnLocationId.value
            : this.returnLocationId),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderFulfillmentsReq {
  const AdminPostOrdersOrderFulfillmentsReq({
    required this.items,
    this.locationId,
    this.noNotification,
    this.metadata,
  });

  factory AdminPostOrdersOrderFulfillmentsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderFulfillmentsReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderFulfillmentsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderFulfillmentsReqToJson(this);

  @JsonKey(name: 'items', includeIfNull: false)
  final List<AdminPostOrdersOrderFulfillmentsReq$Items$Item> items;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String? locationId;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostOrdersOrderFulfillmentsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderFulfillmentsReqExtension
    on AdminPostOrdersOrderFulfillmentsReq {
  AdminPostOrdersOrderFulfillmentsReq copyWith(
      {List<AdminPostOrdersOrderFulfillmentsReq$Items$Item>? items,
      String? locationId,
      bool? noNotification,
      Object? metadata}) {
    return AdminPostOrdersOrderFulfillmentsReq(
        items: items ?? this.items,
        locationId: locationId ?? this.locationId,
        noNotification: noNotification ?? this.noNotification,
        metadata: metadata ?? this.metadata);
  }

  AdminPostOrdersOrderFulfillmentsReq copyWithWrapped(
      {Wrapped<List<AdminPostOrdersOrderFulfillmentsReq$Items$Item>>? items,
      Wrapped<String?>? locationId,
      Wrapped<bool?>? noNotification,
      Wrapped<Object?>? metadata}) {
    return AdminPostOrdersOrderFulfillmentsReq(
        items: (items != null ? items.value : this.items),
        locationId: (locationId != null ? locationId.value : this.locationId),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderRefundsReq {
  const AdminPostOrdersOrderRefundsReq({
    required this.amount,
    required this.reason,
    this.note,
    this.noNotification,
  });

  factory AdminPostOrdersOrderRefundsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderRefundsReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderRefundsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostOrdersOrderRefundsReqToJson(this);

  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'reason', includeIfNull: false, defaultValue: 'default')
  final String reason;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  static const fromJsonFactory = _$AdminPostOrdersOrderRefundsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderRefundsReqExtension
    on AdminPostOrdersOrderRefundsReq {
  AdminPostOrdersOrderRefundsReq copyWith(
      {int? amount, String? reason, String? note, bool? noNotification}) {
    return AdminPostOrdersOrderRefundsReq(
        amount: amount ?? this.amount,
        reason: reason ?? this.reason,
        note: note ?? this.note,
        noNotification: noNotification ?? this.noNotification);
  }

  AdminPostOrdersOrderRefundsReq copyWithWrapped(
      {Wrapped<int>? amount,
      Wrapped<String>? reason,
      Wrapped<String?>? note,
      Wrapped<bool?>? noNotification}) {
    return AdminPostOrdersOrderRefundsReq(
        amount: (amount != null ? amount.value : this.amount),
        reason: (reason != null ? reason.value : this.reason),
        note: (note != null ? note.value : this.note),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderReq {
  const AdminPostOrdersOrderReq({
    this.email,
    this.billingAddress,
    this.shippingAddress,
    this.items,
    this.region,
    this.discounts,
    this.customerId,
    this.paymentMethod,
    this.shippingMethod,
    this.noNotification,
  });

  factory AdminPostOrdersOrderReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostOrdersOrderReqToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String? email;
  @JsonKey(name: 'billing_address', includeIfNull: false)
  final AddressPayload? billingAddress;
  @JsonKey(name: 'shipping_address', includeIfNull: false)
  final AddressPayload? shippingAddress;
  @JsonKey(name: 'items', includeIfNull: false, defaultValue: <LineItem>[])
  final List<LineItem>? items;
  @JsonKey(name: 'region', includeIfNull: false, defaultValue: 'default')
  final String? region;
  @JsonKey(name: 'discounts', includeIfNull: false, defaultValue: <Discount>[])
  final List<Discount>? discounts;
  @JsonKey(name: 'customer_id', includeIfNull: false, defaultValue: 'default')
  final String? customerId;
  @JsonKey(name: 'payment_method', includeIfNull: false)
  final AdminPostOrdersOrderReq$PaymentMethod? paymentMethod;
  @JsonKey(name: 'shipping_method', includeIfNull: false)
  final AdminPostOrdersOrderReq$ShippingMethod? shippingMethod;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  static const fromJsonFactory = _$AdminPostOrdersOrderReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderReqExtension on AdminPostOrdersOrderReq {
  AdminPostOrdersOrderReq copyWith(
      {String? email,
      AddressPayload? billingAddress,
      AddressPayload? shippingAddress,
      List<LineItem>? items,
      String? region,
      List<Discount>? discounts,
      String? customerId,
      AdminPostOrdersOrderReq$PaymentMethod? paymentMethod,
      AdminPostOrdersOrderReq$ShippingMethod? shippingMethod,
      bool? noNotification}) {
    return AdminPostOrdersOrderReq(
        email: email ?? this.email,
        billingAddress: billingAddress ?? this.billingAddress,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        items: items ?? this.items,
        region: region ?? this.region,
        discounts: discounts ?? this.discounts,
        customerId: customerId ?? this.customerId,
        paymentMethod: paymentMethod ?? this.paymentMethod,
        shippingMethod: shippingMethod ?? this.shippingMethod,
        noNotification: noNotification ?? this.noNotification);
  }

  AdminPostOrdersOrderReq copyWithWrapped(
      {Wrapped<String?>? email,
      Wrapped<AddressPayload?>? billingAddress,
      Wrapped<AddressPayload?>? shippingAddress,
      Wrapped<List<LineItem>?>? items,
      Wrapped<String?>? region,
      Wrapped<List<Discount>?>? discounts,
      Wrapped<String?>? customerId,
      Wrapped<AdminPostOrdersOrderReq$PaymentMethod?>? paymentMethod,
      Wrapped<AdminPostOrdersOrderReq$ShippingMethod?>? shippingMethod,
      Wrapped<bool?>? noNotification}) {
    return AdminPostOrdersOrderReq(
        email: (email != null ? email.value : this.email),
        billingAddress: (billingAddress != null
            ? billingAddress.value
            : this.billingAddress),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        items: (items != null ? items.value : this.items),
        region: (region != null ? region.value : this.region),
        discounts: (discounts != null ? discounts.value : this.discounts),
        customerId: (customerId != null ? customerId.value : this.customerId),
        paymentMethod:
            (paymentMethod != null ? paymentMethod.value : this.paymentMethod),
        shippingMethod: (shippingMethod != null
            ? shippingMethod.value
            : this.shippingMethod),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderReturnsReq {
  const AdminPostOrdersOrderReturnsReq({
    required this.items,
    this.returnShipping,
    this.note,
    this.receiveNow,
    this.noNotification,
    this.refund,
    this.locationId,
  });

  factory AdminPostOrdersOrderReturnsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderReturnsReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderReturnsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostOrdersOrderReturnsReqToJson(this);

  @JsonKey(name: 'items', includeIfNull: false)
  final List<AdminPostOrdersOrderReturnsReq$Items$Item> items;
  @JsonKey(name: 'return_shipping', includeIfNull: false)
  final AdminPostOrdersOrderReturnsReq$ReturnShipping? returnShipping;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  @JsonKey(name: 'receive_now', includeIfNull: false, defaultValue: false)
  final bool? receiveNow;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(name: 'refund', includeIfNull: false, defaultValue: 36)
  final int? refund;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String? locationId;
  static const fromJsonFactory = _$AdminPostOrdersOrderReturnsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderReturnsReqExtension
    on AdminPostOrdersOrderReturnsReq {
  AdminPostOrdersOrderReturnsReq copyWith(
      {List<AdminPostOrdersOrderReturnsReq$Items$Item>? items,
      AdminPostOrdersOrderReturnsReq$ReturnShipping? returnShipping,
      String? note,
      bool? receiveNow,
      bool? noNotification,
      int? refund,
      String? locationId}) {
    return AdminPostOrdersOrderReturnsReq(
        items: items ?? this.items,
        returnShipping: returnShipping ?? this.returnShipping,
        note: note ?? this.note,
        receiveNow: receiveNow ?? this.receiveNow,
        noNotification: noNotification ?? this.noNotification,
        refund: refund ?? this.refund,
        locationId: locationId ?? this.locationId);
  }

  AdminPostOrdersOrderReturnsReq copyWithWrapped(
      {Wrapped<List<AdminPostOrdersOrderReturnsReq$Items$Item>>? items,
      Wrapped<AdminPostOrdersOrderReturnsReq$ReturnShipping?>? returnShipping,
      Wrapped<String?>? note,
      Wrapped<bool?>? receiveNow,
      Wrapped<bool?>? noNotification,
      Wrapped<int?>? refund,
      Wrapped<String?>? locationId}) {
    return AdminPostOrdersOrderReturnsReq(
        items: (items != null ? items.value : this.items),
        returnShipping: (returnShipping != null
            ? returnShipping.value
            : this.returnShipping),
        note: (note != null ? note.value : this.note),
        receiveNow: (receiveNow != null ? receiveNow.value : this.receiveNow),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        refund: (refund != null ? refund.value : this.refund),
        locationId: (locationId != null ? locationId.value : this.locationId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderShipmentReq {
  const AdminPostOrdersOrderShipmentReq({
    required this.fulfillmentId,
    this.trackingNumbers,
    this.noNotification,
  });

  factory AdminPostOrdersOrderShipmentReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderShipmentReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderShipmentReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderShipmentReqToJson(this);

  @JsonKey(
      name: 'fulfillment_id', includeIfNull: false, defaultValue: 'default')
  final String fulfillmentId;
  @JsonKey(
      name: 'tracking_numbers', includeIfNull: false, defaultValue: <String>[])
  final List<String>? trackingNumbers;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  static const fromJsonFactory = _$AdminPostOrdersOrderShipmentReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderShipmentReqExtension
    on AdminPostOrdersOrderShipmentReq {
  AdminPostOrdersOrderShipmentReq copyWith(
      {String? fulfillmentId,
      List<String>? trackingNumbers,
      bool? noNotification}) {
    return AdminPostOrdersOrderShipmentReq(
        fulfillmentId: fulfillmentId ?? this.fulfillmentId,
        trackingNumbers: trackingNumbers ?? this.trackingNumbers,
        noNotification: noNotification ?? this.noNotification);
  }

  AdminPostOrdersOrderShipmentReq copyWithWrapped(
      {Wrapped<String>? fulfillmentId,
      Wrapped<List<String>?>? trackingNumbers,
      Wrapped<bool?>? noNotification}) {
    return AdminPostOrdersOrderShipmentReq(
        fulfillmentId:
            (fulfillmentId != null ? fulfillmentId.value : this.fulfillmentId),
        trackingNumbers: (trackingNumbers != null
            ? trackingNumbers.value
            : this.trackingNumbers),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderShippingMethodsReq {
  const AdminPostOrdersOrderShippingMethodsReq({
    required this.price,
    required this.optionId,
    this.data,
  });

  factory AdminPostOrdersOrderShippingMethodsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderShippingMethodsReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderShippingMethodsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderShippingMethodsReqToJson(this);

  @JsonKey(name: 'price', includeIfNull: false)
  final double price;
  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object? data;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderShippingMethodsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderShippingMethodsReqExtension
    on AdminPostOrdersOrderShippingMethodsReq {
  AdminPostOrdersOrderShippingMethodsReq copyWith(
      {double? price, String? optionId, Object? data}) {
    return AdminPostOrdersOrderShippingMethodsReq(
        price: price ?? this.price,
        optionId: optionId ?? this.optionId,
        data: data ?? this.data);
  }

  AdminPostOrdersOrderShippingMethodsReq copyWithWrapped(
      {Wrapped<double>? price,
      Wrapped<String>? optionId,
      Wrapped<Object?>? data}) {
    return AdminPostOrdersOrderShippingMethodsReq(
        price: (price != null ? price.value : this.price),
        optionId: (optionId != null ? optionId.value : this.optionId),
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderSwapsReq {
  const AdminPostOrdersOrderSwapsReq({
    required this.returnItems,
    this.returnShipping,
    this.additionalItems,
    this.salesChannelId,
    this.customShippingOptions,
    this.noNotification,
    this.returnLocationId,
    this.allowBackorder,
  });

  factory AdminPostOrdersOrderSwapsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderSwapsReqFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderSwapsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostOrdersOrderSwapsReqToJson(this);

  @JsonKey(name: 'return_items', includeIfNull: false)
  final List<AdminPostOrdersOrderSwapsReq$ReturnItems$Item> returnItems;
  @JsonKey(name: 'return_shipping', includeIfNull: false)
  final AdminPostOrdersOrderSwapsReq$ReturnShipping? returnShipping;
  @JsonKey(name: 'additional_items', includeIfNull: false)
  final List<AdminPostOrdersOrderSwapsReq$AdditionalItems$Item>?
      additionalItems;
  @JsonKey(
      name: 'sales_channel_id', includeIfNull: false, defaultValue: 'default')
  final String? salesChannelId;
  @JsonKey(name: 'custom_shipping_options', includeIfNull: false)
  final List<AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item>?
      customShippingOptions;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(
      name: 'return_location_id', includeIfNull: false, defaultValue: 'default')
  final String? returnLocationId;
  @JsonKey(name: 'allow_backorder', includeIfNull: false, defaultValue: true)
  final bool? allowBackorder;
  static const fromJsonFactory = _$AdminPostOrdersOrderSwapsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderSwapsReqExtension
    on AdminPostOrdersOrderSwapsReq {
  AdminPostOrdersOrderSwapsReq copyWith(
      {List<AdminPostOrdersOrderSwapsReq$ReturnItems$Item>? returnItems,
      AdminPostOrdersOrderSwapsReq$ReturnShipping? returnShipping,
      List<AdminPostOrdersOrderSwapsReq$AdditionalItems$Item>? additionalItems,
      String? salesChannelId,
      List<AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item>?
          customShippingOptions,
      bool? noNotification,
      String? returnLocationId,
      bool? allowBackorder}) {
    return AdminPostOrdersOrderSwapsReq(
        returnItems: returnItems ?? this.returnItems,
        returnShipping: returnShipping ?? this.returnShipping,
        additionalItems: additionalItems ?? this.additionalItems,
        salesChannelId: salesChannelId ?? this.salesChannelId,
        customShippingOptions:
            customShippingOptions ?? this.customShippingOptions,
        noNotification: noNotification ?? this.noNotification,
        returnLocationId: returnLocationId ?? this.returnLocationId,
        allowBackorder: allowBackorder ?? this.allowBackorder);
  }

  AdminPostOrdersOrderSwapsReq copyWithWrapped(
      {Wrapped<List<AdminPostOrdersOrderSwapsReq$ReturnItems$Item>>?
          returnItems,
      Wrapped<AdminPostOrdersOrderSwapsReq$ReturnShipping?>? returnShipping,
      Wrapped<List<AdminPostOrdersOrderSwapsReq$AdditionalItems$Item>?>?
          additionalItems,
      Wrapped<String?>? salesChannelId,
      Wrapped<List<AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item>?>?
          customShippingOptions,
      Wrapped<bool?>? noNotification,
      Wrapped<String?>? returnLocationId,
      Wrapped<bool?>? allowBackorder}) {
    return AdminPostOrdersOrderSwapsReq(
        returnItems:
            (returnItems != null ? returnItems.value : this.returnItems),
        returnShipping: (returnShipping != null
            ? returnShipping.value
            : this.returnShipping),
        additionalItems: (additionalItems != null
            ? additionalItems.value
            : this.additionalItems),
        salesChannelId: (salesChannelId != null
            ? salesChannelId.value
            : this.salesChannelId),
        customShippingOptions: (customShippingOptions != null
            ? customShippingOptions.value
            : this.customShippingOptions),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        returnLocationId: (returnLocationId != null
            ? returnLocationId.value
            : this.returnLocationId),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderSwapsSwapFulfillmentsReq {
  const AdminPostOrdersOrderSwapsSwapFulfillmentsReq({
    this.metadata,
    this.noNotification,
    this.locationId,
  });

  factory AdminPostOrdersOrderSwapsSwapFulfillmentsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderSwapsSwapFulfillmentsReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderSwapsSwapFulfillmentsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderSwapsSwapFulfillmentsReqToJson(this);

  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String? locationId;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderSwapsSwapFulfillmentsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderSwapsSwapFulfillmentsReqExtension
    on AdminPostOrdersOrderSwapsSwapFulfillmentsReq {
  AdminPostOrdersOrderSwapsSwapFulfillmentsReq copyWith(
      {Object? metadata, bool? noNotification, String? locationId}) {
    return AdminPostOrdersOrderSwapsSwapFulfillmentsReq(
        metadata: metadata ?? this.metadata,
        noNotification: noNotification ?? this.noNotification,
        locationId: locationId ?? this.locationId);
  }

  AdminPostOrdersOrderSwapsSwapFulfillmentsReq copyWithWrapped(
      {Wrapped<Object?>? metadata,
      Wrapped<bool?>? noNotification,
      Wrapped<String?>? locationId}) {
    return AdminPostOrdersOrderSwapsSwapFulfillmentsReq(
        metadata: (metadata != null ? metadata.value : this.metadata),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        locationId: (locationId != null ? locationId.value : this.locationId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderSwapsSwapShipmentsReq {
  const AdminPostOrdersOrderSwapsSwapShipmentsReq({
    required this.fulfillmentId,
    this.trackingNumbers,
    this.noNotification,
  });

  factory AdminPostOrdersOrderSwapsSwapShipmentsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderSwapsSwapShipmentsReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderSwapsSwapShipmentsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderSwapsSwapShipmentsReqToJson(this);

  @JsonKey(
      name: 'fulfillment_id', includeIfNull: false, defaultValue: 'default')
  final String fulfillmentId;
  @JsonKey(
      name: 'tracking_numbers', includeIfNull: false, defaultValue: <String>[])
  final List<String>? trackingNumbers;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderSwapsSwapShipmentsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderSwapsSwapShipmentsReqExtension
    on AdminPostOrdersOrderSwapsSwapShipmentsReq {
  AdminPostOrdersOrderSwapsSwapShipmentsReq copyWith(
      {String? fulfillmentId,
      List<String>? trackingNumbers,
      bool? noNotification}) {
    return AdminPostOrdersOrderSwapsSwapShipmentsReq(
        fulfillmentId: fulfillmentId ?? this.fulfillmentId,
        trackingNumbers: trackingNumbers ?? this.trackingNumbers,
        noNotification: noNotification ?? this.noNotification);
  }

  AdminPostOrdersOrderSwapsSwapShipmentsReq copyWithWrapped(
      {Wrapped<String>? fulfillmentId,
      Wrapped<List<String>?>? trackingNumbers,
      Wrapped<bool?>? noNotification}) {
    return AdminPostOrdersOrderSwapsSwapShipmentsReq(
        fulfillmentId:
            (fulfillmentId != null ? fulfillmentId.value : this.fulfillmentId),
        trackingNumbers: (trackingNumbers != null
            ? trackingNumbers.value
            : this.trackingNumbers),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPaymentRefundsReq {
  const AdminPostPaymentRefundsReq({
    required this.amount,
    required this.reason,
    this.note,
  });

  factory AdminPostPaymentRefundsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostPaymentRefundsReqFromJson(json);

  static const toJsonFactory = _$AdminPostPaymentRefundsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostPaymentRefundsReqToJson(this);

  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'reason', includeIfNull: false, defaultValue: 'default')
  final String reason;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  static const fromJsonFactory = _$AdminPostPaymentRefundsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPaymentRefundsReqExtension on AdminPostPaymentRefundsReq {
  AdminPostPaymentRefundsReq copyWith(
      {int? amount, String? reason, String? note}) {
    return AdminPostPaymentRefundsReq(
        amount: amount ?? this.amount,
        reason: reason ?? this.reason,
        note: note ?? this.note);
  }

  AdminPostPaymentRefundsReq copyWithWrapped(
      {Wrapped<int>? amount, Wrapped<String>? reason, Wrapped<String?>? note}) {
    return AdminPostPaymentRefundsReq(
        amount: (amount != null ? amount.value : this.amount),
        reason: (reason != null ? reason.value : this.reason),
        note: (note != null ? note.value : this.note));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPriceListPricesPricesReq {
  const AdminPostPriceListPricesPricesReq({
    this.prices,
    this.override,
  });

  factory AdminPostPriceListPricesPricesReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPriceListPricesPricesReqFromJson(json);

  static const toJsonFactory = _$AdminPostPriceListPricesPricesReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPriceListPricesPricesReqToJson(this);

  @JsonKey(name: 'prices', includeIfNull: false)
  final List<AdminPostPriceListPricesPricesReq$Prices$Item>? prices;
  @JsonKey(name: 'override', includeIfNull: false)
  final bool? override;
  static const fromJsonFactory = _$AdminPostPriceListPricesPricesReqFromJson;

  // @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPriceListPricesPricesReqExtension
    on AdminPostPriceListPricesPricesReq {
  AdminPostPriceListPricesPricesReq copyWith(
      {List<AdminPostPriceListPricesPricesReq$Prices$Item>? prices,
      bool? override}) {
    return AdminPostPriceListPricesPricesReq(
        prices: prices ?? this.prices, override: override ?? this.override);
  }

  AdminPostPriceListPricesPricesReq copyWithWrapped(
      {Wrapped<List<AdminPostPriceListPricesPricesReq$Prices$Item>?>? prices,
      Wrapped<bool?>? override}) {
    return AdminPostPriceListPricesPricesReq(
        prices: (prices != null ? prices.value : this.prices),
        override: (override != null ? override.value : this.override));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPriceListsPriceListPriceListReq {
  const AdminPostPriceListsPriceListPriceListReq({
    this.name,
    this.description,
    this.startsAt,
    this.endsAt,
    this.type,
    this.status,
    this.prices,
    this.customerGroups,
    this.includesTax,
  });

  factory AdminPostPriceListsPriceListPriceListReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPriceListsPriceListPriceListReqFromJson(json);

  static const toJsonFactory = _$AdminPostPriceListsPriceListPriceListReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPriceListsPriceListPriceListReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'starts_at', includeIfNull: false, toJson: _dateToJson)
  final DateTime? startsAt;
  @JsonKey(name: 'ends_at', includeIfNull: false, toJson: _dateToJson)
  final DateTime? endsAt;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: adminPostPriceListsPriceListPriceListReqTypeNullableToJson,
    fromJson: adminPostPriceListsPriceListPriceListReqTypeNullableFromJson,
  )
  final enums.AdminPostPriceListsPriceListPriceListReqType? type;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: adminPostPriceListsPriceListPriceListReqStatusNullableToJson,
    fromJson: adminPostPriceListsPriceListPriceListReqStatusNullableFromJson,
  )
  final enums.AdminPostPriceListsPriceListPriceListReqStatus? status;
  @JsonKey(name: 'prices', includeIfNull: false)
  final List<AdminPostPriceListsPriceListPriceListReq$Prices$Item>? prices;
  @JsonKey(name: 'customer_groups', includeIfNull: false)
  final List<AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item>?
      customerGroups;
  @JsonKey(name: 'includes_tax', includeIfNull: false)
  final bool? includesTax;
  static const fromJsonFactory =
      _$AdminPostPriceListsPriceListPriceListReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPriceListsPriceListPriceListReqExtension
    on AdminPostPriceListsPriceListPriceListReq {
  AdminPostPriceListsPriceListPriceListReq copyWith(
      {String? name,
      String? description,
      DateTime? startsAt,
      DateTime? endsAt,
      enums.AdminPostPriceListsPriceListPriceListReqType? type,
      enums.AdminPostPriceListsPriceListPriceListReqStatus? status,
      List<AdminPostPriceListsPriceListPriceListReq$Prices$Item>? prices,
      List<AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item>?
          customerGroups,
      bool? includesTax}) {
    return AdminPostPriceListsPriceListPriceListReq(
        name: name ?? this.name,
        description: description ?? this.description,
        startsAt: startsAt ?? this.startsAt,
        endsAt: endsAt ?? this.endsAt,
        type: type ?? this.type,
        status: status ?? this.status,
        prices: prices ?? this.prices,
        customerGroups: customerGroups ?? this.customerGroups,
        includesTax: includesTax ?? this.includesTax);
  }

  AdminPostPriceListsPriceListPriceListReq copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? description,
      Wrapped<DateTime?>? startsAt,
      Wrapped<DateTime?>? endsAt,
      Wrapped<enums.AdminPostPriceListsPriceListPriceListReqType?>? type,
      Wrapped<enums.AdminPostPriceListsPriceListPriceListReqStatus?>? status,
      Wrapped<List<AdminPostPriceListsPriceListPriceListReq$Prices$Item>?>?
          prices,
      Wrapped<
              List<
                  AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item>?>?
          customerGroups,
      Wrapped<bool?>? includesTax}) {
    return AdminPostPriceListsPriceListPriceListReq(
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        startsAt: (startsAt != null ? startsAt.value : this.startsAt),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        type: (type != null ? type.value : this.type),
        status: (status != null ? status.value : this.status),
        prices: (prices != null ? prices.value : this.prices),
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPriceListsPriceListReq {
  const AdminPostPriceListsPriceListReq({
    required this.name,
    required this.description,
    this.startsAt,
    this.endsAt,
    required this.type,
    this.status,
    required this.prices,
    this.customerGroups,
    this.includesTax,
  });

  factory AdminPostPriceListsPriceListReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostPriceListsPriceListReqFromJson(json);

  static const toJsonFactory = _$AdminPostPriceListsPriceListReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPriceListsPriceListReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String description;
  @JsonKey(name: 'starts_at', includeIfNull: false, toJson: _dateToJson)
  final DateTime? startsAt;
  @JsonKey(name: 'ends_at', includeIfNull: false, toJson: _dateToJson)
  final DateTime? endsAt;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: adminPostPriceListsPriceListReqTypeToJson,
    fromJson: adminPostPriceListsPriceListReqTypeFromJson,
  )
  final enums.AdminPostPriceListsPriceListReqType type;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: adminPostPriceListsPriceListReqStatusNullableToJson,
    fromJson: adminPostPriceListsPriceListReqStatusNullableFromJson,
  )
  final enums.AdminPostPriceListsPriceListReqStatus? status;
  @JsonKey(name: 'prices', includeIfNull: false)
  final List<AdminPostPriceListsPriceListReq$Prices$Item> prices;
  @JsonKey(name: 'customer_groups', includeIfNull: false)
  final List<AdminPostPriceListsPriceListReq$CustomerGroups$Item>?
      customerGroups;
  @JsonKey(name: 'includes_tax', includeIfNull: false)
  final bool? includesTax;
  static const fromJsonFactory = _$AdminPostPriceListsPriceListReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPriceListsPriceListReqExtension
    on AdminPostPriceListsPriceListReq {
  AdminPostPriceListsPriceListReq copyWith(
      {String? name,
      String? description,
      DateTime? startsAt,
      DateTime? endsAt,
      enums.AdminPostPriceListsPriceListReqType? type,
      enums.AdminPostPriceListsPriceListReqStatus? status,
      List<AdminPostPriceListsPriceListReq$Prices$Item>? prices,
      List<AdminPostPriceListsPriceListReq$CustomerGroups$Item>? customerGroups,
      bool? includesTax}) {
    return AdminPostPriceListsPriceListReq(
        name: name ?? this.name,
        description: description ?? this.description,
        startsAt: startsAt ?? this.startsAt,
        endsAt: endsAt ?? this.endsAt,
        type: type ?? this.type,
        status: status ?? this.status,
        prices: prices ?? this.prices,
        customerGroups: customerGroups ?? this.customerGroups,
        includesTax: includesTax ?? this.includesTax);
  }

  AdminPostPriceListsPriceListReq copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<String>? description,
      Wrapped<DateTime?>? startsAt,
      Wrapped<DateTime?>? endsAt,
      Wrapped<enums.AdminPostPriceListsPriceListReqType>? type,
      Wrapped<enums.AdminPostPriceListsPriceListReqStatus?>? status,
      Wrapped<List<AdminPostPriceListsPriceListReq$Prices$Item>>? prices,
      Wrapped<List<AdminPostPriceListsPriceListReq$CustomerGroups$Item>?>?
          customerGroups,
      Wrapped<bool?>? includesTax}) {
    return AdminPostPriceListsPriceListReq(
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        startsAt: (startsAt != null ? startsAt.value : this.startsAt),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        type: (type != null ? type.value : this.type),
        status: (status != null ? status.value : this.status),
        prices: (prices != null ? prices.value : this.prices),
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductCategoriesCategoryProductsBatchReq {
  const AdminPostProductCategoriesCategoryProductsBatchReq({
    required this.productIds,
  });

  factory AdminPostProductCategoriesCategoryProductsBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductCategoriesCategoryProductsBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductCategoriesCategoryProductsBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductCategoriesCategoryProductsBatchReqToJson(this);

  @JsonKey(name: 'product_ids', includeIfNull: false)
  final List<AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item>
      productIds;
  static const fromJsonFactory =
      _$AdminPostProductCategoriesCategoryProductsBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductCategoriesCategoryProductsBatchReqExtension
    on AdminPostProductCategoriesCategoryProductsBatchReq {
  AdminPostProductCategoriesCategoryProductsBatchReq copyWith(
      {List<AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item>?
          productIds}) {
    return AdminPostProductCategoriesCategoryProductsBatchReq(
        productIds: productIds ?? this.productIds);
  }

  AdminPostProductCategoriesCategoryProductsBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item>>?
          productIds}) {
    return AdminPostProductCategoriesCategoryProductsBatchReq(
        productIds: (productIds != null ? productIds.value : this.productIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductCategoriesCategoryReq {
  const AdminPostProductCategoriesCategoryReq({
    this.name,
    this.description,
    this.handle,
    this.isInternal,
    this.isActive,
    this.parentCategoryId,
    this.rank,
    this.metadata,
  });

  factory AdminPostProductCategoriesCategoryReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductCategoriesCategoryReqFromJson(json);

  static const toJsonFactory = _$AdminPostProductCategoriesCategoryReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductCategoriesCategoryReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(name: 'is_internal', includeIfNull: false)
  final bool? isInternal;
  @JsonKey(name: 'is_active', includeIfNull: false)
  final bool? isActive;
  @JsonKey(
      name: 'parent_category_id', includeIfNull: false, defaultValue: 'default')
  final String? parentCategoryId;
  @JsonKey(name: 'rank', includeIfNull: false)
  final double? rank;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory =
      _$AdminPostProductCategoriesCategoryReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductCategoriesCategoryReqExtension
    on AdminPostProductCategoriesCategoryReq {
  AdminPostProductCategoriesCategoryReq copyWith(
      {String? name,
      String? description,
      String? handle,
      bool? isInternal,
      bool? isActive,
      String? parentCategoryId,
      double? rank,
      Object? metadata}) {
    return AdminPostProductCategoriesCategoryReq(
        name: name ?? this.name,
        description: description ?? this.description,
        handle: handle ?? this.handle,
        isInternal: isInternal ?? this.isInternal,
        isActive: isActive ?? this.isActive,
        parentCategoryId: parentCategoryId ?? this.parentCategoryId,
        rank: rank ?? this.rank,
        metadata: metadata ?? this.metadata);
  }

  AdminPostProductCategoriesCategoryReq copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? description,
      Wrapped<String?>? handle,
      Wrapped<bool?>? isInternal,
      Wrapped<bool?>? isActive,
      Wrapped<String?>? parentCategoryId,
      Wrapped<double?>? rank,
      Wrapped<Object?>? metadata}) {
    return AdminPostProductCategoriesCategoryReq(
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        handle: (handle != null ? handle.value : this.handle),
        isInternal: (isInternal != null ? isInternal.value : this.isInternal),
        isActive: (isActive != null ? isActive.value : this.isActive),
        parentCategoryId: (parentCategoryId != null
            ? parentCategoryId.value
            : this.parentCategoryId),
        rank: (rank != null ? rank.value : this.rank),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductCategoriesReq {
  const AdminPostProductCategoriesReq({
    required this.name,
    this.description,
    this.handle,
    this.isInternal,
    this.isActive,
    this.parentCategoryId,
    this.metadata,
  });

  factory AdminPostProductCategoriesReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostProductCategoriesReqFromJson(json);

  static const toJsonFactory = _$AdminPostProductCategoriesReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostProductCategoriesReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(name: 'is_internal', includeIfNull: false)
  final bool? isInternal;
  @JsonKey(name: 'is_active', includeIfNull: false)
  final bool? isActive;
  @JsonKey(
      name: 'parent_category_id', includeIfNull: false, defaultValue: 'default')
  final String? parentCategoryId;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostProductCategoriesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductCategoriesReqExtension
    on AdminPostProductCategoriesReq {
  AdminPostProductCategoriesReq copyWith(
      {String? name,
      String? description,
      String? handle,
      bool? isInternal,
      bool? isActive,
      String? parentCategoryId,
      Object? metadata}) {
    return AdminPostProductCategoriesReq(
        name: name ?? this.name,
        description: description ?? this.description,
        handle: handle ?? this.handle,
        isInternal: isInternal ?? this.isInternal,
        isActive: isActive ?? this.isActive,
        parentCategoryId: parentCategoryId ?? this.parentCategoryId,
        metadata: metadata ?? this.metadata);
  }

  AdminPostProductCategoriesReq copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<String?>? description,
      Wrapped<String?>? handle,
      Wrapped<bool?>? isInternal,
      Wrapped<bool?>? isActive,
      Wrapped<String?>? parentCategoryId,
      Wrapped<Object?>? metadata}) {
    return AdminPostProductCategoriesReq(
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        handle: (handle != null ? handle.value : this.handle),
        isInternal: (isInternal != null ? isInternal.value : this.isInternal),
        isActive: (isActive != null ? isActive.value : this.isActive),
        parentCategoryId: (parentCategoryId != null
            ? parentCategoryId.value
            : this.parentCategoryId),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductMetadataReq {
  const AdminPostProductsProductMetadataReq({
    required this.key,
    required this.value,
  });

  factory AdminPostProductsProductMetadataReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductMetadataReqFromJson(json);

  static const toJsonFactory = _$AdminPostProductsProductMetadataReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductMetadataReqToJson(this);

  @JsonKey(name: 'key', includeIfNull: false, defaultValue: 'default')
  final String key;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory = _$AdminPostProductsProductMetadataReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductMetadataReqExtension
    on AdminPostProductsProductMetadataReq {
  AdminPostProductsProductMetadataReq copyWith({String? key, String? value}) {
    return AdminPostProductsProductMetadataReq(
        key: key ?? this.key, value: value ?? this.value);
  }

  AdminPostProductsProductMetadataReq copyWithWrapped(
      {Wrapped<String>? key, Wrapped<String>? value}) {
    return AdminPostProductsProductMetadataReq(
        key: (key != null ? key.value : this.key),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductOptionsOption {
  const AdminPostProductsProductOptionsOption({
    required this.title,
  });

  factory AdminPostProductsProductOptionsOption.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductOptionsOptionFromJson(json);

  static const toJsonFactory = _$AdminPostProductsProductOptionsOptionToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductOptionsOptionToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  static const fromJsonFactory =
      _$AdminPostProductsProductOptionsOptionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductOptionsOptionExtension
    on AdminPostProductsProductOptionsOption {
  AdminPostProductsProductOptionsOption copyWith({String? title}) {
    return AdminPostProductsProductOptionsOption(title: title ?? this.title);
  }

  AdminPostProductsProductOptionsOption copyWithWrapped(
      {Wrapped<String>? title}) {
    return AdminPostProductsProductOptionsOption(
        title: (title != null ? title.value : this.title));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductOptionsReq {
  const AdminPostProductsProductOptionsReq({
    required this.title,
  });

  factory AdminPostProductsProductOptionsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductOptionsReqFromJson(json);

  static const toJsonFactory = _$AdminPostProductsProductOptionsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductOptionsReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  static const fromJsonFactory = _$AdminPostProductsProductOptionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductOptionsReqExtension
    on AdminPostProductsProductOptionsReq {
  AdminPostProductsProductOptionsReq copyWith({String? title}) {
    return AdminPostProductsProductOptionsReq(title: title ?? this.title);
  }

  AdminPostProductsProductOptionsReq copyWithWrapped({Wrapped<String>? title}) {
    return AdminPostProductsProductOptionsReq(
        title: (title != null ? title.value : this.title));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductReq {
  const AdminPostProductsProductReq({
    this.title,
    this.subtitle,
    this.description,
    this.discountable,
    this.images,
    this.thumbnail,
    this.handle,
    this.status,
    this.type,
    this.collectionId,
    this.tags,
    this.salesChannels,
    this.categories,
    this.variants,
    this.weight,
    this.length,
    this.height,
    this.width,
    this.hsCode,
    this.originCountry,
    this.midCode,
    this.material,
    this.metadata,
  });

  factory AdminPostProductsProductReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostProductsProductReqFromJson(json);

  static const toJsonFactory = _$AdminPostProductsProductReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostProductsProductReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'subtitle', includeIfNull: false, defaultValue: 'default')
  final String? subtitle;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'discountable', includeIfNull: false)
  final bool? discountable;
  @JsonKey(name: 'images', includeIfNull: false, defaultValue: <String>[])
  final List<String>? images;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: adminPostProductsProductReqStatusNullableToJson,
    fromJson: adminPostProductsProductReqStatusNullableFromJson,
  )
  final enums.AdminPostProductsProductReqStatus? status;
  @JsonKey(name: 'type', includeIfNull: false)
  final AdminPostProductsProductReq$Type$? type;
  @JsonKey(name: 'collection_id', includeIfNull: false, defaultValue: 'default')
  final String? collectionId;
  @JsonKey(name: 'tags', includeIfNull: false)
  final List<AdminPostProductsProductReq$Tags$Item>? tags;
  @JsonKey(name: 'sales_channels', includeIfNull: false)
  final List<AdminPostProductsProductReq$SalesChannels$Item>? salesChannels;
  @JsonKey(name: 'categories', includeIfNull: false)
  final List<AdminPostProductsProductReq$Categories$Item>? categories;
  @JsonKey(name: 'variants', includeIfNull: false)
  final List<AdminPostProductsProductReq$Variants$Item>? variants;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostProductsProductReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductReqExtension on AdminPostProductsProductReq {
  AdminPostProductsProductReq copyWith(
      {String? title,
      String? subtitle,
      String? description,
      bool? discountable,
      List<String>? images,
      String? thumbnail,
      String? handle,
      enums.AdminPostProductsProductReqStatus? status,
      AdminPostProductsProductReq$Type$? type,
      String? collectionId,
      List<AdminPostProductsProductReq$Tags$Item>? tags,
      List<AdminPostProductsProductReq$SalesChannels$Item>? salesChannels,
      List<AdminPostProductsProductReq$Categories$Item>? categories,
      List<AdminPostProductsProductReq$Variants$Item>? variants,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? material,
      Object? metadata}) {
    return AdminPostProductsProductReq(
        title: title ?? this.title,
        subtitle: subtitle ?? this.subtitle,
        description: description ?? this.description,
        discountable: discountable ?? this.discountable,
        images: images ?? this.images,
        thumbnail: thumbnail ?? this.thumbnail,
        handle: handle ?? this.handle,
        status: status ?? this.status,
        type: type ?? this.type,
        collectionId: collectionId ?? this.collectionId,
        tags: tags ?? this.tags,
        salesChannels: salesChannels ?? this.salesChannels,
        categories: categories ?? this.categories,
        variants: variants ?? this.variants,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        metadata: metadata ?? this.metadata);
  }

  AdminPostProductsProductReq copyWithWrapped(
      {Wrapped<String?>? title,
      Wrapped<String?>? subtitle,
      Wrapped<String?>? description,
      Wrapped<bool?>? discountable,
      Wrapped<List<String>?>? images,
      Wrapped<String?>? thumbnail,
      Wrapped<String?>? handle,
      Wrapped<enums.AdminPostProductsProductReqStatus?>? status,
      Wrapped<AdminPostProductsProductReq$Type$?>? type,
      Wrapped<String?>? collectionId,
      Wrapped<List<AdminPostProductsProductReq$Tags$Item>?>? tags,
      Wrapped<List<AdminPostProductsProductReq$SalesChannels$Item>?>?
          salesChannels,
      Wrapped<List<AdminPostProductsProductReq$Categories$Item>?>? categories,
      Wrapped<List<AdminPostProductsProductReq$Variants$Item>?>? variants,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<Object?>? metadata}) {
    return AdminPostProductsProductReq(
        title: (title != null ? title.value : this.title),
        subtitle: (subtitle != null ? subtitle.value : this.subtitle),
        description:
            (description != null ? description.value : this.description),
        discountable:
            (discountable != null ? discountable.value : this.discountable),
        images: (images != null ? images.value : this.images),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        handle: (handle != null ? handle.value : this.handle),
        status: (status != null ? status.value : this.status),
        type: (type != null ? type.value : this.type),
        collectionId:
            (collectionId != null ? collectionId.value : this.collectionId),
        tags: (tags != null ? tags.value : this.tags),
        salesChannels:
            (salesChannels != null ? salesChannels.value : this.salesChannels),
        categories: (categories != null ? categories.value : this.categories),
        variants: (variants != null ? variants.value : this.variants),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductVariantsReq {
  const AdminPostProductsProductVariantsReq({
    required this.title,
    this.sku,
    this.ean,
    this.upc,
    this.barcode,
    this.hsCode,
    this.inventoryQuantity,
    this.allowBackorder,
    this.manageInventory,
    this.weight,
    this.length,
    this.height,
    this.width,
    this.originCountry,
    this.midCode,
    this.material,
    this.metadata,
    required this.prices,
    required this.options,
  });

  factory AdminPostProductsProductVariantsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductVariantsReqFromJson(json);

  static const toJsonFactory = _$AdminPostProductsProductVariantsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductVariantsReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String? sku;
  @JsonKey(name: 'ean', includeIfNull: false, defaultValue: 'default')
  final String? ean;
  @JsonKey(name: 'upc', includeIfNull: false, defaultValue: 'default')
  final String? upc;
  @JsonKey(name: 'barcode', includeIfNull: false, defaultValue: 'default')
  final String? barcode;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(name: 'inventory_quantity', includeIfNull: false, defaultValue: 36)
  final int? inventoryQuantity;
  @JsonKey(name: 'allow_backorder', includeIfNull: false)
  final bool? allowBackorder;
  @JsonKey(name: 'manage_inventory', includeIfNull: false, defaultValue: true)
  final bool? manageInventory;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'prices', includeIfNull: false)
  final List<AdminPostProductsProductVariantsReq$Prices$Item> prices;
  @JsonKey(name: 'options', includeIfNull: false)
  final List<AdminPostProductsProductVariantsReq$Options$Item> options;
  static const fromJsonFactory = _$AdminPostProductsProductVariantsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductVariantsReqExtension
    on AdminPostProductsProductVariantsReq {
  AdminPostProductsProductVariantsReq copyWith(
      {String? title,
      String? sku,
      String? ean,
      String? upc,
      String? barcode,
      String? hsCode,
      int? inventoryQuantity,
      bool? allowBackorder,
      bool? manageInventory,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? originCountry,
      String? midCode,
      String? material,
      Object? metadata,
      List<AdminPostProductsProductVariantsReq$Prices$Item>? prices,
      List<AdminPostProductsProductVariantsReq$Options$Item>? options}) {
    return AdminPostProductsProductVariantsReq(
        title: title ?? this.title,
        sku: sku ?? this.sku,
        ean: ean ?? this.ean,
        upc: upc ?? this.upc,
        barcode: barcode ?? this.barcode,
        hsCode: hsCode ?? this.hsCode,
        inventoryQuantity: inventoryQuantity ?? this.inventoryQuantity,
        allowBackorder: allowBackorder ?? this.allowBackorder,
        manageInventory: manageInventory ?? this.manageInventory,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        metadata: metadata ?? this.metadata,
        prices: prices ?? this.prices,
        options: options ?? this.options);
  }

  AdminPostProductsProductVariantsReq copyWithWrapped(
      {Wrapped<String>? title,
      Wrapped<String?>? sku,
      Wrapped<String?>? ean,
      Wrapped<String?>? upc,
      Wrapped<String?>? barcode,
      Wrapped<String?>? hsCode,
      Wrapped<int?>? inventoryQuantity,
      Wrapped<bool?>? allowBackorder,
      Wrapped<bool?>? manageInventory,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<Object?>? metadata,
      Wrapped<List<AdminPostProductsProductVariantsReq$Prices$Item>>? prices,
      Wrapped<List<AdminPostProductsProductVariantsReq$Options$Item>>?
          options}) {
    return AdminPostProductsProductVariantsReq(
        title: (title != null ? title.value : this.title),
        sku: (sku != null ? sku.value : this.sku),
        ean: (ean != null ? ean.value : this.ean),
        upc: (upc != null ? upc.value : this.upc),
        barcode: (barcode != null ? barcode.value : this.barcode),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        inventoryQuantity: (inventoryQuantity != null
            ? inventoryQuantity.value
            : this.inventoryQuantity),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder),
        manageInventory: (manageInventory != null
            ? manageInventory.value
            : this.manageInventory),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        metadata: (metadata != null ? metadata.value : this.metadata),
        prices: (prices != null ? prices.value : this.prices),
        options: (options != null ? options.value : this.options));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductVariantsVariantReq {
  const AdminPostProductsProductVariantsVariantReq({
    this.title,
    this.sku,
    this.ean,
    this.upc,
    this.barcode,
    this.hsCode,
    this.inventoryQuantity,
    this.allowBackorder,
    this.manageInventory,
    this.weight,
    this.length,
    this.height,
    this.width,
    this.originCountry,
    this.midCode,
    this.material,
    this.metadata,
    this.prices,
    this.options,
  });

  factory AdminPostProductsProductVariantsVariantReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductVariantsVariantReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductVariantsVariantReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductVariantsVariantReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String? sku;
  @JsonKey(name: 'ean', includeIfNull: false, defaultValue: 'default')
  final String? ean;
  @JsonKey(name: 'upc', includeIfNull: false, defaultValue: 'default')
  final String? upc;
  @JsonKey(name: 'barcode', includeIfNull: false, defaultValue: 'default')
  final String? barcode;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(name: 'inventory_quantity', includeIfNull: false, defaultValue: 36)
  final int? inventoryQuantity;
  @JsonKey(name: 'allow_backorder', includeIfNull: false)
  final bool? allowBackorder;
  @JsonKey(name: 'manage_inventory', includeIfNull: false)
  final bool? manageInventory;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'prices', includeIfNull: false)
  final List<AdminPostProductsProductVariantsVariantReq$Prices$Item>? prices;
  @JsonKey(name: 'options', includeIfNull: false)
  final List<AdminPostProductsProductVariantsVariantReq$Options$Item>? options;
  static const fromJsonFactory =
      _$AdminPostProductsProductVariantsVariantReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductVariantsVariantReqExtension
    on AdminPostProductsProductVariantsVariantReq {
  AdminPostProductsProductVariantsVariantReq copyWith(
      {String? title,
      String? sku,
      String? ean,
      String? upc,
      String? barcode,
      String? hsCode,
      int? inventoryQuantity,
      bool? allowBackorder,
      bool? manageInventory,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? originCountry,
      String? midCode,
      String? material,
      Object? metadata,
      List<AdminPostProductsProductVariantsVariantReq$Prices$Item>? prices,
      List<AdminPostProductsProductVariantsVariantReq$Options$Item>? options}) {
    return AdminPostProductsProductVariantsVariantReq(
        title: title ?? this.title,
        sku: sku ?? this.sku,
        ean: ean ?? this.ean,
        upc: upc ?? this.upc,
        barcode: barcode ?? this.barcode,
        hsCode: hsCode ?? this.hsCode,
        inventoryQuantity: inventoryQuantity ?? this.inventoryQuantity,
        allowBackorder: allowBackorder ?? this.allowBackorder,
        manageInventory: manageInventory ?? this.manageInventory,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        metadata: metadata ?? this.metadata,
        prices: prices ?? this.prices,
        options: options ?? this.options);
  }

  AdminPostProductsProductVariantsVariantReq copyWithWrapped(
      {Wrapped<String?>? title,
      Wrapped<String?>? sku,
      Wrapped<String?>? ean,
      Wrapped<String?>? upc,
      Wrapped<String?>? barcode,
      Wrapped<String?>? hsCode,
      Wrapped<int?>? inventoryQuantity,
      Wrapped<bool?>? allowBackorder,
      Wrapped<bool?>? manageInventory,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<Object?>? metadata,
      Wrapped<List<AdminPostProductsProductVariantsVariantReq$Prices$Item>?>?
          prices,
      Wrapped<List<AdminPostProductsProductVariantsVariantReq$Options$Item>?>?
          options}) {
    return AdminPostProductsProductVariantsVariantReq(
        title: (title != null ? title.value : this.title),
        sku: (sku != null ? sku.value : this.sku),
        ean: (ean != null ? ean.value : this.ean),
        upc: (upc != null ? upc.value : this.upc),
        barcode: (barcode != null ? barcode.value : this.barcode),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        inventoryQuantity: (inventoryQuantity != null
            ? inventoryQuantity.value
            : this.inventoryQuantity),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder),
        manageInventory: (manageInventory != null
            ? manageInventory.value
            : this.manageInventory),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        metadata: (metadata != null ? metadata.value : this.metadata),
        prices: (prices != null ? prices.value : this.prices),
        options: (options != null ? options.value : this.options));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq {
  const AdminPostProductsReq({
    required this.title,
    this.subtitle,
    this.description,
    this.isGiftcard,
    this.discountable,
    this.images,
    this.thumbnail,
    this.handle,
    this.status,
    this.type,
    this.collectionId,
    this.tags,
    this.salesChannels,
    this.categories,
    this.options,
    this.variants,
    this.weight,
    this.length,
    this.height,
    this.width,
    this.hsCode,
    this.originCountry,
    this.midCode,
    this.material,
    this.metadata,
  });

  factory AdminPostProductsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostProductsReqFromJson(json);

  static const toJsonFactory = _$AdminPostProductsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostProductsReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'subtitle', includeIfNull: false, defaultValue: 'default')
  final String? subtitle;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'is_giftcard', includeIfNull: false, defaultValue: false)
  final bool? isGiftcard;
  @JsonKey(name: 'discountable', includeIfNull: false, defaultValue: true)
  final bool? discountable;
  @JsonKey(name: 'images', includeIfNull: false, defaultValue: <String>[])
  final List<String>? images;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: adminPostProductsReqStatusNullableToJson,
    fromJson: adminPostProductsReqStatusStatusNullableFromJson,
  )
  final enums.AdminPostProductsReqStatus? status;
  static enums.AdminPostProductsReqStatus?
      adminPostProductsReqStatusStatusNullableFromJson(Object? value) =>
          adminPostProductsReqStatusNullableFromJson(
              value, enums.AdminPostProductsReqStatus.draft);

  @JsonKey(name: 'type', includeIfNull: false)
  final AdminPostProductsReq$Type$? type;
  @JsonKey(name: 'collection_id', includeIfNull: false, defaultValue: 'default')
  final String? collectionId;
  @JsonKey(name: 'tags', includeIfNull: false)
  final List<AdminPostProductsReq$Tags$Item>? tags;
  @JsonKey(name: 'sales_channels', includeIfNull: false)
  final List<AdminPostProductsReq$SalesChannels$Item>? salesChannels;
  @JsonKey(name: 'categories', includeIfNull: false)
  final List<AdminPostProductsReq$Categories$Item>? categories;
  @JsonKey(name: 'options', includeIfNull: false)
  final List<AdminPostProductsReq$Options$Item>? options;
  @JsonKey(name: 'variants', includeIfNull: false)
  final List<AdminPostProductsReq$Variants$Item>? variants;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostProductsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReqExtension on AdminPostProductsReq {
  AdminPostProductsReq copyWith(
      {String? title,
      String? subtitle,
      String? description,
      bool? isGiftcard,
      bool? discountable,
      List<String>? images,
      String? thumbnail,
      String? handle,
      enums.AdminPostProductsReqStatus? status,
      AdminPostProductsReq$Type$? type,
      String? collectionId,
      List<AdminPostProductsReq$Tags$Item>? tags,
      List<AdminPostProductsReq$SalesChannels$Item>? salesChannels,
      List<AdminPostProductsReq$Categories$Item>? categories,
      List<AdminPostProductsReq$Options$Item>? options,
      List<AdminPostProductsReq$Variants$Item>? variants,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? material,
      Object? metadata}) {
    return AdminPostProductsReq(
        title: title ?? this.title,
        subtitle: subtitle ?? this.subtitle,
        description: description ?? this.description,
        isGiftcard: isGiftcard ?? this.isGiftcard,
        discountable: discountable ?? this.discountable,
        images: images ?? this.images,
        thumbnail: thumbnail ?? this.thumbnail,
        handle: handle ?? this.handle,
        status: status ?? this.status,
        type: type ?? this.type,
        collectionId: collectionId ?? this.collectionId,
        tags: tags ?? this.tags,
        salesChannels: salesChannels ?? this.salesChannels,
        categories: categories ?? this.categories,
        options: options ?? this.options,
        variants: variants ?? this.variants,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        metadata: metadata ?? this.metadata);
  }

  AdminPostProductsReq copyWithWrapped(
      {Wrapped<String>? title,
      Wrapped<String?>? subtitle,
      Wrapped<String?>? description,
      Wrapped<bool?>? isGiftcard,
      Wrapped<bool?>? discountable,
      Wrapped<List<String>?>? images,
      Wrapped<String?>? thumbnail,
      Wrapped<String?>? handle,
      Wrapped<enums.AdminPostProductsReqStatus?>? status,
      Wrapped<AdminPostProductsReq$Type$?>? type,
      Wrapped<String?>? collectionId,
      Wrapped<List<AdminPostProductsReq$Tags$Item>?>? tags,
      Wrapped<List<AdminPostProductsReq$SalesChannels$Item>?>? salesChannels,
      Wrapped<List<AdminPostProductsReq$Categories$Item>?>? categories,
      Wrapped<List<AdminPostProductsReq$Options$Item>?>? options,
      Wrapped<List<AdminPostProductsReq$Variants$Item>?>? variants,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<Object?>? metadata}) {
    return AdminPostProductsReq(
        title: (title != null ? title.value : this.title),
        subtitle: (subtitle != null ? subtitle.value : this.subtitle),
        description:
            (description != null ? description.value : this.description),
        isGiftcard: (isGiftcard != null ? isGiftcard.value : this.isGiftcard),
        discountable:
            (discountable != null ? discountable.value : this.discountable),
        images: (images != null ? images.value : this.images),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        handle: (handle != null ? handle.value : this.handle),
        status: (status != null ? status.value : this.status),
        type: (type != null ? type.value : this.type),
        collectionId:
            (collectionId != null ? collectionId.value : this.collectionId),
        tags: (tags != null ? tags.value : this.tags),
        salesChannels:
            (salesChannels != null ? salesChannels.value : this.salesChannels),
        categories: (categories != null ? categories.value : this.categories),
        options: (options != null ? options.value : this.options),
        variants: (variants != null ? variants.value : this.variants),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsToCollectionReq {
  const AdminPostProductsToCollectionReq({
    required this.productIds,
  });

  factory AdminPostProductsToCollectionReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsToCollectionReqFromJson(json);

  static const toJsonFactory = _$AdminPostProductsToCollectionReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsToCollectionReqToJson(this);

  @JsonKey(name: 'product_ids', includeIfNull: false, defaultValue: <String>[])
  final List<String> productIds;
  static const fromJsonFactory = _$AdminPostProductsToCollectionReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsToCollectionReqExtension
    on AdminPostProductsToCollectionReq {
  AdminPostProductsToCollectionReq copyWith({List<String>? productIds}) {
    return AdminPostProductsToCollectionReq(
        productIds: productIds ?? this.productIds);
  }

  AdminPostProductsToCollectionReq copyWithWrapped(
      {Wrapped<List<String>>? productIds}) {
    return AdminPostProductsToCollectionReq(
        productIds: (productIds != null ? productIds.value : this.productIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPublishableApiKeySalesChannelsBatchReq {
  const AdminPostPublishableApiKeySalesChannelsBatchReq({
    required this.salesChannelIds,
  });

  factory AdminPostPublishableApiKeySalesChannelsBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPublishableApiKeySalesChannelsBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostPublishableApiKeySalesChannelsBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPublishableApiKeySalesChannelsBatchReqToJson(this);

  @JsonKey(name: 'sales_channel_ids', includeIfNull: false)
  final List<
          AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item>
      salesChannelIds;
  static const fromJsonFactory =
      _$AdminPostPublishableApiKeySalesChannelsBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPublishableApiKeySalesChannelsBatchReqExtension
    on AdminPostPublishableApiKeySalesChannelsBatchReq {
  AdminPostPublishableApiKeySalesChannelsBatchReq copyWith(
      {List<AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item>?
          salesChannelIds}) {
    return AdminPostPublishableApiKeySalesChannelsBatchReq(
        salesChannelIds: salesChannelIds ?? this.salesChannelIds);
  }

  AdminPostPublishableApiKeySalesChannelsBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item>>?
          salesChannelIds}) {
    return AdminPostPublishableApiKeySalesChannelsBatchReq(
        salesChannelIds: (salesChannelIds != null
            ? salesChannelIds.value
            : this.salesChannelIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPublishableApiKeysPublishableApiKeyReq {
  const AdminPostPublishableApiKeysPublishableApiKeyReq({
    this.title,
  });

  factory AdminPostPublishableApiKeysPublishableApiKeyReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPublishableApiKeysPublishableApiKeyReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostPublishableApiKeysPublishableApiKeyReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPublishableApiKeysPublishableApiKeyReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  static const fromJsonFactory =
      _$AdminPostPublishableApiKeysPublishableApiKeyReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPublishableApiKeysPublishableApiKeyReqExtension
    on AdminPostPublishableApiKeysPublishableApiKeyReq {
  AdminPostPublishableApiKeysPublishableApiKeyReq copyWith({String? title}) {
    return AdminPostPublishableApiKeysPublishableApiKeyReq(
        title: title ?? this.title);
  }

  AdminPostPublishableApiKeysPublishableApiKeyReq copyWithWrapped(
      {Wrapped<String?>? title}) {
    return AdminPostPublishableApiKeysPublishableApiKeyReq(
        title: (title != null ? title.value : this.title));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPublishableApiKeysReq {
  const AdminPostPublishableApiKeysReq({
    required this.title,
  });

  factory AdminPostPublishableApiKeysReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostPublishableApiKeysReqFromJson(json);

  static const toJsonFactory = _$AdminPostPublishableApiKeysReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostPublishableApiKeysReqToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  static const fromJsonFactory = _$AdminPostPublishableApiKeysReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPublishableApiKeysReqExtension
    on AdminPostPublishableApiKeysReq {
  AdminPostPublishableApiKeysReq copyWith({String? title}) {
    return AdminPostPublishableApiKeysReq(title: title ?? this.title);
  }

  AdminPostPublishableApiKeysReq copyWithWrapped({Wrapped<String>? title}) {
    return AdminPostPublishableApiKeysReq(
        title: (title != null ? title.value : this.title));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostRegionsRegionCountriesReq {
  const AdminPostRegionsRegionCountriesReq({
    required this.countryCode,
  });

  factory AdminPostRegionsRegionCountriesReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostRegionsRegionCountriesReqFromJson(json);

  static const toJsonFactory = _$AdminPostRegionsRegionCountriesReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostRegionsRegionCountriesReqToJson(this);

  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String countryCode;
  static const fromJsonFactory = _$AdminPostRegionsRegionCountriesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostRegionsRegionCountriesReqExtension
    on AdminPostRegionsRegionCountriesReq {
  AdminPostRegionsRegionCountriesReq copyWith({String? countryCode}) {
    return AdminPostRegionsRegionCountriesReq(
        countryCode: countryCode ?? this.countryCode);
  }

  AdminPostRegionsRegionCountriesReq copyWithWrapped(
      {Wrapped<String>? countryCode}) {
    return AdminPostRegionsRegionCountriesReq(
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostRegionsRegionFulfillmentProvidersReq {
  const AdminPostRegionsRegionFulfillmentProvidersReq({
    required this.providerId,
  });

  factory AdminPostRegionsRegionFulfillmentProvidersReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostRegionsRegionFulfillmentProvidersReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostRegionsRegionFulfillmentProvidersReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostRegionsRegionFulfillmentProvidersReqToJson(this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  static const fromJsonFactory =
      _$AdminPostRegionsRegionFulfillmentProvidersReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostRegionsRegionFulfillmentProvidersReqExtension
    on AdminPostRegionsRegionFulfillmentProvidersReq {
  AdminPostRegionsRegionFulfillmentProvidersReq copyWith({String? providerId}) {
    return AdminPostRegionsRegionFulfillmentProvidersReq(
        providerId: providerId ?? this.providerId);
  }

  AdminPostRegionsRegionFulfillmentProvidersReq copyWithWrapped(
      {Wrapped<String>? providerId}) {
    return AdminPostRegionsRegionFulfillmentProvidersReq(
        providerId: (providerId != null ? providerId.value : this.providerId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostRegionsRegionPaymentProvidersReq {
  const AdminPostRegionsRegionPaymentProvidersReq({
    required this.providerId,
  });

  factory AdminPostRegionsRegionPaymentProvidersReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostRegionsRegionPaymentProvidersReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostRegionsRegionPaymentProvidersReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostRegionsRegionPaymentProvidersReqToJson(this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  static const fromJsonFactory =
      _$AdminPostRegionsRegionPaymentProvidersReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostRegionsRegionPaymentProvidersReqExtension
    on AdminPostRegionsRegionPaymentProvidersReq {
  AdminPostRegionsRegionPaymentProvidersReq copyWith({String? providerId}) {
    return AdminPostRegionsRegionPaymentProvidersReq(
        providerId: providerId ?? this.providerId);
  }

  AdminPostRegionsRegionPaymentProvidersReq copyWithWrapped(
      {Wrapped<String>? providerId}) {
    return AdminPostRegionsRegionPaymentProvidersReq(
        providerId: (providerId != null ? providerId.value : this.providerId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostRegionsRegionReq {
  const AdminPostRegionsRegionReq({
    this.name,
    this.currencyCode,
    this.automaticTaxes,
    this.giftCardsTaxable,
    this.taxProviderId,
    this.taxCode,
    this.taxRate,
    this.includesTax,
    this.paymentProviders,
    this.fulfillmentProviders,
    this.countries,
  });

  factory AdminPostRegionsRegionReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostRegionsRegionReqFromJson(json);

  static const toJsonFactory = _$AdminPostRegionsRegionReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostRegionsRegionReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String? currencyCode;
  @JsonKey(name: 'automatic_taxes', includeIfNull: false)
  final bool? automaticTaxes;
  @JsonKey(name: 'gift_cards_taxable', includeIfNull: false)
  final bool? giftCardsTaxable;
  @JsonKey(
      name: 'tax_provider_id', includeIfNull: false, defaultValue: 'default')
  final String? taxProviderId;
  @JsonKey(name: 'tax_code', includeIfNull: false, defaultValue: 'default')
  final String? taxCode;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final double? taxRate;
  @JsonKey(name: 'includes_tax', includeIfNull: false)
  final bool? includesTax;
  @JsonKey(
      name: 'payment_providers', includeIfNull: false, defaultValue: <String>[])
  final List<String>? paymentProviders;
  @JsonKey(
      name: 'fulfillment_providers',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? fulfillmentProviders;
  @JsonKey(name: 'countries', includeIfNull: false, defaultValue: <String>[])
  final List<String>? countries;
  static const fromJsonFactory = _$AdminPostRegionsRegionReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostRegionsRegionReqExtension on AdminPostRegionsRegionReq {
  AdminPostRegionsRegionReq copyWith(
      {String? name,
      String? currencyCode,
      bool? automaticTaxes,
      bool? giftCardsTaxable,
      String? taxProviderId,
      String? taxCode,
      double? taxRate,
      bool? includesTax,
      List<String>? paymentProviders,
      List<String>? fulfillmentProviders,
      List<String>? countries}) {
    return AdminPostRegionsRegionReq(
        name: name ?? this.name,
        currencyCode: currencyCode ?? this.currencyCode,
        automaticTaxes: automaticTaxes ?? this.automaticTaxes,
        giftCardsTaxable: giftCardsTaxable ?? this.giftCardsTaxable,
        taxProviderId: taxProviderId ?? this.taxProviderId,
        taxCode: taxCode ?? this.taxCode,
        taxRate: taxRate ?? this.taxRate,
        includesTax: includesTax ?? this.includesTax,
        paymentProviders: paymentProviders ?? this.paymentProviders,
        fulfillmentProviders: fulfillmentProviders ?? this.fulfillmentProviders,
        countries: countries ?? this.countries);
  }

  AdminPostRegionsRegionReq copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? currencyCode,
      Wrapped<bool?>? automaticTaxes,
      Wrapped<bool?>? giftCardsTaxable,
      Wrapped<String?>? taxProviderId,
      Wrapped<String?>? taxCode,
      Wrapped<double?>? taxRate,
      Wrapped<bool?>? includesTax,
      Wrapped<List<String>?>? paymentProviders,
      Wrapped<List<String>?>? fulfillmentProviders,
      Wrapped<List<String>?>? countries}) {
    return AdminPostRegionsRegionReq(
        name: (name != null ? name.value : this.name),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        automaticTaxes: (automaticTaxes != null
            ? automaticTaxes.value
            : this.automaticTaxes),
        giftCardsTaxable: (giftCardsTaxable != null
            ? giftCardsTaxable.value
            : this.giftCardsTaxable),
        taxProviderId:
            (taxProviderId != null ? taxProviderId.value : this.taxProviderId),
        taxCode: (taxCode != null ? taxCode.value : this.taxCode),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax),
        paymentProviders: (paymentProviders != null
            ? paymentProviders.value
            : this.paymentProviders),
        fulfillmentProviders: (fulfillmentProviders != null
            ? fulfillmentProviders.value
            : this.fulfillmentProviders),
        countries: (countries != null ? countries.value : this.countries));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostRegionsReq {
  const AdminPostRegionsReq({
    required this.name,
    required this.currencyCode,
    this.taxCode,
    required this.taxRate,
    required this.paymentProviders,
    required this.fulfillmentProviders,
    required this.countries,
    this.includesTax,
  });

  factory AdminPostRegionsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostRegionsReqFromJson(json);

  static const toJsonFactory = _$AdminPostRegionsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostRegionsReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String currencyCode;
  @JsonKey(name: 'tax_code', includeIfNull: false, defaultValue: 'default')
  final String? taxCode;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final double taxRate;
  @JsonKey(
      name: 'payment_providers', includeIfNull: false, defaultValue: <String>[])
  final List<String> paymentProviders;
  @JsonKey(
      name: 'fulfillment_providers',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String> fulfillmentProviders;
  @JsonKey(name: 'countries', includeIfNull: false, defaultValue: <String>[])
  final List<String> countries;
  @JsonKey(name: 'includes_tax', includeIfNull: false)
  final bool? includesTax;
  static const fromJsonFactory = _$AdminPostRegionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostRegionsReqExtension on AdminPostRegionsReq {
  AdminPostRegionsReq copyWith(
      {String? name,
      String? currencyCode,
      String? taxCode,
      double? taxRate,
      List<String>? paymentProviders,
      List<String>? fulfillmentProviders,
      List<String>? countries,
      bool? includesTax}) {
    return AdminPostRegionsReq(
        name: name ?? this.name,
        currencyCode: currencyCode ?? this.currencyCode,
        taxCode: taxCode ?? this.taxCode,
        taxRate: taxRate ?? this.taxRate,
        paymentProviders: paymentProviders ?? this.paymentProviders,
        fulfillmentProviders: fulfillmentProviders ?? this.fulfillmentProviders,
        countries: countries ?? this.countries,
        includesTax: includesTax ?? this.includesTax);
  }

  AdminPostRegionsReq copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<String>? currencyCode,
      Wrapped<String?>? taxCode,
      Wrapped<double>? taxRate,
      Wrapped<List<String>>? paymentProviders,
      Wrapped<List<String>>? fulfillmentProviders,
      Wrapped<List<String>>? countries,
      Wrapped<bool?>? includesTax}) {
    return AdminPostRegionsReq(
        name: (name != null ? name.value : this.name),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        taxCode: (taxCode != null ? taxCode.value : this.taxCode),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate),
        paymentProviders: (paymentProviders != null
            ? paymentProviders.value
            : this.paymentProviders),
        fulfillmentProviders: (fulfillmentProviders != null
            ? fulfillmentProviders.value
            : this.fulfillmentProviders),
        countries: (countries != null ? countries.value : this.countries),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostReservationsReq {
  const AdminPostReservationsReq({
    this.lineItemId,
    required this.locationId,
    required this.inventoryItemId,
    required this.quantity,
    this.description,
    this.metadata,
  });

  factory AdminPostReservationsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostReservationsReqFromJson(json);

  static const toJsonFactory = _$AdminPostReservationsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostReservationsReqToJson(this);

  @JsonKey(name: 'line_item_id', includeIfNull: false, defaultValue: 'default')
  final String? lineItemId;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  @JsonKey(
      name: 'inventory_item_id', includeIfNull: false, defaultValue: 'default')
  final String inventoryItemId;
  @JsonKey(name: 'quantity', includeIfNull: false)
  final double quantity;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostReservationsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostReservationsReqExtension on AdminPostReservationsReq {
  AdminPostReservationsReq copyWith(
      {String? lineItemId,
      String? locationId,
      String? inventoryItemId,
      double? quantity,
      String? description,
      Object? metadata}) {
    return AdminPostReservationsReq(
        lineItemId: lineItemId ?? this.lineItemId,
        locationId: locationId ?? this.locationId,
        inventoryItemId: inventoryItemId ?? this.inventoryItemId,
        quantity: quantity ?? this.quantity,
        description: description ?? this.description,
        metadata: metadata ?? this.metadata);
  }

  AdminPostReservationsReq copyWithWrapped(
      {Wrapped<String?>? lineItemId,
      Wrapped<String>? locationId,
      Wrapped<String>? inventoryItemId,
      Wrapped<double>? quantity,
      Wrapped<String?>? description,
      Wrapped<Object?>? metadata}) {
    return AdminPostReservationsReq(
        lineItemId: (lineItemId != null ? lineItemId.value : this.lineItemId),
        locationId: (locationId != null ? locationId.value : this.locationId),
        inventoryItemId: (inventoryItemId != null
            ? inventoryItemId.value
            : this.inventoryItemId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        description:
            (description != null ? description.value : this.description),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostReservationsReservationReq {
  const AdminPostReservationsReservationReq({
    this.locationId,
    this.quantity,
    this.description,
    this.metadata,
  });

  factory AdminPostReservationsReservationReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostReservationsReservationReqFromJson(json);

  static const toJsonFactory = _$AdminPostReservationsReservationReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostReservationsReservationReqToJson(this);

  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String? locationId;
  @JsonKey(name: 'quantity', includeIfNull: false)
  final double? quantity;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostReservationsReservationReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostReservationsReservationReqExtension
    on AdminPostReservationsReservationReq {
  AdminPostReservationsReservationReq copyWith(
      {String? locationId,
      double? quantity,
      String? description,
      Object? metadata}) {
    return AdminPostReservationsReservationReq(
        locationId: locationId ?? this.locationId,
        quantity: quantity ?? this.quantity,
        description: description ?? this.description,
        metadata: metadata ?? this.metadata);
  }

  AdminPostReservationsReservationReq copyWithWrapped(
      {Wrapped<String?>? locationId,
      Wrapped<double?>? quantity,
      Wrapped<String?>? description,
      Wrapped<Object?>? metadata}) {
    return AdminPostReservationsReservationReq(
        locationId: (locationId != null ? locationId.value : this.locationId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        description:
            (description != null ? description.value : this.description),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostReturnReasonsReasonReq {
  const AdminPostReturnReasonsReasonReq({
    this.label,
    this.value,
    this.description,
    this.metadata,
  });

  factory AdminPostReturnReasonsReasonReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostReturnReasonsReasonReqFromJson(json);

  static const toJsonFactory = _$AdminPostReturnReasonsReasonReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostReturnReasonsReasonReqToJson(this);

  @JsonKey(name: 'label', includeIfNull: false, defaultValue: 'default')
  final String? label;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String? value;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostReturnReasonsReasonReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostReturnReasonsReasonReqExtension
    on AdminPostReturnReasonsReasonReq {
  AdminPostReturnReasonsReasonReq copyWith(
      {String? label, String? value, String? description, Object? metadata}) {
    return AdminPostReturnReasonsReasonReq(
        label: label ?? this.label,
        value: value ?? this.value,
        description: description ?? this.description,
        metadata: metadata ?? this.metadata);
  }

  AdminPostReturnReasonsReasonReq copyWithWrapped(
      {Wrapped<String?>? label,
      Wrapped<String?>? value,
      Wrapped<String?>? description,
      Wrapped<Object?>? metadata}) {
    return AdminPostReturnReasonsReasonReq(
        label: (label != null ? label.value : this.label),
        value: (value != null ? value.value : this.value),
        description:
            (description != null ? description.value : this.description),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostReturnReasonsReq {
  const AdminPostReturnReasonsReq({
    required this.label,
    required this.value,
    this.parentReturnReasonId,
    this.description,
    this.metadata,
  });

  factory AdminPostReturnReasonsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostReturnReasonsReqFromJson(json);

  static const toJsonFactory = _$AdminPostReturnReasonsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostReturnReasonsReqToJson(this);

  @JsonKey(name: 'label', includeIfNull: false, defaultValue: 'default')
  final String label;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  @JsonKey(
      name: 'parent_return_reason_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? parentReturnReasonId;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostReturnReasonsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostReturnReasonsReqExtension on AdminPostReturnReasonsReq {
  AdminPostReturnReasonsReq copyWith(
      {String? label,
      String? value,
      String? parentReturnReasonId,
      String? description,
      Object? metadata}) {
    return AdminPostReturnReasonsReq(
        label: label ?? this.label,
        value: value ?? this.value,
        parentReturnReasonId: parentReturnReasonId ?? this.parentReturnReasonId,
        description: description ?? this.description,
        metadata: metadata ?? this.metadata);
  }

  AdminPostReturnReasonsReq copyWithWrapped(
      {Wrapped<String>? label,
      Wrapped<String>? value,
      Wrapped<String?>? parentReturnReasonId,
      Wrapped<String?>? description,
      Wrapped<Object?>? metadata}) {
    return AdminPostReturnReasonsReq(
        label: (label != null ? label.value : this.label),
        value: (value != null ? value.value : this.value),
        parentReturnReasonId: (parentReturnReasonId != null
            ? parentReturnReasonId.value
            : this.parentReturnReasonId),
        description:
            (description != null ? description.value : this.description),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostReturnsReturnReceiveReq {
  const AdminPostReturnsReturnReceiveReq({
    required this.items,
    this.refund,
    this.locationId,
  });

  factory AdminPostReturnsReturnReceiveReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostReturnsReturnReceiveReqFromJson(json);

  static const toJsonFactory = _$AdminPostReturnsReturnReceiveReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostReturnsReturnReceiveReqToJson(this);

  @JsonKey(name: 'items', includeIfNull: false)
  final List<AdminPostReturnsReturnReceiveReq$Items$Item> items;
  @JsonKey(name: 'refund', includeIfNull: false)
  final double? refund;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String? locationId;
  static const fromJsonFactory = _$AdminPostReturnsReturnReceiveReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostReturnsReturnReceiveReqExtension
    on AdminPostReturnsReturnReceiveReq {
  AdminPostReturnsReturnReceiveReq copyWith(
      {List<AdminPostReturnsReturnReceiveReq$Items$Item>? items,
      double? refund,
      String? locationId}) {
    return AdminPostReturnsReturnReceiveReq(
        items: items ?? this.items,
        refund: refund ?? this.refund,
        locationId: locationId ?? this.locationId);
  }

  AdminPostReturnsReturnReceiveReq copyWithWrapped(
      {Wrapped<List<AdminPostReturnsReturnReceiveReq$Items$Item>>? items,
      Wrapped<double?>? refund,
      Wrapped<String?>? locationId}) {
    return AdminPostReturnsReturnReceiveReq(
        items: (items != null ? items.value : this.items),
        refund: (refund != null ? refund.value : this.refund),
        locationId: (locationId != null ? locationId.value : this.locationId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostSalesChannelsChannelProductsBatchReq {
  const AdminPostSalesChannelsChannelProductsBatchReq({
    required this.productIds,
  });

  factory AdminPostSalesChannelsChannelProductsBatchReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostSalesChannelsChannelProductsBatchReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostSalesChannelsChannelProductsBatchReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostSalesChannelsChannelProductsBatchReqToJson(this);

  @JsonKey(name: 'product_ids', includeIfNull: false)
  final List<AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item>
      productIds;
  static const fromJsonFactory =
      _$AdminPostSalesChannelsChannelProductsBatchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostSalesChannelsChannelProductsBatchReqExtension
    on AdminPostSalesChannelsChannelProductsBatchReq {
  AdminPostSalesChannelsChannelProductsBatchReq copyWith(
      {List<AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item>?
          productIds}) {
    return AdminPostSalesChannelsChannelProductsBatchReq(
        productIds: productIds ?? this.productIds);
  }

  AdminPostSalesChannelsChannelProductsBatchReq copyWithWrapped(
      {Wrapped<
              List<
                  AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item>>?
          productIds}) {
    return AdminPostSalesChannelsChannelProductsBatchReq(
        productIds: (productIds != null ? productIds.value : this.productIds));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostSalesChannelsChannelStockLocationsReq {
  const AdminPostSalesChannelsChannelStockLocationsReq({
    required this.locationId,
  });

  factory AdminPostSalesChannelsChannelStockLocationsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostSalesChannelsChannelStockLocationsReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostSalesChannelsChannelStockLocationsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostSalesChannelsChannelStockLocationsReqToJson(this);

  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  static const fromJsonFactory =
      _$AdminPostSalesChannelsChannelStockLocationsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostSalesChannelsChannelStockLocationsReqExtension
    on AdminPostSalesChannelsChannelStockLocationsReq {
  AdminPostSalesChannelsChannelStockLocationsReq copyWith(
      {String? locationId}) {
    return AdminPostSalesChannelsChannelStockLocationsReq(
        locationId: locationId ?? this.locationId);
  }

  AdminPostSalesChannelsChannelStockLocationsReq copyWithWrapped(
      {Wrapped<String>? locationId}) {
    return AdminPostSalesChannelsChannelStockLocationsReq(
        locationId: (locationId != null ? locationId.value : this.locationId));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostSalesChannelsReq {
  const AdminPostSalesChannelsReq({
    required this.name,
    this.description,
    this.isDisabled,
  });

  factory AdminPostSalesChannelsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostSalesChannelsReqFromJson(json);

  static const toJsonFactory = _$AdminPostSalesChannelsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostSalesChannelsReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'is_disabled', includeIfNull: false)
  final bool? isDisabled;
  static const fromJsonFactory = _$AdminPostSalesChannelsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostSalesChannelsReqExtension on AdminPostSalesChannelsReq {
  AdminPostSalesChannelsReq copyWith(
      {String? name, String? description, bool? isDisabled}) {
    return AdminPostSalesChannelsReq(
        name: name ?? this.name,
        description: description ?? this.description,
        isDisabled: isDisabled ?? this.isDisabled);
  }

  AdminPostSalesChannelsReq copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<String?>? description,
      Wrapped<bool?>? isDisabled}) {
    return AdminPostSalesChannelsReq(
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostSalesChannelsSalesChannelReq {
  const AdminPostSalesChannelsSalesChannelReq({
    this.name,
    this.description,
    this.isDisabled,
  });

  factory AdminPostSalesChannelsSalesChannelReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostSalesChannelsSalesChannelReqFromJson(json);

  static const toJsonFactory = _$AdminPostSalesChannelsSalesChannelReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostSalesChannelsSalesChannelReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'is_disabled', includeIfNull: false)
  final bool? isDisabled;
  static const fromJsonFactory =
      _$AdminPostSalesChannelsSalesChannelReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostSalesChannelsSalesChannelReqExtension
    on AdminPostSalesChannelsSalesChannelReq {
  AdminPostSalesChannelsSalesChannelReq copyWith(
      {String? name, String? description, bool? isDisabled}) {
    return AdminPostSalesChannelsSalesChannelReq(
        name: name ?? this.name,
        description: description ?? this.description,
        isDisabled: isDisabled ?? this.isDisabled);
  }

  AdminPostSalesChannelsSalesChannelReq copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? description,
      Wrapped<bool?>? isDisabled}) {
    return AdminPostSalesChannelsSalesChannelReq(
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostShippingOptionsOptionReq {
  const AdminPostShippingOptionsOptionReq({
    this.name,
    this.amount,
    this.adminOnly,
    this.metadata,
    required this.requirements,
    this.includesTax,
  });

  factory AdminPostShippingOptionsOptionReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostShippingOptionsOptionReqFromJson(json);

  static const toJsonFactory = _$AdminPostShippingOptionsOptionReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostShippingOptionsOptionReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int? amount;
  @JsonKey(name: 'admin_only', includeIfNull: false)
  final bool? adminOnly;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'requirements', includeIfNull: false)
  final List<AdminPostShippingOptionsOptionReq$Requirements$Item> requirements;
  @JsonKey(name: 'includes_tax', includeIfNull: false)
  final bool? includesTax;
  static const fromJsonFactory = _$AdminPostShippingOptionsOptionReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostShippingOptionsOptionReqExtension
    on AdminPostShippingOptionsOptionReq {
  AdminPostShippingOptionsOptionReq copyWith(
      {String? name,
      int? amount,
      bool? adminOnly,
      Object? metadata,
      List<AdminPostShippingOptionsOptionReq$Requirements$Item>? requirements,
      bool? includesTax}) {
    return AdminPostShippingOptionsOptionReq(
        name: name ?? this.name,
        amount: amount ?? this.amount,
        adminOnly: adminOnly ?? this.adminOnly,
        metadata: metadata ?? this.metadata,
        requirements: requirements ?? this.requirements,
        includesTax: includesTax ?? this.includesTax);
  }

  AdminPostShippingOptionsOptionReq copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<int?>? amount,
      Wrapped<bool?>? adminOnly,
      Wrapped<Object?>? metadata,
      Wrapped<List<AdminPostShippingOptionsOptionReq$Requirements$Item>>?
          requirements,
      Wrapped<bool?>? includesTax}) {
    return AdminPostShippingOptionsOptionReq(
        name: (name != null ? name.value : this.name),
        amount: (amount != null ? amount.value : this.amount),
        adminOnly: (adminOnly != null ? adminOnly.value : this.adminOnly),
        metadata: (metadata != null ? metadata.value : this.metadata),
        requirements:
            (requirements != null ? requirements.value : this.requirements),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostShippingOptionsReq {
  const AdminPostShippingOptionsReq({
    required this.name,
    required this.regionId,
    required this.providerId,
    this.profileId,
    required this.data,
    required this.priceType,
    this.amount,
    this.requirements,
    this.isReturn,
    this.adminOnly,
    this.metadata,
    this.includesTax,
  });

  factory AdminPostShippingOptionsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostShippingOptionsReqFromJson(json);

  static const toJsonFactory = _$AdminPostShippingOptionsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostShippingOptionsReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'profile_id', includeIfNull: false)
  final double? profileId;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(
    name: 'price_type',
    includeIfNull: false,
    toJson: adminPostShippingOptionsReqPriceTypeToJson,
    fromJson: adminPostShippingOptionsReqPriceTypeFromJson,
  )
  final enums.AdminPostShippingOptionsReqPriceType priceType;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int? amount;
  @JsonKey(name: 'requirements', includeIfNull: false)
  final List<AdminPostShippingOptionsReq$Requirements$Item>? requirements;
  @JsonKey(name: 'is_return', includeIfNull: false, defaultValue: false)
  final bool? isReturn;
  @JsonKey(name: 'admin_only', includeIfNull: false, defaultValue: false)
  final bool? adminOnly;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'includes_tax', includeIfNull: false)
  final bool? includesTax;
  static const fromJsonFactory = _$AdminPostShippingOptionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostShippingOptionsReqExtension on AdminPostShippingOptionsReq {
  AdminPostShippingOptionsReq copyWith(
      {String? name,
      String? regionId,
      String? providerId,
      double? profileId,
      Object? data,
      enums.AdminPostShippingOptionsReqPriceType? priceType,
      int? amount,
      List<AdminPostShippingOptionsReq$Requirements$Item>? requirements,
      bool? isReturn,
      bool? adminOnly,
      Object? metadata,
      bool? includesTax}) {
    return AdminPostShippingOptionsReq(
        name: name ?? this.name,
        regionId: regionId ?? this.regionId,
        providerId: providerId ?? this.providerId,
        profileId: profileId ?? this.profileId,
        data: data ?? this.data,
        priceType: priceType ?? this.priceType,
        amount: amount ?? this.amount,
        requirements: requirements ?? this.requirements,
        isReturn: isReturn ?? this.isReturn,
        adminOnly: adminOnly ?? this.adminOnly,
        metadata: metadata ?? this.metadata,
        includesTax: includesTax ?? this.includesTax);
  }

  AdminPostShippingOptionsReq copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<String>? regionId,
      Wrapped<String>? providerId,
      Wrapped<double?>? profileId,
      Wrapped<Object>? data,
      Wrapped<enums.AdminPostShippingOptionsReqPriceType>? priceType,
      Wrapped<int?>? amount,
      Wrapped<List<AdminPostShippingOptionsReq$Requirements$Item>?>?
          requirements,
      Wrapped<bool?>? isReturn,
      Wrapped<bool?>? adminOnly,
      Wrapped<Object?>? metadata,
      Wrapped<bool?>? includesTax}) {
    return AdminPostShippingOptionsReq(
        name: (name != null ? name.value : this.name),
        regionId: (regionId != null ? regionId.value : this.regionId),
        providerId: (providerId != null ? providerId.value : this.providerId),
        profileId: (profileId != null ? profileId.value : this.profileId),
        data: (data != null ? data.value : this.data),
        priceType: (priceType != null ? priceType.value : this.priceType),
        amount: (amount != null ? amount.value : this.amount),
        requirements:
            (requirements != null ? requirements.value : this.requirements),
        isReturn: (isReturn != null ? isReturn.value : this.isReturn),
        adminOnly: (adminOnly != null ? adminOnly.value : this.adminOnly),
        metadata: (metadata != null ? metadata.value : this.metadata),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostShippingProfilesProfileReq {
  const AdminPostShippingProfilesProfileReq({
    this.name,
    this.metadata,
    this.type,
    this.products,
    this.shippingOptions,
  });

  factory AdminPostShippingProfilesProfileReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostShippingProfilesProfileReqFromJson(json);

  static const toJsonFactory = _$AdminPostShippingProfilesProfileReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostShippingProfilesProfileReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: adminPostShippingProfilesProfileReqTypeNullableToJson,
    fromJson: adminPostShippingProfilesProfileReqTypeNullableFromJson,
  )
  final enums.AdminPostShippingProfilesProfileReqType? type;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? products;
  @JsonKey(
      name: 'shipping_options', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? shippingOptions;
  static const fromJsonFactory = _$AdminPostShippingProfilesProfileReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostShippingProfilesProfileReqExtension
    on AdminPostShippingProfilesProfileReq {
  AdminPostShippingProfilesProfileReq copyWith(
      {String? name,
      Object? metadata,
      enums.AdminPostShippingProfilesProfileReqType? type,
      List<Object>? products,
      List<Object>? shippingOptions}) {
    return AdminPostShippingProfilesProfileReq(
        name: name ?? this.name,
        metadata: metadata ?? this.metadata,
        type: type ?? this.type,
        products: products ?? this.products,
        shippingOptions: shippingOptions ?? this.shippingOptions);
  }

  AdminPostShippingProfilesProfileReq copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<Object?>? metadata,
      Wrapped<enums.AdminPostShippingProfilesProfileReqType?>? type,
      Wrapped<List<Object>?>? products,
      Wrapped<List<Object>?>? shippingOptions}) {
    return AdminPostShippingProfilesProfileReq(
        name: (name != null ? name.value : this.name),
        metadata: (metadata != null ? metadata.value : this.metadata),
        type: (type != null ? type.value : this.type),
        products: (products != null ? products.value : this.products),
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostShippingProfilesReq {
  const AdminPostShippingProfilesReq({
    required this.name,
    required this.type,
    this.metadata,
  });

  factory AdminPostShippingProfilesReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostShippingProfilesReqFromJson(json);

  static const toJsonFactory = _$AdminPostShippingProfilesReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostShippingProfilesReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: adminPostShippingProfilesReqTypeToJson,
    fromJson: adminPostShippingProfilesReqTypeFromJson,
  )
  final enums.AdminPostShippingProfilesReqType type;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostShippingProfilesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostShippingProfilesReqExtension
    on AdminPostShippingProfilesReq {
  AdminPostShippingProfilesReq copyWith(
      {String? name,
      enums.AdminPostShippingProfilesReqType? type,
      Object? metadata}) {
    return AdminPostShippingProfilesReq(
        name: name ?? this.name,
        type: type ?? this.type,
        metadata: metadata ?? this.metadata);
  }

  AdminPostShippingProfilesReq copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<enums.AdminPostShippingProfilesReqType>? type,
      Wrapped<Object?>? metadata}) {
    return AdminPostShippingProfilesReq(
        name: (name != null ? name.value : this.name),
        type: (type != null ? type.value : this.type),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostStockLocationsLocationReq {
  const AdminPostStockLocationsLocationReq({
    this.name,
    this.addressId,
    this.metadata,
    this.address,
  });

  factory AdminPostStockLocationsLocationReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostStockLocationsLocationReqFromJson(json);

  static const toJsonFactory = _$AdminPostStockLocationsLocationReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostStockLocationsLocationReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'address_id', includeIfNull: false, defaultValue: 'default')
  final String? addressId;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'address', includeIfNull: false)
  final StockLocationAddressInput? address;
  static const fromJsonFactory = _$AdminPostStockLocationsLocationReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostStockLocationsLocationReqExtension
    on AdminPostStockLocationsLocationReq {
  AdminPostStockLocationsLocationReq copyWith(
      {String? name,
      String? addressId,
      Object? metadata,
      StockLocationAddressInput? address}) {
    return AdminPostStockLocationsLocationReq(
        name: name ?? this.name,
        addressId: addressId ?? this.addressId,
        metadata: metadata ?? this.metadata,
        address: address ?? this.address);
  }

  AdminPostStockLocationsLocationReq copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? addressId,
      Wrapped<Object?>? metadata,
      Wrapped<StockLocationAddressInput?>? address}) {
    return AdminPostStockLocationsLocationReq(
        name: (name != null ? name.value : this.name),
        addressId: (addressId != null ? addressId.value : this.addressId),
        metadata: (metadata != null ? metadata.value : this.metadata),
        address: (address != null ? address.value : this.address));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostStockLocationsReq {
  const AdminPostStockLocationsReq({
    required this.name,
    this.addressId,
    this.metadata,
    this.address,
  });

  factory AdminPostStockLocationsReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostStockLocationsReqFromJson(json);

  static const toJsonFactory = _$AdminPostStockLocationsReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostStockLocationsReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'address_id', includeIfNull: false, defaultValue: 'default')
  final String? addressId;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'address', includeIfNull: false)
  final StockLocationAddressInput? address;
  static const fromJsonFactory = _$AdminPostStockLocationsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostStockLocationsReqExtension on AdminPostStockLocationsReq {
  AdminPostStockLocationsReq copyWith(
      {String? name,
      String? addressId,
      Object? metadata,
      StockLocationAddressInput? address}) {
    return AdminPostStockLocationsReq(
        name: name ?? this.name,
        addressId: addressId ?? this.addressId,
        metadata: metadata ?? this.metadata,
        address: address ?? this.address);
  }

  AdminPostStockLocationsReq copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<String?>? addressId,
      Wrapped<Object?>? metadata,
      Wrapped<StockLocationAddressInput?>? address}) {
    return AdminPostStockLocationsReq(
        name: (name != null ? name.value : this.name),
        addressId: (addressId != null ? addressId.value : this.addressId),
        metadata: (metadata != null ? metadata.value : this.metadata),
        address: (address != null ? address.value : this.address));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostStockLocationsReqAddress {
  const AdminPostStockLocationsReqAddress({
    required this.address1,
    this.address2,
    this.company,
    this.city,
    required this.countryCode,
    this.phone,
    this.postalCode,
    this.province,
  });

  factory AdminPostStockLocationsReqAddress.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostStockLocationsReqAddressFromJson(json);

  static const toJsonFactory = _$AdminPostStockLocationsReqAddressToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostStockLocationsReqAddressToJson(this);

  @JsonKey(name: 'address_1', includeIfNull: false, defaultValue: 'default')
  final String address1;
  @JsonKey(name: 'address_2', includeIfNull: false, defaultValue: 'default')
  final String? address2;
  @JsonKey(name: 'company', includeIfNull: false, defaultValue: 'default')
  final String? company;
  @JsonKey(name: 'city', includeIfNull: false, defaultValue: 'default')
  final String? city;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String countryCode;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'postal_code', includeIfNull: false, defaultValue: 'default')
  final String? postalCode;
  @JsonKey(name: 'province', includeIfNull: false, defaultValue: 'default')
  final String? province;
  static const fromJsonFactory = _$AdminPostStockLocationsReqAddressFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostStockLocationsReqAddressExtension
    on AdminPostStockLocationsReqAddress {
  AdminPostStockLocationsReqAddress copyWith(
      {String? address1,
      String? address2,
      String? company,
      String? city,
      String? countryCode,
      String? phone,
      String? postalCode,
      String? province}) {
    return AdminPostStockLocationsReqAddress(
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        company: company ?? this.company,
        city: city ?? this.city,
        countryCode: countryCode ?? this.countryCode,
        phone: phone ?? this.phone,
        postalCode: postalCode ?? this.postalCode,
        province: province ?? this.province);
  }

  AdminPostStockLocationsReqAddress copyWithWrapped(
      {Wrapped<String>? address1,
      Wrapped<String?>? address2,
      Wrapped<String?>? company,
      Wrapped<String?>? city,
      Wrapped<String>? countryCode,
      Wrapped<String?>? phone,
      Wrapped<String?>? postalCode,
      Wrapped<String?>? province}) {
    return AdminPostStockLocationsReqAddress(
        address1: (address1 != null ? address1.value : this.address1),
        address2: (address2 != null ? address2.value : this.address2),
        company: (company != null ? company.value : this.company),
        city: (city != null ? city.value : this.city),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        phone: (phone != null ? phone.value : this.phone),
        postalCode: (postalCode != null ? postalCode.value : this.postalCode),
        province: (province != null ? province.value : this.province));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostStoreReq {
  const AdminPostStoreReq({
    this.name,
    this.swapLinkTemplate,
    this.paymentLinkTemplate,
    this.inviteLinkTemplate,
    this.defaultCurrencyCode,
    this.currencies,
    this.metadata,
  });

  factory AdminPostStoreReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostStoreReqFromJson(json);

  static const toJsonFactory = _$AdminPostStoreReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostStoreReqToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(
      name: 'swap_link_template', includeIfNull: false, defaultValue: 'default')
  final String? swapLinkTemplate;
  @JsonKey(
      name: 'payment_link_template',
      includeIfNull: false,
      defaultValue: 'default')
  final String? paymentLinkTemplate;
  @JsonKey(
      name: 'invite_link_template',
      includeIfNull: false,
      defaultValue: 'default')
  final String? inviteLinkTemplate;
  @JsonKey(
      name: 'default_currency_code',
      includeIfNull: false,
      defaultValue: 'default')
  final String? defaultCurrencyCode;
  @JsonKey(name: 'currencies', includeIfNull: false, defaultValue: <String>[])
  final List<String>? currencies;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostStoreReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostStoreReqExtension on AdminPostStoreReq {
  AdminPostStoreReq copyWith(
      {String? name,
      String? swapLinkTemplate,
      String? paymentLinkTemplate,
      String? inviteLinkTemplate,
      String? defaultCurrencyCode,
      List<String>? currencies,
      Object? metadata}) {
    return AdminPostStoreReq(
        name: name ?? this.name,
        swapLinkTemplate: swapLinkTemplate ?? this.swapLinkTemplate,
        paymentLinkTemplate: paymentLinkTemplate ?? this.paymentLinkTemplate,
        inviteLinkTemplate: inviteLinkTemplate ?? this.inviteLinkTemplate,
        defaultCurrencyCode: defaultCurrencyCode ?? this.defaultCurrencyCode,
        currencies: currencies ?? this.currencies,
        metadata: metadata ?? this.metadata);
  }

  AdminPostStoreReq copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? swapLinkTemplate,
      Wrapped<String?>? paymentLinkTemplate,
      Wrapped<String?>? inviteLinkTemplate,
      Wrapped<String?>? defaultCurrencyCode,
      Wrapped<List<String>?>? currencies,
      Wrapped<Object?>? metadata}) {
    return AdminPostStoreReq(
        name: (name != null ? name.value : this.name),
        swapLinkTemplate: (swapLinkTemplate != null
            ? swapLinkTemplate.value
            : this.swapLinkTemplate),
        paymentLinkTemplate: (paymentLinkTemplate != null
            ? paymentLinkTemplate.value
            : this.paymentLinkTemplate),
        inviteLinkTemplate: (inviteLinkTemplate != null
            ? inviteLinkTemplate.value
            : this.inviteLinkTemplate),
        defaultCurrencyCode: (defaultCurrencyCode != null
            ? defaultCurrencyCode.value
            : this.defaultCurrencyCode),
        currencies: (currencies != null ? currencies.value : this.currencies),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostTaxRatesReq {
  const AdminPostTaxRatesReq({
    required this.code,
    required this.name,
    required this.regionId,
    this.rate,
    this.products,
    this.shippingOptions,
    this.productTypes,
  });

  factory AdminPostTaxRatesReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostTaxRatesReqFromJson(json);

  static const toJsonFactory = _$AdminPostTaxRatesReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostTaxRatesReqToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'rate', includeIfNull: false)
  final double? rate;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <String>[])
  final List<String>? products;
  @JsonKey(
      name: 'shipping_options', includeIfNull: false, defaultValue: <String>[])
  final List<String>? shippingOptions;
  @JsonKey(
      name: 'product_types', includeIfNull: false, defaultValue: <String>[])
  final List<String>? productTypes;
  static const fromJsonFactory = _$AdminPostTaxRatesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostTaxRatesReqExtension on AdminPostTaxRatesReq {
  AdminPostTaxRatesReq copyWith(
      {String? code,
      String? name,
      String? regionId,
      double? rate,
      List<String>? products,
      List<String>? shippingOptions,
      List<String>? productTypes}) {
    return AdminPostTaxRatesReq(
        code: code ?? this.code,
        name: name ?? this.name,
        regionId: regionId ?? this.regionId,
        rate: rate ?? this.rate,
        products: products ?? this.products,
        shippingOptions: shippingOptions ?? this.shippingOptions,
        productTypes: productTypes ?? this.productTypes);
  }

  AdminPostTaxRatesReq copyWithWrapped(
      {Wrapped<String>? code,
      Wrapped<String>? name,
      Wrapped<String>? regionId,
      Wrapped<double?>? rate,
      Wrapped<List<String>?>? products,
      Wrapped<List<String>?>? shippingOptions,
      Wrapped<List<String>?>? productTypes}) {
    return AdminPostTaxRatesReq(
        code: (code != null ? code.value : this.code),
        name: (name != null ? name.value : this.name),
        regionId: (regionId != null ? regionId.value : this.regionId),
        rate: (rate != null ? rate.value : this.rate),
        products: (products != null ? products.value : this.products),
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions),
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostTaxRatesTaxRateProductTypesReq {
  const AdminPostTaxRatesTaxRateProductTypesReq({
    required this.productTypes,
  });

  factory AdminPostTaxRatesTaxRateProductTypesReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostTaxRatesTaxRateProductTypesReqFromJson(json);

  static const toJsonFactory = _$AdminPostTaxRatesTaxRateProductTypesReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostTaxRatesTaxRateProductTypesReqToJson(this);

  @JsonKey(
      name: 'product_types', includeIfNull: false, defaultValue: <String>[])
  final List<String> productTypes;
  static const fromJsonFactory =
      _$AdminPostTaxRatesTaxRateProductTypesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostTaxRatesTaxRateProductTypesReqExtension
    on AdminPostTaxRatesTaxRateProductTypesReq {
  AdminPostTaxRatesTaxRateProductTypesReq copyWith(
      {List<String>? productTypes}) {
    return AdminPostTaxRatesTaxRateProductTypesReq(
        productTypes: productTypes ?? this.productTypes);
  }

  AdminPostTaxRatesTaxRateProductTypesReq copyWithWrapped(
      {Wrapped<List<String>>? productTypes}) {
    return AdminPostTaxRatesTaxRateProductTypesReq(
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostTaxRatesTaxRateProductsReq {
  const AdminPostTaxRatesTaxRateProductsReq({
    required this.products,
  });

  factory AdminPostTaxRatesTaxRateProductsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostTaxRatesTaxRateProductsReqFromJson(json);

  static const toJsonFactory = _$AdminPostTaxRatesTaxRateProductsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostTaxRatesTaxRateProductsReqToJson(this);

  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <String>[])
  final List<String> products;
  static const fromJsonFactory = _$AdminPostTaxRatesTaxRateProductsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostTaxRatesTaxRateProductsReqExtension
    on AdminPostTaxRatesTaxRateProductsReq {
  AdminPostTaxRatesTaxRateProductsReq copyWith({List<String>? products}) {
    return AdminPostTaxRatesTaxRateProductsReq(
        products: products ?? this.products);
  }

  AdminPostTaxRatesTaxRateProductsReq copyWithWrapped(
      {Wrapped<List<String>>? products}) {
    return AdminPostTaxRatesTaxRateProductsReq(
        products: (products != null ? products.value : this.products));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostTaxRatesTaxRateReq {
  const AdminPostTaxRatesTaxRateReq({
    this.code,
    this.name,
    this.regionId,
    this.rate,
    this.products,
    this.shippingOptions,
    this.productTypes,
  });

  factory AdminPostTaxRatesTaxRateReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostTaxRatesTaxRateReqFromJson(json);

  static const toJsonFactory = _$AdminPostTaxRatesTaxRateReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostTaxRatesTaxRateReqToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String? code;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'rate', includeIfNull: false)
  final double? rate;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <String>[])
  final List<String>? products;
  @JsonKey(
      name: 'shipping_options', includeIfNull: false, defaultValue: <String>[])
  final List<String>? shippingOptions;
  @JsonKey(
      name: 'product_types', includeIfNull: false, defaultValue: <String>[])
  final List<String>? productTypes;
  static const fromJsonFactory = _$AdminPostTaxRatesTaxRateReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostTaxRatesTaxRateReqExtension on AdminPostTaxRatesTaxRateReq {
  AdminPostTaxRatesTaxRateReq copyWith(
      {String? code,
      String? name,
      String? regionId,
      double? rate,
      List<String>? products,
      List<String>? shippingOptions,
      List<String>? productTypes}) {
    return AdminPostTaxRatesTaxRateReq(
        code: code ?? this.code,
        name: name ?? this.name,
        regionId: regionId ?? this.regionId,
        rate: rate ?? this.rate,
        products: products ?? this.products,
        shippingOptions: shippingOptions ?? this.shippingOptions,
        productTypes: productTypes ?? this.productTypes);
  }

  AdminPostTaxRatesTaxRateReq copyWithWrapped(
      {Wrapped<String?>? code,
      Wrapped<String?>? name,
      Wrapped<String?>? regionId,
      Wrapped<double?>? rate,
      Wrapped<List<String>?>? products,
      Wrapped<List<String>?>? shippingOptions,
      Wrapped<List<String>?>? productTypes}) {
    return AdminPostTaxRatesTaxRateReq(
        code: (code != null ? code.value : this.code),
        name: (name != null ? name.value : this.name),
        regionId: (regionId != null ? regionId.value : this.regionId),
        rate: (rate != null ? rate.value : this.rate),
        products: (products != null ? products.value : this.products),
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions),
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostTaxRatesTaxRateShippingOptionsReq {
  const AdminPostTaxRatesTaxRateShippingOptionsReq({
    required this.shippingOptions,
  });

  factory AdminPostTaxRatesTaxRateShippingOptionsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostTaxRatesTaxRateShippingOptionsReqFromJson(json);

  static const toJsonFactory =
      _$AdminPostTaxRatesTaxRateShippingOptionsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostTaxRatesTaxRateShippingOptionsReqToJson(this);

  @JsonKey(
      name: 'shipping_options', includeIfNull: false, defaultValue: <String>[])
  final List<String> shippingOptions;
  static const fromJsonFactory =
      _$AdminPostTaxRatesTaxRateShippingOptionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostTaxRatesTaxRateShippingOptionsReqExtension
    on AdminPostTaxRatesTaxRateShippingOptionsReq {
  AdminPostTaxRatesTaxRateShippingOptionsReq copyWith(
      {List<String>? shippingOptions}) {
    return AdminPostTaxRatesTaxRateShippingOptionsReq(
        shippingOptions: shippingOptions ?? this.shippingOptions);
  }

  AdminPostTaxRatesTaxRateShippingOptionsReq copyWithWrapped(
      {Wrapped<List<String>>? shippingOptions}) {
    return AdminPostTaxRatesTaxRateShippingOptionsReq(
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostUploadsDownloadUrlReq {
  const AdminPostUploadsDownloadUrlReq({
    required this.fileKey,
  });

  factory AdminPostUploadsDownloadUrlReq.fromJson(Map<String, dynamic> json) =>
      _$AdminPostUploadsDownloadUrlReqFromJson(json);

  static const toJsonFactory = _$AdminPostUploadsDownloadUrlReqToJson;
  Map<String, dynamic> toJson() => _$AdminPostUploadsDownloadUrlReqToJson(this);

  @JsonKey(name: 'file_key', includeIfNull: false, defaultValue: 'default')
  final String fileKey;
  static const fromJsonFactory = _$AdminPostUploadsDownloadUrlReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostUploadsDownloadUrlReqExtension
    on AdminPostUploadsDownloadUrlReq {
  AdminPostUploadsDownloadUrlReq copyWith({String? fileKey}) {
    return AdminPostUploadsDownloadUrlReq(fileKey: fileKey ?? this.fileKey);
  }

  AdminPostUploadsDownloadUrlReq copyWithWrapped({Wrapped<String>? fileKey}) {
    return AdminPostUploadsDownloadUrlReq(
        fileKey: (fileKey != null ? fileKey.value : this.fileKey));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPriceListDeleteBatchRes {
  const AdminPriceListDeleteBatchRes({
    required this.ids,
    required this.object,
    required this.deleted,
  });

  factory AdminPriceListDeleteBatchRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPriceListDeleteBatchResFromJson(json);

  static const toJsonFactory = _$AdminPriceListDeleteBatchResToJson;
  Map<String, dynamic> toJson() => _$AdminPriceListDeleteBatchResToJson(this);

  @JsonKey(name: 'ids', includeIfNull: false, defaultValue: <String>[])
  final List<String> ids;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminPriceListDeleteBatchResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPriceListDeleteBatchResExtension
    on AdminPriceListDeleteBatchRes {
  AdminPriceListDeleteBatchRes copyWith(
      {List<String>? ids, String? object, bool? deleted}) {
    return AdminPriceListDeleteBatchRes(
        ids: ids ?? this.ids,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminPriceListDeleteBatchRes copyWithWrapped(
      {Wrapped<List<String>>? ids,
      Wrapped<String>? object,
      Wrapped<bool>? deleted}) {
    return AdminPriceListDeleteBatchRes(
        ids: (ids != null ? ids.value : this.ids),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPriceListDeleteProductPricesRes {
  const AdminPriceListDeleteProductPricesRes({
    required this.ids,
    required this.object,
    required this.deleted,
  });

  factory AdminPriceListDeleteProductPricesRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPriceListDeleteProductPricesResFromJson(json);

  static const toJsonFactory = _$AdminPriceListDeleteProductPricesResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPriceListDeleteProductPricesResToJson(this);

  @JsonKey(name: 'ids', includeIfNull: false, defaultValue: <String>[])
  final List<String> ids;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminPriceListDeleteProductPricesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPriceListDeleteProductPricesResExtension
    on AdminPriceListDeleteProductPricesRes {
  AdminPriceListDeleteProductPricesRes copyWith(
      {List<String>? ids, String? object, bool? deleted}) {
    return AdminPriceListDeleteProductPricesRes(
        ids: ids ?? this.ids,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminPriceListDeleteProductPricesRes copyWithWrapped(
      {Wrapped<List<String>>? ids,
      Wrapped<String>? object,
      Wrapped<bool>? deleted}) {
    return AdminPriceListDeleteProductPricesRes(
        ids: (ids != null ? ids.value : this.ids),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPriceListDeleteRes {
  const AdminPriceListDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminPriceListDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPriceListDeleteResFromJson(json);

  static const toJsonFactory = _$AdminPriceListDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminPriceListDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminPriceListDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPriceListDeleteResExtension on AdminPriceListDeleteRes {
  AdminPriceListDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminPriceListDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminPriceListDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminPriceListDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPriceListDeleteVariantPricesRes {
  const AdminPriceListDeleteVariantPricesRes({
    required this.ids,
    required this.object,
    required this.deleted,
  });

  factory AdminPriceListDeleteVariantPricesRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPriceListDeleteVariantPricesResFromJson(json);

  static const toJsonFactory = _$AdminPriceListDeleteVariantPricesResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPriceListDeleteVariantPricesResToJson(this);

  @JsonKey(name: 'ids', includeIfNull: false, defaultValue: <String>[])
  final List<String> ids;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminPriceListDeleteVariantPricesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPriceListDeleteVariantPricesResExtension
    on AdminPriceListDeleteVariantPricesRes {
  AdminPriceListDeleteVariantPricesRes copyWith(
      {List<String>? ids, String? object, bool? deleted}) {
    return AdminPriceListDeleteVariantPricesRes(
        ids: ids ?? this.ids,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminPriceListDeleteVariantPricesRes copyWithWrapped(
      {Wrapped<List<String>>? ids,
      Wrapped<String>? object,
      Wrapped<bool>? deleted}) {
    return AdminPriceListDeleteVariantPricesRes(
        ids: (ids != null ? ids.value : this.ids),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPriceListRes {
  const AdminPriceListRes({
    required this.priceList,
  });

  factory AdminPriceListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPriceListResFromJson(json);

  static const toJsonFactory = _$AdminPriceListResToJson;
  Map<String, dynamic> toJson() => _$AdminPriceListResToJson(this);

  @JsonKey(name: 'price_list', includeIfNull: false)
  final PriceList? priceList;
  static const fromJsonFactory = _$AdminPriceListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPriceListResExtension on AdminPriceListRes {
  AdminPriceListRes copyWith({PriceList? priceList}) {
    return AdminPriceListRes(priceList: priceList ?? this.priceList);
  }

  AdminPriceListRes copyWithWrapped({Wrapped<PriceList?>? priceList}) {
    return AdminPriceListRes(
        priceList: (priceList != null ? priceList.value : this.priceList));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPriceListsListRes {
  const AdminPriceListsListRes({
    required this.priceLists,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminPriceListsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPriceListsListResFromJson(json);

  static const toJsonFactory = _$AdminPriceListsListResToJson;
  Map<String, dynamic> toJson() => _$AdminPriceListsListResToJson(this);

  @JsonKey(
      name: 'price_lists', includeIfNull: false, defaultValue: <PriceList>[])
  final List<PriceList> priceLists;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminPriceListsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPriceListsListResExtension on AdminPriceListsListRes {
  AdminPriceListsListRes copyWith(
      {List<PriceList>? priceLists, int? count, int? offset, int? limit}) {
    return AdminPriceListsListRes(
        priceLists: priceLists ?? this.priceLists,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminPriceListsListRes copyWithWrapped(
      {Wrapped<List<PriceList>>? priceLists,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminPriceListsListRes(
        priceLists: (priceLists != null ? priceLists.value : this.priceLists),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPriceListsProductsListRes {
  const AdminPriceListsProductsListRes({
    required this.products,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminPriceListsProductsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPriceListsProductsListResFromJson(json);

  static const toJsonFactory = _$AdminPriceListsProductsListResToJson;
  Map<String, dynamic> toJson() => _$AdminPriceListsProductsListResToJson(this);

  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Product>[])
  final List<Product> products;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminPriceListsProductsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPriceListsProductsListResExtension
    on AdminPriceListsProductsListRes {
  AdminPriceListsProductsListRes copyWith(
      {List<Product>? products, int? count, int? offset, int? limit}) {
    return AdminPriceListsProductsListRes(
        products: products ?? this.products,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminPriceListsProductsListRes copyWithWrapped(
      {Wrapped<List<Product>>? products,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminPriceListsProductsListRes(
        products: (products != null ? products.value : this.products),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductCategoriesCategoryDeleteRes {
  const AdminProductCategoriesCategoryDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminProductCategoriesCategoryDeleteRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminProductCategoriesCategoryDeleteResFromJson(json);

  static const toJsonFactory = _$AdminProductCategoriesCategoryDeleteResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminProductCategoriesCategoryDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory =
      _$AdminProductCategoriesCategoryDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductCategoriesCategoryDeleteResExtension
    on AdminProductCategoriesCategoryDeleteRes {
  AdminProductCategoriesCategoryDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminProductCategoriesCategoryDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminProductCategoriesCategoryDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminProductCategoriesCategoryDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductCategoriesCategoryRes {
  const AdminProductCategoriesCategoryRes({
    required this.productCategory,
  });

  factory AdminProductCategoriesCategoryRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminProductCategoriesCategoryResFromJson(json);

  static const toJsonFactory = _$AdminProductCategoriesCategoryResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminProductCategoriesCategoryResToJson(this);

  @JsonKey(name: 'product_category', includeIfNull: false)
  final ProductCategory? productCategory;
  static const fromJsonFactory = _$AdminProductCategoriesCategoryResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductCategoriesCategoryResExtension
    on AdminProductCategoriesCategoryRes {
  AdminProductCategoriesCategoryRes copyWith(
      {ProductCategory? productCategory}) {
    return AdminProductCategoriesCategoryRes(
        productCategory: productCategory ?? this.productCategory);
  }

  AdminProductCategoriesCategoryRes copyWithWrapped(
      {Wrapped<ProductCategory?>? productCategory}) {
    return AdminProductCategoriesCategoryRes(
        productCategory: (productCategory != null
            ? productCategory.value
            : this.productCategory));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductCategoriesListRes {
  const AdminProductCategoriesListRes({
    required this.productCategories,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminProductCategoriesListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductCategoriesListResFromJson(json);

  static const toJsonFactory = _$AdminProductCategoriesListResToJson;
  Map<String, dynamic> toJson() => _$AdminProductCategoriesListResToJson(this);

  @JsonKey(
      name: 'product_categories',
      includeIfNull: false,
      defaultValue: <ProductCategory>[])
  final List<ProductCategory> productCategories;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminProductCategoriesListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductCategoriesListResExtension
    on AdminProductCategoriesListRes {
  AdminProductCategoriesListRes copyWith(
      {List<ProductCategory>? productCategories,
      int? count,
      int? offset,
      int? limit}) {
    return AdminProductCategoriesListRes(
        productCategories: productCategories ?? this.productCategories,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminProductCategoriesListRes copyWithWrapped(
      {Wrapped<List<ProductCategory>>? productCategories,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminProductCategoriesListRes(
        productCategories: (productCategories != null
            ? productCategories.value
            : this.productCategories),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductTagsListRes {
  const AdminProductTagsListRes({
    required this.productTags,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminProductTagsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductTagsListResFromJson(json);

  static const toJsonFactory = _$AdminProductTagsListResToJson;
  Map<String, dynamic> toJson() => _$AdminProductTagsListResToJson(this);

  @JsonKey(
      name: 'product_tags', includeIfNull: false, defaultValue: <ProductTag>[])
  final List<ProductTag> productTags;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminProductTagsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductTagsListResExtension on AdminProductTagsListRes {
  AdminProductTagsListRes copyWith(
      {List<ProductTag>? productTags, int? count, int? offset, int? limit}) {
    return AdminProductTagsListRes(
        productTags: productTags ?? this.productTags,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminProductTagsListRes copyWithWrapped(
      {Wrapped<List<ProductTag>>? productTags,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminProductTagsListRes(
        productTags:
            (productTags != null ? productTags.value : this.productTags),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductTypesListRes {
  const AdminProductTypesListRes({
    required this.productTypes,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminProductTypesListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductTypesListResFromJson(json);

  static const toJsonFactory = _$AdminProductTypesListResToJson;
  Map<String, dynamic> toJson() => _$AdminProductTypesListResToJson(this);

  @JsonKey(
      name: 'product_types',
      includeIfNull: false,
      defaultValue: <ProductType>[])
  final List<ProductType> productTypes;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminProductTypesListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductTypesListResExtension on AdminProductTypesListRes {
  AdminProductTypesListRes copyWith(
      {List<ProductType>? productTypes, int? count, int? offset, int? limit}) {
    return AdminProductTypesListRes(
        productTypes: productTypes ?? this.productTypes,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminProductTypesListRes copyWithWrapped(
      {Wrapped<List<ProductType>>? productTypes,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminProductTypesListRes(
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsDeleteOptionRes {
  const AdminProductsDeleteOptionRes({
    required this.optionId,
    required this.object,
    required this.deleted,
    required this.product,
  });

  factory AdminProductsDeleteOptionRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductsDeleteOptionResFromJson(json);

  static const toJsonFactory = _$AdminProductsDeleteOptionResToJson;
  Map<String, dynamic> toJson() => _$AdminProductsDeleteOptionResToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  @JsonKey(name: 'product', includeIfNull: false)
  final PricedProduct product;
  static const fromJsonFactory = _$AdminProductsDeleteOptionResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsDeleteOptionResExtension
    on AdminProductsDeleteOptionRes {
  AdminProductsDeleteOptionRes copyWith(
      {String? optionId,
      String? object,
      bool? deleted,
      PricedProduct? product}) {
    return AdminProductsDeleteOptionRes(
        optionId: optionId ?? this.optionId,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted,
        product: product ?? this.product);
  }

  AdminProductsDeleteOptionRes copyWithWrapped(
      {Wrapped<String>? optionId,
      Wrapped<String>? object,
      Wrapped<bool>? deleted,
      Wrapped<PricedProduct>? product}) {
    return AdminProductsDeleteOptionRes(
        optionId: (optionId != null ? optionId.value : this.optionId),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted),
        product: (product != null ? product.value : this.product));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsDeleteRes {
  const AdminProductsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminProductsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminProductsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminProductsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminProductsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsDeleteResExtension on AdminProductsDeleteRes {
  AdminProductsDeleteRes copyWith({String? id, String? object, bool? deleted}) {
    return AdminProductsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminProductsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminProductsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsDeleteVariantRes {
  const AdminProductsDeleteVariantRes({
    required this.variantId,
    required this.object,
    required this.deleted,
    required this.product,
  });

  factory AdminProductsDeleteVariantRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductsDeleteVariantResFromJson(json);

  static const toJsonFactory = _$AdminProductsDeleteVariantResToJson;
  Map<String, dynamic> toJson() => _$AdminProductsDeleteVariantResToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  @JsonKey(name: 'product', includeIfNull: false)
  final PricedProduct product;
  static const fromJsonFactory = _$AdminProductsDeleteVariantResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsDeleteVariantResExtension
    on AdminProductsDeleteVariantRes {
  AdminProductsDeleteVariantRes copyWith(
      {String? variantId,
      String? object,
      bool? deleted,
      PricedProduct? product}) {
    return AdminProductsDeleteVariantRes(
        variantId: variantId ?? this.variantId,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted,
        product: product ?? this.product);
  }

  AdminProductsDeleteVariantRes copyWithWrapped(
      {Wrapped<String>? variantId,
      Wrapped<String>? object,
      Wrapped<bool>? deleted,
      Wrapped<PricedProduct>? product}) {
    return AdminProductsDeleteVariantRes(
        variantId: (variantId != null ? variantId.value : this.variantId),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted),
        product: (product != null ? product.value : this.product));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsListRes {
  const AdminProductsListRes({
    required this.products,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminProductsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductsListResFromJson(json);

  static const toJsonFactory = _$AdminProductsListResToJson;
  Map<String, dynamic> toJson() => _$AdminProductsListResToJson(this);

  @JsonKey(
      name: 'products', includeIfNull: false, defaultValue: <PricedProduct>[])
  final List<PricedProduct> products;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminProductsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsListResExtension on AdminProductsListRes {
  AdminProductsListRes copyWith(
      {List<PricedProduct>? products, int? count, int? offset, int? limit}) {
    return AdminProductsListRes(
        products: products ?? this.products,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminProductsListRes copyWithWrapped(
      {Wrapped<List<PricedProduct>>? products,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminProductsListRes(
        products: (products != null ? products.value : this.products),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsListTagsRes {
  const AdminProductsListTagsRes({
    required this.tags,
  });

  factory AdminProductsListTagsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductsListTagsResFromJson(json);

  static const toJsonFactory = _$AdminProductsListTagsResToJson;
  Map<String, dynamic> toJson() => _$AdminProductsListTagsResToJson(this);

  @JsonKey(name: 'tags', includeIfNull: false)
  final List<AdminProductsListTagsRes$Tags$Item> tags;
  static const fromJsonFactory = _$AdminProductsListTagsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsListTagsResExtension on AdminProductsListTagsRes {
  AdminProductsListTagsRes copyWith(
      {List<AdminProductsListTagsRes$Tags$Item>? tags}) {
    return AdminProductsListTagsRes(tags: tags ?? this.tags);
  }

  AdminProductsListTagsRes copyWithWrapped(
      {Wrapped<List<AdminProductsListTagsRes$Tags$Item>>? tags}) {
    return AdminProductsListTagsRes(
        tags: (tags != null ? tags.value : this.tags));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsListTypesRes {
  const AdminProductsListTypesRes({
    required this.types,
  });

  factory AdminProductsListTypesRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductsListTypesResFromJson(json);

  static const toJsonFactory = _$AdminProductsListTypesResToJson;
  Map<String, dynamic> toJson() => _$AdminProductsListTypesResToJson(this);

  @JsonKey(name: 'types', includeIfNull: false, defaultValue: <ProductType>[])
  final List<ProductType> types;
  static const fromJsonFactory = _$AdminProductsListTypesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsListTypesResExtension on AdminProductsListTypesRes {
  AdminProductsListTypesRes copyWith({List<ProductType>? types}) {
    return AdminProductsListTypesRes(types: types ?? this.types);
  }

  AdminProductsListTypesRes copyWithWrapped(
      {Wrapped<List<ProductType>>? types}) {
    return AdminProductsListTypesRes(
        types: (types != null ? types.value : this.types));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsListVariantsRes {
  const AdminProductsListVariantsRes({
    required this.variants,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminProductsListVariantsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductsListVariantsResFromJson(json);

  static const toJsonFactory = _$AdminProductsListVariantsResToJson;
  Map<String, dynamic> toJson() => _$AdminProductsListVariantsResToJson(this);

  @JsonKey(
      name: 'variants', includeIfNull: false, defaultValue: <ProductVariant>[])
  final List<ProductVariant> variants;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminProductsListVariantsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsListVariantsResExtension
    on AdminProductsListVariantsRes {
  AdminProductsListVariantsRes copyWith(
      {List<ProductVariant>? variants, int? count, int? offset, int? limit}) {
    return AdminProductsListVariantsRes(
        variants: variants ?? this.variants,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminProductsListVariantsRes copyWithWrapped(
      {Wrapped<List<ProductVariant>>? variants,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminProductsListVariantsRes(
        variants: (variants != null ? variants.value : this.variants),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsRes {
  const AdminProductsRes({
    required this.product,
  });

  factory AdminProductsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminProductsResFromJson(json);

  static const toJsonFactory = _$AdminProductsResToJson;
  Map<String, dynamic> toJson() => _$AdminProductsResToJson(this);

  @JsonKey(name: 'product', includeIfNull: false)
  final PricedProduct product;
  static const fromJsonFactory = _$AdminProductsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsResExtension on AdminProductsRes {
  AdminProductsRes copyWith({PricedProduct? product}) {
    return AdminProductsRes(product: product ?? this.product);
  }

  AdminProductsRes copyWithWrapped({Wrapped<PricedProduct>? product}) {
    return AdminProductsRes(
        product: (product != null ? product.value : this.product));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPublishableApiKeyDeleteRes {
  const AdminPublishableApiKeyDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminPublishableApiKeyDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPublishableApiKeyDeleteResFromJson(json);

  static const toJsonFactory = _$AdminPublishableApiKeyDeleteResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPublishableApiKeyDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminPublishableApiKeyDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPublishableApiKeyDeleteResExtension
    on AdminPublishableApiKeyDeleteRes {
  AdminPublishableApiKeyDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminPublishableApiKeyDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminPublishableApiKeyDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminPublishableApiKeyDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPublishableApiKeysListRes {
  const AdminPublishableApiKeysListRes({
    required this.publishableApiKeys,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminPublishableApiKeysListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPublishableApiKeysListResFromJson(json);

  static const toJsonFactory = _$AdminPublishableApiKeysListResToJson;
  Map<String, dynamic> toJson() => _$AdminPublishableApiKeysListResToJson(this);

  @JsonKey(
      name: 'publishable_api_keys',
      includeIfNull: false,
      defaultValue: <PublishableApiKey>[])
  final List<PublishableApiKey> publishableApiKeys;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminPublishableApiKeysListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPublishableApiKeysListResExtension
    on AdminPublishableApiKeysListRes {
  AdminPublishableApiKeysListRes copyWith(
      {List<PublishableApiKey>? publishableApiKeys,
      int? count,
      int? offset,
      int? limit}) {
    return AdminPublishableApiKeysListRes(
        publishableApiKeys: publishableApiKeys ?? this.publishableApiKeys,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminPublishableApiKeysListRes copyWithWrapped(
      {Wrapped<List<PublishableApiKey>>? publishableApiKeys,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminPublishableApiKeysListRes(
        publishableApiKeys: (publishableApiKeys != null
            ? publishableApiKeys.value
            : this.publishableApiKeys),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPublishableApiKeysListSalesChannelsRes {
  const AdminPublishableApiKeysListSalesChannelsRes({
    required this.salesChannels,
  });

  factory AdminPublishableApiKeysListSalesChannelsRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPublishableApiKeysListSalesChannelsResFromJson(json);

  static const toJsonFactory =
      _$AdminPublishableApiKeysListSalesChannelsResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPublishableApiKeysListSalesChannelsResToJson(this);

  @JsonKey(
      name: 'sales_channels',
      includeIfNull: false,
      defaultValue: <SalesChannel>[])
  final List<SalesChannel> salesChannels;
  static const fromJsonFactory =
      _$AdminPublishableApiKeysListSalesChannelsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPublishableApiKeysListSalesChannelsResExtension
    on AdminPublishableApiKeysListSalesChannelsRes {
  AdminPublishableApiKeysListSalesChannelsRes copyWith(
      {List<SalesChannel>? salesChannels}) {
    return AdminPublishableApiKeysListSalesChannelsRes(
        salesChannels: salesChannels ?? this.salesChannels);
  }

  AdminPublishableApiKeysListSalesChannelsRes copyWithWrapped(
      {Wrapped<List<SalesChannel>>? salesChannels}) {
    return AdminPublishableApiKeysListSalesChannelsRes(
        salesChannels:
            (salesChannels != null ? salesChannels.value : this.salesChannels));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPublishableApiKeysRes {
  const AdminPublishableApiKeysRes({
    required this.publishableApiKey,
  });

  factory AdminPublishableApiKeysRes.fromJson(Map<String, dynamic> json) =>
      _$AdminPublishableApiKeysResFromJson(json);

  static const toJsonFactory = _$AdminPublishableApiKeysResToJson;
  Map<String, dynamic> toJson() => _$AdminPublishableApiKeysResToJson(this);

  @JsonKey(name: 'publishable_api_key', includeIfNull: false)
  final PublishableApiKey? publishableApiKey;
  static const fromJsonFactory = _$AdminPublishableApiKeysResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPublishableApiKeysResExtension on AdminPublishableApiKeysRes {
  AdminPublishableApiKeysRes copyWith({PublishableApiKey? publishableApiKey}) {
    return AdminPublishableApiKeysRes(
        publishableApiKey: publishableApiKey ?? this.publishableApiKey);
  }

  AdminPublishableApiKeysRes copyWithWrapped(
      {Wrapped<PublishableApiKey?>? publishableApiKey}) {
    return AdminPublishableApiKeysRes(
        publishableApiKey: (publishableApiKey != null
            ? publishableApiKey.value
            : this.publishableApiKey));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminRefundRes {
  const AdminRefundRes({
    required this.refund,
  });

  factory AdminRefundRes.fromJson(Map<String, dynamic> json) =>
      _$AdminRefundResFromJson(json);

  static const toJsonFactory = _$AdminRefundResToJson;
  Map<String, dynamic> toJson() => _$AdminRefundResToJson(this);

  @JsonKey(name: 'refund', includeIfNull: false)
  final Refund refund;
  static const fromJsonFactory = _$AdminRefundResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminRefundResExtension on AdminRefundRes {
  AdminRefundRes copyWith({Refund? refund}) {
    return AdminRefundRes(refund: refund ?? this.refund);
  }

  AdminRefundRes copyWithWrapped({Wrapped<Refund>? refund}) {
    return AdminRefundRes(
        refund: (refund != null ? refund.value : this.refund));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminRegionsDeleteRes {
  const AdminRegionsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminRegionsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminRegionsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminRegionsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminRegionsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminRegionsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminRegionsDeleteResExtension on AdminRegionsDeleteRes {
  AdminRegionsDeleteRes copyWith({String? id, String? object, bool? deleted}) {
    return AdminRegionsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminRegionsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminRegionsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminRegionsListRes {
  const AdminRegionsListRes({
    required this.regions,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminRegionsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminRegionsListResFromJson(json);

  static const toJsonFactory = _$AdminRegionsListResToJson;
  Map<String, dynamic> toJson() => _$AdminRegionsListResToJson(this);

  @JsonKey(name: 'regions', includeIfNull: false, defaultValue: <Region>[])
  final List<Region> regions;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminRegionsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminRegionsListResExtension on AdminRegionsListRes {
  AdminRegionsListRes copyWith(
      {List<Region>? regions, int? count, int? offset, int? limit}) {
    return AdminRegionsListRes(
        regions: regions ?? this.regions,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminRegionsListRes copyWithWrapped(
      {Wrapped<List<Region>>? regions,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminRegionsListRes(
        regions: (regions != null ? regions.value : this.regions),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminRegionsRes {
  const AdminRegionsRes({
    required this.region,
  });

  factory AdminRegionsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminRegionsResFromJson(json);

  static const toJsonFactory = _$AdminRegionsResToJson;
  Map<String, dynamic> toJson() => _$AdminRegionsResToJson(this);

  @JsonKey(name: 'region', includeIfNull: false)
  final Region region;
  static const fromJsonFactory = _$AdminRegionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminRegionsResExtension on AdminRegionsRes {
  AdminRegionsRes copyWith({Region? region}) {
    return AdminRegionsRes(region: region ?? this.region);
  }

  AdminRegionsRes copyWithWrapped({Wrapped<Region>? region}) {
    return AdminRegionsRes(
        region: (region != null ? region.value : this.region));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReservationsDeleteRes {
  const AdminReservationsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminReservationsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReservationsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminReservationsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminReservationsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminReservationsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReservationsDeleteResExtension on AdminReservationsDeleteRes {
  AdminReservationsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminReservationsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminReservationsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminReservationsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReservationsListRes {
  const AdminReservationsListRes({
    required this.reservations,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminReservationsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReservationsListResFromJson(json);

  static const toJsonFactory = _$AdminReservationsListResToJson;
  Map<String, dynamic> toJson() => _$AdminReservationsListResToJson(this);

  @JsonKey(
      name: 'reservations',
      includeIfNull: false,
      defaultValue: <ExtendedReservationItem>[])
  final List<ExtendedReservationItem> reservations;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminReservationsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReservationsListResExtension on AdminReservationsListRes {
  AdminReservationsListRes copyWith(
      {List<ExtendedReservationItem>? reservations,
      int? count,
      int? offset,
      int? limit}) {
    return AdminReservationsListRes(
        reservations: reservations ?? this.reservations,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminReservationsListRes copyWithWrapped(
      {Wrapped<List<ExtendedReservationItem>>? reservations,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminReservationsListRes(
        reservations:
            (reservations != null ? reservations.value : this.reservations),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReservationsRes {
  const AdminReservationsRes({
    required this.reservation,
  });

  factory AdminReservationsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReservationsResFromJson(json);

  static const toJsonFactory = _$AdminReservationsResToJson;
  Map<String, dynamic> toJson() => _$AdminReservationsResToJson(this);

  @JsonKey(name: 'reservation', includeIfNull: false)
  final ReservationItemDTO reservation;
  static const fromJsonFactory = _$AdminReservationsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReservationsResExtension on AdminReservationsRes {
  AdminReservationsRes copyWith({ReservationItemDTO? reservation}) {
    return AdminReservationsRes(reservation: reservation ?? this.reservation);
  }

  AdminReservationsRes copyWithWrapped(
      {Wrapped<ReservationItemDTO>? reservation}) {
    return AdminReservationsRes(
        reservation:
            (reservation != null ? reservation.value : this.reservation));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminResetPasswordRequest {
  const AdminResetPasswordRequest({
    this.email,
    required this.token,
    required this.password,
  });

  factory AdminResetPasswordRequest.fromJson(Map<String, dynamic> json) =>
      _$AdminResetPasswordRequestFromJson(json);

  static const toJsonFactory = _$AdminResetPasswordRequestToJson;
  Map<String, dynamic> toJson() => _$AdminResetPasswordRequestToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String? email;
  @JsonKey(name: 'token', includeIfNull: false, defaultValue: 'default')
  final String token;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String password;
  static const fromJsonFactory = _$AdminResetPasswordRequestFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminResetPasswordRequestExtension on AdminResetPasswordRequest {
  AdminResetPasswordRequest copyWith(
      {String? email, String? token, String? password}) {
    return AdminResetPasswordRequest(
        email: email ?? this.email,
        token: token ?? this.token,
        password: password ?? this.password);
  }

  AdminResetPasswordRequest copyWithWrapped(
      {Wrapped<String?>? email,
      Wrapped<String>? token,
      Wrapped<String>? password}) {
    return AdminResetPasswordRequest(
        email: (email != null ? email.value : this.email),
        token: (token != null ? token.value : this.token),
        password: (password != null ? password.value : this.password));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminResetPasswordTokenRequest {
  const AdminResetPasswordTokenRequest({
    required this.email,
  });

  factory AdminResetPasswordTokenRequest.fromJson(Map<String, dynamic> json) =>
      _$AdminResetPasswordTokenRequestFromJson(json);

  static const toJsonFactory = _$AdminResetPasswordTokenRequestToJson;
  Map<String, dynamic> toJson() => _$AdminResetPasswordTokenRequestToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  static const fromJsonFactory = _$AdminResetPasswordTokenRequestFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminResetPasswordTokenRequestExtension
    on AdminResetPasswordTokenRequest {
  AdminResetPasswordTokenRequest copyWith({String? email}) {
    return AdminResetPasswordTokenRequest(email: email ?? this.email);
  }

  AdminResetPasswordTokenRequest copyWithWrapped({Wrapped<String>? email}) {
    return AdminResetPasswordTokenRequest(
        email: (email != null ? email.value : this.email));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReturnReasonsDeleteRes {
  const AdminReturnReasonsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminReturnReasonsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReturnReasonsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminReturnReasonsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminReturnReasonsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminReturnReasonsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReturnReasonsDeleteResExtension on AdminReturnReasonsDeleteRes {
  AdminReturnReasonsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminReturnReasonsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminReturnReasonsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminReturnReasonsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReturnReasonsListRes {
  const AdminReturnReasonsListRes({
    required this.returnReasons,
  });

  factory AdminReturnReasonsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReturnReasonsListResFromJson(json);

  static const toJsonFactory = _$AdminReturnReasonsListResToJson;
  Map<String, dynamic> toJson() => _$AdminReturnReasonsListResToJson(this);

  @JsonKey(
      name: 'return_reasons',
      includeIfNull: false,
      defaultValue: <ReturnReason>[])
  final List<ReturnReason> returnReasons;
  static const fromJsonFactory = _$AdminReturnReasonsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReturnReasonsListResExtension on AdminReturnReasonsListRes {
  AdminReturnReasonsListRes copyWith({List<ReturnReason>? returnReasons}) {
    return AdminReturnReasonsListRes(
        returnReasons: returnReasons ?? this.returnReasons);
  }

  AdminReturnReasonsListRes copyWithWrapped(
      {Wrapped<List<ReturnReason>>? returnReasons}) {
    return AdminReturnReasonsListRes(
        returnReasons:
            (returnReasons != null ? returnReasons.value : this.returnReasons));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReturnReasonsRes {
  const AdminReturnReasonsRes({
    required this.returnReason,
  });

  factory AdminReturnReasonsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReturnReasonsResFromJson(json);

  static const toJsonFactory = _$AdminReturnReasonsResToJson;
  Map<String, dynamic> toJson() => _$AdminReturnReasonsResToJson(this);

  @JsonKey(name: 'return_reason', includeIfNull: false)
  final ReturnReason? returnReason;
  static const fromJsonFactory = _$AdminReturnReasonsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReturnReasonsResExtension on AdminReturnReasonsRes {
  AdminReturnReasonsRes copyWith({ReturnReason? returnReason}) {
    return AdminReturnReasonsRes(
        returnReason: returnReason ?? this.returnReason);
  }

  AdminReturnReasonsRes copyWithWrapped(
      {Wrapped<ReturnReason?>? returnReason}) {
    return AdminReturnReasonsRes(
        returnReason:
            (returnReason != null ? returnReason.value : this.returnReason));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReturnsCancelRes {
  const AdminReturnsCancelRes({
    required this.order,
  });

  factory AdminReturnsCancelRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReturnsCancelResFromJson(json);

  static const toJsonFactory = _$AdminReturnsCancelResToJson;
  Map<String, dynamic> toJson() => _$AdminReturnsCancelResToJson(this);

  @JsonKey(name: 'order', includeIfNull: false)
  final Order order;
  static const fromJsonFactory = _$AdminReturnsCancelResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReturnsCancelResExtension on AdminReturnsCancelRes {
  AdminReturnsCancelRes copyWith({Order? order}) {
    return AdminReturnsCancelRes(order: order ?? this.order);
  }

  AdminReturnsCancelRes copyWithWrapped({Wrapped<Order>? order}) {
    return AdminReturnsCancelRes(
        order: (order != null ? order.value : this.order));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReturnsListRes {
  const AdminReturnsListRes({
    required this.returns,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminReturnsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReturnsListResFromJson(json);

  static const toJsonFactory = _$AdminReturnsListResToJson;
  Map<String, dynamic> toJson() => _$AdminReturnsListResToJson(this);

  @JsonKey(name: 'returns', includeIfNull: false, defaultValue: <Return>[])
  final List<Return> returns;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminReturnsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReturnsListResExtension on AdminReturnsListRes {
  AdminReturnsListRes copyWith(
      {List<Return>? returns, int? count, int? offset, int? limit}) {
    return AdminReturnsListRes(
        returns: returns ?? this.returns,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminReturnsListRes copyWithWrapped(
      {Wrapped<List<Return>>? returns,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminReturnsListRes(
        returns: (returns != null ? returns.value : this.returns),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminReturnsRes {
  const AdminReturnsRes({
    required this.$return,
  });

  factory AdminReturnsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminReturnsResFromJson(json);

  static const toJsonFactory = _$AdminReturnsResToJson;
  Map<String, dynamic> toJson() => _$AdminReturnsResToJson(this);

  @JsonKey(name: 'return', includeIfNull: false)
  final Return? $return;
  static const fromJsonFactory = _$AdminReturnsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminReturnsResExtension on AdminReturnsRes {
  AdminReturnsRes copyWith({Return? $return}) {
    return AdminReturnsRes($return: $return ?? this.$return);
  }

  AdminReturnsRes copyWithWrapped({Wrapped<Return?>? $return}) {
    return AdminReturnsRes(
        $return: ($return != null ? $return.value : this.$return));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminSalesChannelsDeleteLocationRes {
  const AdminSalesChannelsDeleteLocationRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminSalesChannelsDeleteLocationRes.fromJson(
          Map<String, dynamic> json) =>
      _$AdminSalesChannelsDeleteLocationResFromJson(json);

  static const toJsonFactory = _$AdminSalesChannelsDeleteLocationResToJson;
  Map<String, dynamic> toJson() =>
      _$AdminSalesChannelsDeleteLocationResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminSalesChannelsDeleteLocationResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminSalesChannelsDeleteLocationResExtension
    on AdminSalesChannelsDeleteLocationRes {
  AdminSalesChannelsDeleteLocationRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminSalesChannelsDeleteLocationRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminSalesChannelsDeleteLocationRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminSalesChannelsDeleteLocationRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminSalesChannelsDeleteRes {
  const AdminSalesChannelsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminSalesChannelsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminSalesChannelsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminSalesChannelsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminSalesChannelsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminSalesChannelsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminSalesChannelsDeleteResExtension on AdminSalesChannelsDeleteRes {
  AdminSalesChannelsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminSalesChannelsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminSalesChannelsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminSalesChannelsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminSalesChannelsListRes {
  const AdminSalesChannelsListRes({
    required this.salesChannels,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminSalesChannelsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminSalesChannelsListResFromJson(json);

  static const toJsonFactory = _$AdminSalesChannelsListResToJson;
  Map<String, dynamic> toJson() => _$AdminSalesChannelsListResToJson(this);

  @JsonKey(
      name: 'sales_channels',
      includeIfNull: false,
      defaultValue: <SalesChannel>[])
  final List<SalesChannel> salesChannels;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminSalesChannelsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminSalesChannelsListResExtension on AdminSalesChannelsListRes {
  AdminSalesChannelsListRes copyWith(
      {List<SalesChannel>? salesChannels,
      int? count,
      int? offset,
      int? limit}) {
    return AdminSalesChannelsListRes(
        salesChannels: salesChannels ?? this.salesChannels,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminSalesChannelsListRes copyWithWrapped(
      {Wrapped<List<SalesChannel>>? salesChannels,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminSalesChannelsListRes(
        salesChannels:
            (salesChannels != null ? salesChannels.value : this.salesChannels),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminSalesChannelsRes {
  const AdminSalesChannelsRes({
    required this.salesChannel,
  });

  factory AdminSalesChannelsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminSalesChannelsResFromJson(json);

  static const toJsonFactory = _$AdminSalesChannelsResToJson;
  Map<String, dynamic> toJson() => _$AdminSalesChannelsResToJson(this);

  @JsonKey(name: 'sales_channel', includeIfNull: false)
  final SalesChannel? salesChannel;
  static const fromJsonFactory = _$AdminSalesChannelsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminSalesChannelsResExtension on AdminSalesChannelsRes {
  AdminSalesChannelsRes copyWith({SalesChannel? salesChannel}) {
    return AdminSalesChannelsRes(
        salesChannel: salesChannel ?? this.salesChannel);
  }

  AdminSalesChannelsRes copyWithWrapped(
      {Wrapped<SalesChannel?>? salesChannel}) {
    return AdminSalesChannelsRes(
        salesChannel:
            (salesChannel != null ? salesChannel.value : this.salesChannel));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminShippingOptionsDeleteRes {
  const AdminShippingOptionsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminShippingOptionsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminShippingOptionsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminShippingOptionsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminShippingOptionsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminShippingOptionsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminShippingOptionsDeleteResExtension
    on AdminShippingOptionsDeleteRes {
  AdminShippingOptionsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminShippingOptionsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminShippingOptionsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminShippingOptionsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminShippingOptionsListRes {
  const AdminShippingOptionsListRes({
    required this.shippingOptions,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminShippingOptionsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminShippingOptionsListResFromJson(json);

  static const toJsonFactory = _$AdminShippingOptionsListResToJson;
  Map<String, dynamic> toJson() => _$AdminShippingOptionsListResToJson(this);

  @JsonKey(
      name: 'shipping_options',
      includeIfNull: false,
      defaultValue: <ShippingOption>[])
  final List<ShippingOption> shippingOptions;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminShippingOptionsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminShippingOptionsListResExtension on AdminShippingOptionsListRes {
  AdminShippingOptionsListRes copyWith(
      {List<ShippingOption>? shippingOptions,
      int? count,
      int? offset,
      int? limit}) {
    return AdminShippingOptionsListRes(
        shippingOptions: shippingOptions ?? this.shippingOptions,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminShippingOptionsListRes copyWithWrapped(
      {Wrapped<List<ShippingOption>>? shippingOptions,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminShippingOptionsListRes(
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminShippingOptionsRes {
  const AdminShippingOptionsRes({
    required this.shippingOption,
  });

  factory AdminShippingOptionsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminShippingOptionsResFromJson(json);

  static const toJsonFactory = _$AdminShippingOptionsResToJson;
  Map<String, dynamic> toJson() => _$AdminShippingOptionsResToJson(this);

  @JsonKey(name: 'shipping_option', includeIfNull: false)
  final ShippingOption? shippingOption;
  static const fromJsonFactory = _$AdminShippingOptionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminShippingOptionsResExtension on AdminShippingOptionsRes {
  AdminShippingOptionsRes copyWith({ShippingOption? shippingOption}) {
    return AdminShippingOptionsRes(
        shippingOption: shippingOption ?? this.shippingOption);
  }

  AdminShippingOptionsRes copyWithWrapped(
      {Wrapped<ShippingOption?>? shippingOption}) {
    return AdminShippingOptionsRes(
        shippingOption: (shippingOption != null
            ? shippingOption.value
            : this.shippingOption));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminShippingProfilesListRes {
  const AdminShippingProfilesListRes({
    required this.shippingProfiles,
  });

  factory AdminShippingProfilesListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminShippingProfilesListResFromJson(json);

  static const toJsonFactory = _$AdminShippingProfilesListResToJson;
  Map<String, dynamic> toJson() => _$AdminShippingProfilesListResToJson(this);

  @JsonKey(
      name: 'shipping_profiles',
      includeIfNull: false,
      defaultValue: <ShippingProfile>[])
  final List<ShippingProfile> shippingProfiles;
  static const fromJsonFactory = _$AdminShippingProfilesListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminShippingProfilesListResExtension
    on AdminShippingProfilesListRes {
  AdminShippingProfilesListRes copyWith(
      {List<ShippingProfile>? shippingProfiles}) {
    return AdminShippingProfilesListRes(
        shippingProfiles: shippingProfiles ?? this.shippingProfiles);
  }

  AdminShippingProfilesListRes copyWithWrapped(
      {Wrapped<List<ShippingProfile>>? shippingProfiles}) {
    return AdminShippingProfilesListRes(
        shippingProfiles: (shippingProfiles != null
            ? shippingProfiles.value
            : this.shippingProfiles));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminShippingProfilesRes {
  const AdminShippingProfilesRes({
    required this.shippingProfile,
  });

  factory AdminShippingProfilesRes.fromJson(Map<String, dynamic> json) =>
      _$AdminShippingProfilesResFromJson(json);

  static const toJsonFactory = _$AdminShippingProfilesResToJson;
  Map<String, dynamic> toJson() => _$AdminShippingProfilesResToJson(this);

  @JsonKey(name: 'shipping_profile', includeIfNull: false)
  final ShippingProfile? shippingProfile;
  static const fromJsonFactory = _$AdminShippingProfilesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminShippingProfilesResExtension on AdminShippingProfilesRes {
  AdminShippingProfilesRes copyWith({ShippingProfile? shippingProfile}) {
    return AdminShippingProfilesRes(
        shippingProfile: shippingProfile ?? this.shippingProfile);
  }

  AdminShippingProfilesRes copyWithWrapped(
      {Wrapped<ShippingProfile?>? shippingProfile}) {
    return AdminShippingProfilesRes(
        shippingProfile: (shippingProfile != null
            ? shippingProfile.value
            : this.shippingProfile));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminStockLocationsDeleteRes {
  const AdminStockLocationsDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminStockLocationsDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminStockLocationsDeleteResFromJson(json);

  static const toJsonFactory = _$AdminStockLocationsDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminStockLocationsDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminStockLocationsDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminStockLocationsDeleteResExtension
    on AdminStockLocationsDeleteRes {
  AdminStockLocationsDeleteRes copyWith(
      {String? id, String? object, bool? deleted}) {
    return AdminStockLocationsDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminStockLocationsDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminStockLocationsDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminStockLocationsListRes {
  const AdminStockLocationsListRes({
    required this.stockLocations,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminStockLocationsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminStockLocationsListResFromJson(json);

  static const toJsonFactory = _$AdminStockLocationsListResToJson;
  Map<String, dynamic> toJson() => _$AdminStockLocationsListResToJson(this);

  @JsonKey(
      name: 'stock_locations',
      includeIfNull: false,
      defaultValue: <StockLocationExpandedDTO>[])
  final List<StockLocationExpandedDTO> stockLocations;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminStockLocationsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminStockLocationsListResExtension on AdminStockLocationsListRes {
  AdminStockLocationsListRes copyWith(
      {List<StockLocationExpandedDTO>? stockLocations,
      int? count,
      int? offset,
      int? limit}) {
    return AdminStockLocationsListRes(
        stockLocations: stockLocations ?? this.stockLocations,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminStockLocationsListRes copyWithWrapped(
      {Wrapped<List<StockLocationExpandedDTO>>? stockLocations,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminStockLocationsListRes(
        stockLocations: (stockLocations != null
            ? stockLocations.value
            : this.stockLocations),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminStockLocationsRes {
  const AdminStockLocationsRes({
    required this.stockLocation,
  });

  factory AdminStockLocationsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminStockLocationsResFromJson(json);

  static const toJsonFactory = _$AdminStockLocationsResToJson;
  Map<String, dynamic> toJson() => _$AdminStockLocationsResToJson(this);

  @JsonKey(name: 'stock_location', includeIfNull: false)
  final StockLocationExpandedDTO? stockLocation;
  static const fromJsonFactory = _$AdminStockLocationsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminStockLocationsResExtension on AdminStockLocationsRes {
  AdminStockLocationsRes copyWith({StockLocationExpandedDTO? stockLocation}) {
    return AdminStockLocationsRes(
        stockLocation: stockLocation ?? this.stockLocation);
  }

  AdminStockLocationsRes copyWithWrapped(
      {Wrapped<StockLocationExpandedDTO?>? stockLocation}) {
    return AdminStockLocationsRes(
        stockLocation:
            (stockLocation != null ? stockLocation.value : this.stockLocation));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminStoresRes {
  const AdminStoresRes({
    required this.store,
  });

  factory AdminStoresRes.fromJson(Map<String, dynamic> json) =>
      _$AdminStoresResFromJson(json);

  static const toJsonFactory = _$AdminStoresResToJson;
  Map<String, dynamic> toJson() => _$AdminStoresResToJson(this);

  @JsonKey(name: 'store', includeIfNull: false)
  final Store store;
  static const fromJsonFactory = _$AdminStoresResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminStoresResExtension on AdminStoresRes {
  AdminStoresRes copyWith({Store? store}) {
    return AdminStoresRes(store: store ?? this.store);
  }

  AdminStoresRes copyWithWrapped({Wrapped<Store>? store}) {
    return AdminStoresRes(store: (store != null ? store.value : this.store));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminSwapsListRes {
  const AdminSwapsListRes({
    required this.swaps,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminSwapsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminSwapsListResFromJson(json);

  static const toJsonFactory = _$AdminSwapsListResToJson;
  Map<String, dynamic> toJson() => _$AdminSwapsListResToJson(this);

  @JsonKey(name: 'swaps', includeIfNull: false, defaultValue: <Swap>[])
  final List<Swap> swaps;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminSwapsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminSwapsListResExtension on AdminSwapsListRes {
  AdminSwapsListRes copyWith(
      {List<Swap>? swaps, int? count, int? offset, int? limit}) {
    return AdminSwapsListRes(
        swaps: swaps ?? this.swaps,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminSwapsListRes copyWithWrapped(
      {Wrapped<List<Swap>>? swaps,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminSwapsListRes(
        swaps: (swaps != null ? swaps.value : this.swaps),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminSwapsRes {
  const AdminSwapsRes({
    required this.swap,
  });

  factory AdminSwapsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminSwapsResFromJson(json);

  static const toJsonFactory = _$AdminSwapsResToJson;
  Map<String, dynamic> toJson() => _$AdminSwapsResToJson(this);

  @JsonKey(name: 'swap', includeIfNull: false)
  final Swap swap;
  static const fromJsonFactory = _$AdminSwapsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminSwapsResExtension on AdminSwapsRes {
  AdminSwapsRes copyWith({Swap? swap}) {
    return AdminSwapsRes(swap: swap ?? this.swap);
  }

  AdminSwapsRes copyWithWrapped({Wrapped<Swap>? swap}) {
    return AdminSwapsRes(swap: (swap != null ? swap.value : this.swap));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminTaxProvidersList {
  const AdminTaxProvidersList({
    required this.taxProviders,
  });

  factory AdminTaxProvidersList.fromJson(Map<String, dynamic> json) =>
      _$AdminTaxProvidersListFromJson(json);

  static const toJsonFactory = _$AdminTaxProvidersListToJson;
  Map<String, dynamic> toJson() => _$AdminTaxProvidersListToJson(this);

  @JsonKey(
      name: 'tax_providers',
      includeIfNull: false,
      defaultValue: <TaxProvider>[])
  final List<TaxProvider> taxProviders;
  static const fromJsonFactory = _$AdminTaxProvidersListFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminTaxProvidersListExtension on AdminTaxProvidersList {
  AdminTaxProvidersList copyWith({List<TaxProvider>? taxProviders}) {
    return AdminTaxProvidersList(
        taxProviders: taxProviders ?? this.taxProviders);
  }

  AdminTaxProvidersList copyWithWrapped(
      {Wrapped<List<TaxProvider>>? taxProviders}) {
    return AdminTaxProvidersList(
        taxProviders:
            (taxProviders != null ? taxProviders.value : this.taxProviders));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminTaxRatesDeleteRes {
  const AdminTaxRatesDeleteRes({
    required this.id,
    required this.object,
    required this.deleted,
  });

  factory AdminTaxRatesDeleteRes.fromJson(Map<String, dynamic> json) =>
      _$AdminTaxRatesDeleteResFromJson(json);

  static const toJsonFactory = _$AdminTaxRatesDeleteResToJson;
  Map<String, dynamic> toJson() => _$AdminTaxRatesDeleteResToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'object', includeIfNull: false, defaultValue: 'default')
  final String object;
  @JsonKey(name: 'deleted', includeIfNull: false, defaultValue: true)
  final bool deleted;
  static const fromJsonFactory = _$AdminTaxRatesDeleteResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminTaxRatesDeleteResExtension on AdminTaxRatesDeleteRes {
  AdminTaxRatesDeleteRes copyWith({String? id, String? object, bool? deleted}) {
    return AdminTaxRatesDeleteRes(
        id: id ?? this.id,
        object: object ?? this.object,
        deleted: deleted ?? this.deleted);
  }

  AdminTaxRatesDeleteRes copyWithWrapped(
      {Wrapped<String>? id, Wrapped<String>? object, Wrapped<bool>? deleted}) {
    return AdminTaxRatesDeleteRes(
        id: (id != null ? id.value : this.id),
        object: (object != null ? object.value : this.object),
        deleted: (deleted != null ? deleted.value : this.deleted));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminTaxRatesListRes {
  const AdminTaxRatesListRes({
    required this.taxRates,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminTaxRatesListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminTaxRatesListResFromJson(json);

  static const toJsonFactory = _$AdminTaxRatesListResToJson;
  Map<String, dynamic> toJson() => _$AdminTaxRatesListResToJson(this);

  @JsonKey(name: 'tax_rates', includeIfNull: false, defaultValue: <TaxRate>[])
  final List<TaxRate> taxRates;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminTaxRatesListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminTaxRatesListResExtension on AdminTaxRatesListRes {
  AdminTaxRatesListRes copyWith(
      {List<TaxRate>? taxRates, int? count, int? offset, int? limit}) {
    return AdminTaxRatesListRes(
        taxRates: taxRates ?? this.taxRates,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminTaxRatesListRes copyWithWrapped(
      {Wrapped<List<TaxRate>>? taxRates,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminTaxRatesListRes(
        taxRates: (taxRates != null ? taxRates.value : this.taxRates),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminTaxRatesRes {
  const AdminTaxRatesRes({
    required this.taxRate,
  });

  factory AdminTaxRatesRes.fromJson(Map<String, dynamic> json) =>
      _$AdminTaxRatesResFromJson(json);

  static const toJsonFactory = _$AdminTaxRatesResToJson;
  Map<String, dynamic> toJson() => _$AdminTaxRatesResToJson(this);

  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final TaxRate? taxRate;
  static const fromJsonFactory = _$AdminTaxRatesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminTaxRatesResExtension on AdminTaxRatesRes {
  AdminTaxRatesRes copyWith({TaxRate? taxRate}) {
    return AdminTaxRatesRes(taxRate: taxRate ?? this.taxRate);
  }

  AdminTaxRatesRes copyWithWrapped({Wrapped<TaxRate?>? taxRate}) {
    return AdminTaxRatesRes(
        taxRate: (taxRate != null ? taxRate.value : this.taxRate));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminUpdatePaymentCollectionsReq {
  const AdminUpdatePaymentCollectionsReq({
    this.description,
    this.metadata,
  });

  factory AdminUpdatePaymentCollectionsReq.fromJson(
          Map<String, dynamic> json) =>
      _$AdminUpdatePaymentCollectionsReqFromJson(json);

  static const toJsonFactory = _$AdminUpdatePaymentCollectionsReqToJson;
  Map<String, dynamic> toJson() =>
      _$AdminUpdatePaymentCollectionsReqToJson(this);

  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminUpdatePaymentCollectionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUpdatePaymentCollectionsReqExtension
    on AdminUpdatePaymentCollectionsReq {
  AdminUpdatePaymentCollectionsReq copyWith(
      {String? description, Object? metadata}) {
    return AdminUpdatePaymentCollectionsReq(
        description: description ?? this.description,
        metadata: metadata ?? this.metadata);
  }

  AdminUpdatePaymentCollectionsReq copyWithWrapped(
      {Wrapped<String?>? description, Wrapped<Object?>? metadata}) {
    return AdminUpdatePaymentCollectionsReq(
        description:
            (description != null ? description.value : this.description),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminUpdateUserRequest {
  const AdminUpdateUserRequest({
    this.firstName,
    this.lastName,
    this.role,
    this.apiToken,
    this.metadata,
  });

  factory AdminUpdateUserRequest.fromJson(Map<String, dynamic> json) =>
      _$AdminUpdateUserRequestFromJson(json);

  static const toJsonFactory = _$AdminUpdateUserRequestToJson;
  Map<String, dynamic> toJson() => _$AdminUpdateUserRequestToJson(this);

  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String? firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String? lastName;
  @JsonKey(
    name: 'role',
    includeIfNull: false,
    toJson: adminUpdateUserRequestRoleNullableToJson,
    fromJson: adminUpdateUserRequestRoleNullableFromJson,
  )
  final enums.AdminUpdateUserRequestRole? role;
  @JsonKey(name: 'api_token', includeIfNull: false, defaultValue: 'default')
  final String? apiToken;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminUpdateUserRequestFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUpdateUserRequestExtension on AdminUpdateUserRequest {
  AdminUpdateUserRequest copyWith(
      {String? firstName,
      String? lastName,
      enums.AdminUpdateUserRequestRole? role,
      String? apiToken,
      Object? metadata}) {
    return AdminUpdateUserRequest(
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        role: role ?? this.role,
        apiToken: apiToken ?? this.apiToken,
        metadata: metadata ?? this.metadata);
  }

  AdminUpdateUserRequest copyWithWrapped(
      {Wrapped<String?>? firstName,
      Wrapped<String?>? lastName,
      Wrapped<enums.AdminUpdateUserRequestRole?>? role,
      Wrapped<String?>? apiToken,
      Wrapped<Object?>? metadata}) {
    return AdminUpdateUserRequest(
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        role: (role != null ? role.value : this.role),
        apiToken: (apiToken != null ? apiToken.value : this.apiToken),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminUploadsDownloadUrlRes {
  const AdminUploadsDownloadUrlRes({
    required this.downloadUrl,
  });

  factory AdminUploadsDownloadUrlRes.fromJson(Map<String, dynamic> json) =>
      _$AdminUploadsDownloadUrlResFromJson(json);

  static const toJsonFactory = _$AdminUploadsDownloadUrlResToJson;
  Map<String, dynamic> toJson() => _$AdminUploadsDownloadUrlResToJson(this);

  @JsonKey(name: 'download_url', includeIfNull: false, defaultValue: 'default')
  final String downloadUrl;
  static const fromJsonFactory = _$AdminUploadsDownloadUrlResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUploadsDownloadUrlResExtension on AdminUploadsDownloadUrlRes {
  AdminUploadsDownloadUrlRes copyWith({String? downloadUrl}) {
    return AdminUploadsDownloadUrlRes(
        downloadUrl: downloadUrl ?? this.downloadUrl);
  }

  AdminUploadsDownloadUrlRes copyWithWrapped({Wrapped<String>? downloadUrl}) {
    return AdminUploadsDownloadUrlRes(
        downloadUrl:
            (downloadUrl != null ? downloadUrl.value : this.downloadUrl));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminUploadsRes {
  const AdminUploadsRes({
    required this.uploads,
  });

  factory AdminUploadsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminUploadsResFromJson(json);

  static const toJsonFactory = _$AdminUploadsResToJson;
  Map<String, dynamic> toJson() => _$AdminUploadsResToJson(this);

  @JsonKey(name: 'uploads', includeIfNull: false)
  final List<AdminUploadsRes$Uploads$Item> uploads;
  static const fromJsonFactory = _$AdminUploadsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUploadsResExtension on AdminUploadsRes {
  AdminUploadsRes copyWith({List<AdminUploadsRes$Uploads$Item>? uploads}) {
    return AdminUploadsRes(uploads: uploads ?? this.uploads);
  }

  AdminUploadsRes copyWithWrapped(
      {Wrapped<List<AdminUploadsRes$Uploads$Item>>? uploads}) {
    return AdminUploadsRes(
        uploads: (uploads != null ? uploads.value : this.uploads));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminUserRes {
  const AdminUserRes({
    required this.user,
  });

  factory AdminUserRes.fromJson(Map<String, dynamic> json) =>
      _$AdminUserResFromJson(json);

  static const toJsonFactory = _$AdminUserResToJson;
  Map<String, dynamic> toJson() => _$AdminUserResToJson(this);

  @JsonKey(name: 'user', includeIfNull: false)
  final User user;
  static const fromJsonFactory = _$AdminUserResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUserResExtension on AdminUserRes {
  AdminUserRes copyWith({User? user}) {
    return AdminUserRes(user: user ?? this.user);
  }

  AdminUserRes copyWithWrapped({Wrapped<User>? user}) {
    return AdminUserRes(user: (user != null ? user.value : this.user));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminUsersListRes {
  const AdminUsersListRes({
    required this.users,
  });

  factory AdminUsersListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminUsersListResFromJson(json);

  static const toJsonFactory = _$AdminUsersListResToJson;
  Map<String, dynamic> toJson() => _$AdminUsersListResToJson(this);

  @JsonKey(name: 'users', includeIfNull: false, defaultValue: <User>[])
  final List<User> users;
  static const fromJsonFactory = _$AdminUsersListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUsersListResExtension on AdminUsersListRes {
  AdminUsersListRes copyWith({List<User>? users}) {
    return AdminUsersListRes(users: users ?? this.users);
  }

  AdminUsersListRes copyWithWrapped({Wrapped<List<User>>? users}) {
    return AdminUsersListRes(users: (users != null ? users.value : this.users));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminVariantsListRes {
  const AdminVariantsListRes({
    required this.variants,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory AdminVariantsListRes.fromJson(Map<String, dynamic> json) =>
      _$AdminVariantsListResFromJson(json);

  static const toJsonFactory = _$AdminVariantsListResToJson;
  Map<String, dynamic> toJson() => _$AdminVariantsListResToJson(this);

  @JsonKey(
      name: 'variants', includeIfNull: false, defaultValue: <PricedVariant>[])
  final List<PricedVariant> variants;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$AdminVariantsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminVariantsListResExtension on AdminVariantsListRes {
  AdminVariantsListRes copyWith(
      {List<PricedVariant>? variants, int? count, int? offset, int? limit}) {
    return AdminVariantsListRes(
        variants: variants ?? this.variants,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  AdminVariantsListRes copyWithWrapped(
      {Wrapped<List<PricedVariant>>? variants,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return AdminVariantsListRes(
        variants: (variants != null ? variants.value : this.variants),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminVariantsRes {
  const AdminVariantsRes({
    required this.variant,
  });

  factory AdminVariantsRes.fromJson(Map<String, dynamic> json) =>
      _$AdminVariantsResFromJson(json);

  static const toJsonFactory = _$AdminVariantsResToJson;
  Map<String, dynamic> toJson() => _$AdminVariantsResToJson(this);

  @JsonKey(name: 'variant', includeIfNull: false)
  final PricedVariant variant;
  static const fromJsonFactory = _$AdminVariantsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminVariantsResExtension on AdminVariantsRes {
  AdminVariantsRes copyWith({PricedVariant? variant}) {
    return AdminVariantsRes(variant: variant ?? this.variant);
  }

  AdminVariantsRes copyWithWrapped({Wrapped<PricedVariant>? variant}) {
    return AdminVariantsRes(
        variant: (variant != null ? variant.value : this.variant));
  }
}

@JsonSerializable(explicitToJson: true)
class BatchJob {
  const BatchJob({
    required this.id,
    required this.type,
    required this.status,
    required this.createdBy,
    this.createdByUser,
    required this.context,
    required this.dryRun,
    required this.result,
    required this.preProcessedAt,
    required this.processingAt,
    required this.confirmedAt,
    required this.completedAt,
    required this.canceledAt,
    required this.failedAt,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
  });

  factory BatchJob.fromJson(Map<String, dynamic> json) =>
      _$BatchJobFromJson(json);

  static const toJsonFactory = _$BatchJobToJson;
  Map<String, dynamic> toJson() => _$BatchJobToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: batchJobTypeToJson,
    fromJson: batchJobTypeFromJson,
  )
  final enums.BatchJobType type;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: batchJobStatusToJson,
    fromJson: batchJobStatusStatusFromJson,
  )
  final enums.BatchJobStatus status;
  static enums.BatchJobStatus batchJobStatusStatusFromJson(Object? value) =>
      batchJobStatusFromJson(value, enums.BatchJobStatus.created);

  @JsonKey(name: 'created_by', includeIfNull: false, defaultValue: 'default')
  final String? createdBy;
  @JsonKey(name: 'created_by_user', includeIfNull: false)
  final User? createdByUser;
  @JsonKey(name: 'context', includeIfNull: false)
  final Object? context;
  @JsonKey(name: 'dry_run', includeIfNull: false, defaultValue: false)
  final bool dryRun;
  @JsonKey(name: 'result', includeIfNull: false)
  final Object? result;
  @JsonKey(name: 'pre_processed_at', includeIfNull: false)
  final DateTime? preProcessedAt;
  @JsonKey(name: 'processing_at', includeIfNull: false)
  final DateTime? processingAt;
  @JsonKey(name: 'confirmed_at', includeIfNull: false)
  final DateTime? confirmedAt;
  @JsonKey(name: 'completed_at', includeIfNull: false)
  final DateTime? completedAt;
  @JsonKey(name: 'canceled_at', includeIfNull: false)
  final DateTime? canceledAt;
  @JsonKey(name: 'failed_at', includeIfNull: false)
  final DateTime? failedAt;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$BatchJobFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $BatchJobExtension on BatchJob {
  BatchJob copyWith(
      {String? id,
      enums.BatchJobType? type,
      enums.BatchJobStatus? status,
      String? createdBy,
      User? createdByUser,
      Object? context,
      bool? dryRun,
      Object? result,
      DateTime? preProcessedAt,
      DateTime? processingAt,
      DateTime? confirmedAt,
      DateTime? completedAt,
      DateTime? canceledAt,
      DateTime? failedAt,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return BatchJob(
        id: id ?? this.id,
        type: type ?? this.type,
        status: status ?? this.status,
        createdBy: createdBy ?? this.createdBy,
        createdByUser: createdByUser ?? this.createdByUser,
        context: context ?? this.context,
        dryRun: dryRun ?? this.dryRun,
        result: result ?? this.result,
        preProcessedAt: preProcessedAt ?? this.preProcessedAt,
        processingAt: processingAt ?? this.processingAt,
        confirmedAt: confirmedAt ?? this.confirmedAt,
        completedAt: completedAt ?? this.completedAt,
        canceledAt: canceledAt ?? this.canceledAt,
        failedAt: failedAt ?? this.failedAt,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  BatchJob copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.BatchJobType>? type,
      Wrapped<enums.BatchJobStatus>? status,
      Wrapped<String?>? createdBy,
      Wrapped<User?>? createdByUser,
      Wrapped<Object?>? context,
      Wrapped<bool>? dryRun,
      Wrapped<Object?>? result,
      Wrapped<DateTime?>? preProcessedAt,
      Wrapped<DateTime?>? processingAt,
      Wrapped<DateTime?>? confirmedAt,
      Wrapped<DateTime?>? completedAt,
      Wrapped<DateTime?>? canceledAt,
      Wrapped<DateTime?>? failedAt,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return BatchJob(
        id: (id != null ? id.value : this.id),
        type: (type != null ? type.value : this.type),
        status: (status != null ? status.value : this.status),
        createdBy: (createdBy != null ? createdBy.value : this.createdBy),
        createdByUser:
            (createdByUser != null ? createdByUser.value : this.createdByUser),
        context: (context != null ? context.value : this.context),
        dryRun: (dryRun != null ? dryRun.value : this.dryRun),
        result: (result != null ? result.value : this.result),
        preProcessedAt: (preProcessedAt != null
            ? preProcessedAt.value
            : this.preProcessedAt),
        processingAt:
            (processingAt != null ? processingAt.value : this.processingAt),
        confirmedAt:
            (confirmedAt != null ? confirmedAt.value : this.confirmedAt),
        completedAt:
            (completedAt != null ? completedAt.value : this.completedAt),
        canceledAt: (canceledAt != null ? canceledAt.value : this.canceledAt),
        failedAt: (failedAt != null ? failedAt.value : this.failedAt),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class Cart {
  const Cart({
    required this.id,
    required this.email,
    required this.billingAddressId,
    this.billingAddress,
    required this.shippingAddressId,
    this.shippingAddress,
    this.items,
    required this.regionId,
    this.region,
    this.discounts,
    this.giftCards,
    required this.customerId,
    this.customer,
    required this.paymentSession,
    this.paymentSessions,
    required this.paymentId,
    this.payment,
    this.shippingMethods,
    required this.type,
    required this.completedAt,
    required this.paymentAuthorizedAt,
    required this.idempotencyKey,
    required this.context,
    this.salesChannelId,
    this.salesChannel,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
    this.shippingTotal,
    this.discountTotal,
    this.rawDiscountTotal,
    this.itemTaxTotal,
    this.shippingTaxTotal,
    this.taxTotal,
    this.refundedTotal,
    this.total,
    this.subtotal,
    this.refundableAmount,
    this.giftCardTotal,
    this.giftCardTaxTotal,
  });

  factory Cart.fromJson(Map<String, dynamic> json) => _$CartFromJson(json);

  static const toJsonFactory = _$CartToJson;
  Map<String, dynamic> toJson() => _$CartToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String? email;
  @JsonKey(
      name: 'billing_address_id', includeIfNull: false, defaultValue: 'default')
  final String? billingAddressId;
  @JsonKey(name: 'billing_address', includeIfNull: false)
  final Address? billingAddress;
  @JsonKey(
      name: 'shipping_address_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? shippingAddressId;
  @JsonKey(name: 'shipping_address', includeIfNull: false)
  final Address? shippingAddress;
  @JsonKey(name: 'items', includeIfNull: false, defaultValue: <LineItem>[])
  final List<LineItem>? items;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  @JsonKey(name: 'discounts', includeIfNull: false, defaultValue: <Discount>[])
  final List<Discount>? discounts;
  @JsonKey(name: 'gift_cards', includeIfNull: false, defaultValue: <GiftCard>[])
  final List<GiftCard>? giftCards;
  @JsonKey(name: 'customer_id', includeIfNull: false, defaultValue: 'default')
  final String? customerId;
  @JsonKey(name: 'customer', includeIfNull: false)
  final Customer? customer;
  @JsonKey(name: 'payment_session', includeIfNull: false)
  final PaymentSession? paymentSession;
  @JsonKey(
      name: 'payment_sessions',
      includeIfNull: false,
      defaultValue: <PaymentSession>[])
  final List<PaymentSession>? paymentSessions;
  @JsonKey(name: 'payment_id', includeIfNull: false, defaultValue: 'default')
  final String? paymentId;
  @JsonKey(name: 'payment', includeIfNull: false)
  final Payment? payment;
  @JsonKey(
      name: 'shipping_methods',
      includeIfNull: false,
      defaultValue: <ShippingMethod>[])
  final List<ShippingMethod>? shippingMethods;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: cartTypeToJson,
    fromJson: cartTypeTypeFromJson,
  )
  final enums.CartType type;
  static enums.CartType cartTypeTypeFromJson(Object? value) =>
      cartTypeFromJson(value, enums.CartType.$default);

  @JsonKey(name: 'completed_at', includeIfNull: false)
  final DateTime? completedAt;
  @JsonKey(name: 'payment_authorized_at', includeIfNull: false)
  final DateTime? paymentAuthorizedAt;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'context', includeIfNull: false)
  final Object? context;
  @JsonKey(
      name: 'sales_channel_id', includeIfNull: false, defaultValue: 'default')
  final String? salesChannelId;
  @JsonKey(name: 'sales_channel', includeIfNull: false)
  final SalesChannel? salesChannel;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'shipping_total', includeIfNull: false, defaultValue: 36)
  final int? shippingTotal;
  @JsonKey(name: 'discount_total', includeIfNull: false, defaultValue: 36)
  final int? discountTotal;
  @JsonKey(name: 'raw_discount_total', includeIfNull: false, defaultValue: 36)
  final int? rawDiscountTotal;
  @JsonKey(name: 'item_tax_total', includeIfNull: false, defaultValue: 36)
  final int? itemTaxTotal;
  @JsonKey(name: 'shipping_tax_total', includeIfNull: false, defaultValue: 36)
  final int? shippingTaxTotal;
  @JsonKey(name: 'tax_total', includeIfNull: false, defaultValue: 36)
  final int? taxTotal;
  @JsonKey(name: 'refunded_total', includeIfNull: false, defaultValue: 36)
  final int? refundedTotal;
  @JsonKey(name: 'total', includeIfNull: false, defaultValue: 36)
  final int? total;
  @JsonKey(name: 'subtotal', includeIfNull: false, defaultValue: 36)
  final int? subtotal;
  @JsonKey(name: 'refundable_amount', includeIfNull: false, defaultValue: 36)
  final int? refundableAmount;
  @JsonKey(name: 'gift_card_total', includeIfNull: false, defaultValue: 36)
  final int? giftCardTotal;
  @JsonKey(name: 'gift_card_tax_total', includeIfNull: false, defaultValue: 36)
  final int? giftCardTaxTotal;
  static const fromJsonFactory = _$CartFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $CartExtension on Cart {
  Cart copyWith(
      {String? id,
      String? email,
      String? billingAddressId,
      Address? billingAddress,
      String? shippingAddressId,
      Address? shippingAddress,
      List<LineItem>? items,
      String? regionId,
      Region? region,
      List<Discount>? discounts,
      List<GiftCard>? giftCards,
      String? customerId,
      Customer? customer,
      PaymentSession? paymentSession,
      List<PaymentSession>? paymentSessions,
      String? paymentId,
      Payment? payment,
      List<ShippingMethod>? shippingMethods,
      enums.CartType? type,
      DateTime? completedAt,
      DateTime? paymentAuthorizedAt,
      String? idempotencyKey,
      Object? context,
      String? salesChannelId,
      SalesChannel? salesChannel,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata,
      int? shippingTotal,
      int? discountTotal,
      int? rawDiscountTotal,
      int? itemTaxTotal,
      int? shippingTaxTotal,
      int? taxTotal,
      int? refundedTotal,
      int? total,
      int? subtotal,
      int? refundableAmount,
      int? giftCardTotal,
      int? giftCardTaxTotal}) {
    return Cart(
        id: id ?? this.id,
        email: email ?? this.email,
        billingAddressId: billingAddressId ?? this.billingAddressId,
        billingAddress: billingAddress ?? this.billingAddress,
        shippingAddressId: shippingAddressId ?? this.shippingAddressId,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        items: items ?? this.items,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        discounts: discounts ?? this.discounts,
        giftCards: giftCards ?? this.giftCards,
        customerId: customerId ?? this.customerId,
        customer: customer ?? this.customer,
        paymentSession: paymentSession ?? this.paymentSession,
        paymentSessions: paymentSessions ?? this.paymentSessions,
        paymentId: paymentId ?? this.paymentId,
        payment: payment ?? this.payment,
        shippingMethods: shippingMethods ?? this.shippingMethods,
        type: type ?? this.type,
        completedAt: completedAt ?? this.completedAt,
        paymentAuthorizedAt: paymentAuthorizedAt ?? this.paymentAuthorizedAt,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        context: context ?? this.context,
        salesChannelId: salesChannelId ?? this.salesChannelId,
        salesChannel: salesChannel ?? this.salesChannel,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata,
        shippingTotal: shippingTotal ?? this.shippingTotal,
        discountTotal: discountTotal ?? this.discountTotal,
        rawDiscountTotal: rawDiscountTotal ?? this.rawDiscountTotal,
        itemTaxTotal: itemTaxTotal ?? this.itemTaxTotal,
        shippingTaxTotal: shippingTaxTotal ?? this.shippingTaxTotal,
        taxTotal: taxTotal ?? this.taxTotal,
        refundedTotal: refundedTotal ?? this.refundedTotal,
        total: total ?? this.total,
        subtotal: subtotal ?? this.subtotal,
        refundableAmount: refundableAmount ?? this.refundableAmount,
        giftCardTotal: giftCardTotal ?? this.giftCardTotal,
        giftCardTaxTotal: giftCardTaxTotal ?? this.giftCardTaxTotal);
  }

  Cart copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? email,
      Wrapped<String?>? billingAddressId,
      Wrapped<Address?>? billingAddress,
      Wrapped<String?>? shippingAddressId,
      Wrapped<Address?>? shippingAddress,
      Wrapped<List<LineItem>?>? items,
      Wrapped<String>? regionId,
      Wrapped<Region?>? region,
      Wrapped<List<Discount>?>? discounts,
      Wrapped<List<GiftCard>?>? giftCards,
      Wrapped<String?>? customerId,
      Wrapped<Customer?>? customer,
      Wrapped<PaymentSession?>? paymentSession,
      Wrapped<List<PaymentSession>?>? paymentSessions,
      Wrapped<String?>? paymentId,
      Wrapped<Payment?>? payment,
      Wrapped<List<ShippingMethod>?>? shippingMethods,
      Wrapped<enums.CartType>? type,
      Wrapped<DateTime?>? completedAt,
      Wrapped<DateTime?>? paymentAuthorizedAt,
      Wrapped<String?>? idempotencyKey,
      Wrapped<Object?>? context,
      Wrapped<String?>? salesChannelId,
      Wrapped<SalesChannel?>? salesChannel,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata,
      Wrapped<int?>? shippingTotal,
      Wrapped<int?>? discountTotal,
      Wrapped<int?>? rawDiscountTotal,
      Wrapped<int?>? itemTaxTotal,
      Wrapped<int?>? shippingTaxTotal,
      Wrapped<int?>? taxTotal,
      Wrapped<int?>? refundedTotal,
      Wrapped<int?>? total,
      Wrapped<int?>? subtotal,
      Wrapped<int?>? refundableAmount,
      Wrapped<int?>? giftCardTotal,
      Wrapped<int?>? giftCardTaxTotal}) {
    return Cart(
        id: (id != null ? id.value : this.id),
        email: (email != null ? email.value : this.email),
        billingAddressId: (billingAddressId != null
            ? billingAddressId.value
            : this.billingAddressId),
        billingAddress: (billingAddress != null
            ? billingAddress.value
            : this.billingAddress),
        shippingAddressId: (shippingAddressId != null
            ? shippingAddressId.value
            : this.shippingAddressId),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        items: (items != null ? items.value : this.items),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        discounts: (discounts != null ? discounts.value : this.discounts),
        giftCards: (giftCards != null ? giftCards.value : this.giftCards),
        customerId: (customerId != null ? customerId.value : this.customerId),
        customer: (customer != null ? customer.value : this.customer),
        paymentSession: (paymentSession != null
            ? paymentSession.value
            : this.paymentSession),
        paymentSessions: (paymentSessions != null
            ? paymentSessions.value
            : this.paymentSessions),
        paymentId: (paymentId != null ? paymentId.value : this.paymentId),
        payment: (payment != null ? payment.value : this.payment),
        shippingMethods: (shippingMethods != null
            ? shippingMethods.value
            : this.shippingMethods),
        type: (type != null ? type.value : this.type),
        completedAt:
            (completedAt != null ? completedAt.value : this.completedAt),
        paymentAuthorizedAt: (paymentAuthorizedAt != null
            ? paymentAuthorizedAt.value
            : this.paymentAuthorizedAt),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        context: (context != null ? context.value : this.context),
        salesChannelId: (salesChannelId != null
            ? salesChannelId.value
            : this.salesChannelId),
        salesChannel:
            (salesChannel != null ? salesChannel.value : this.salesChannel),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata),
        shippingTotal:
            (shippingTotal != null ? shippingTotal.value : this.shippingTotal),
        discountTotal:
            (discountTotal != null ? discountTotal.value : this.discountTotal),
        rawDiscountTotal: (rawDiscountTotal != null
            ? rawDiscountTotal.value
            : this.rawDiscountTotal),
        itemTaxTotal:
            (itemTaxTotal != null ? itemTaxTotal.value : this.itemTaxTotal),
        shippingTaxTotal: (shippingTaxTotal != null
            ? shippingTaxTotal.value
            : this.shippingTaxTotal),
        taxTotal: (taxTotal != null ? taxTotal.value : this.taxTotal),
        refundedTotal:
            (refundedTotal != null ? refundedTotal.value : this.refundedTotal),
        total: (total != null ? total.value : this.total),
        subtotal: (subtotal != null ? subtotal.value : this.subtotal),
        refundableAmount: (refundableAmount != null
            ? refundableAmount.value
            : this.refundableAmount),
        giftCardTotal:
            (giftCardTotal != null ? giftCardTotal.value : this.giftCardTotal),
        giftCardTaxTotal: (giftCardTaxTotal != null
            ? giftCardTaxTotal.value
            : this.giftCardTaxTotal));
  }
}

@JsonSerializable(explicitToJson: true)
class ClaimImage {
  const ClaimImage({
    required this.id,
    required this.claimItemId,
    this.claimItem,
    required this.url,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ClaimImage.fromJson(Map<String, dynamic> json) =>
      _$ClaimImageFromJson(json);

  static const toJsonFactory = _$ClaimImageToJson;
  Map<String, dynamic> toJson() => _$ClaimImageToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'claim_item_id', includeIfNull: false, defaultValue: 'default')
  final String claimItemId;
  @JsonKey(name: 'claim_item', includeIfNull: false)
  final ClaimItem? claimItem;
  @JsonKey(name: 'url', includeIfNull: false, defaultValue: 'default')
  final String url;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ClaimImageFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ClaimImageExtension on ClaimImage {
  ClaimImage copyWith(
      {String? id,
      String? claimItemId,
      ClaimItem? claimItem,
      String? url,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ClaimImage(
        id: id ?? this.id,
        claimItemId: claimItemId ?? this.claimItemId,
        claimItem: claimItem ?? this.claimItem,
        url: url ?? this.url,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ClaimImage copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? claimItemId,
      Wrapped<ClaimItem?>? claimItem,
      Wrapped<String>? url,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ClaimImage(
        id: (id != null ? id.value : this.id),
        claimItemId:
            (claimItemId != null ? claimItemId.value : this.claimItemId),
        claimItem: (claimItem != null ? claimItem.value : this.claimItem),
        url: (url != null ? url.value : this.url),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ClaimItem {
  const ClaimItem({
    required this.id,
    this.images,
    required this.claimOrderId,
    this.claimOrder,
    required this.itemId,
    this.item,
    required this.variantId,
    this.variant,
    required this.reason,
    required this.note,
    required this.quantity,
    this.tags,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ClaimItem.fromJson(Map<String, dynamic> json) =>
      _$ClaimItemFromJson(json);

  static const toJsonFactory = _$ClaimItemToJson;
  Map<String, dynamic> toJson() => _$ClaimItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'images', includeIfNull: false, defaultValue: <ClaimImage>[])
  final List<ClaimImage>? images;
  @JsonKey(
      name: 'claim_order_id', includeIfNull: false, defaultValue: 'default')
  final String claimOrderId;
  @JsonKey(name: 'claim_order', includeIfNull: false)
  final ClaimOrder? claimOrder;
  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'item', includeIfNull: false)
  final LineItem? item;
  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'variant', includeIfNull: false)
  final ProductVariant? variant;
  @JsonKey(
    name: 'reason',
    includeIfNull: false,
    toJson: claimItemReasonToJson,
    fromJson: claimItemReasonFromJson,
  )
  final enums.ClaimItemReason reason;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'tags', includeIfNull: false, defaultValue: <ClaimTag>[])
  final List<ClaimTag>? tags;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ClaimItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ClaimItemExtension on ClaimItem {
  ClaimItem copyWith(
      {String? id,
      List<ClaimImage>? images,
      String? claimOrderId,
      ClaimOrder? claimOrder,
      String? itemId,
      LineItem? item,
      String? variantId,
      ProductVariant? variant,
      enums.ClaimItemReason? reason,
      String? note,
      int? quantity,
      List<ClaimTag>? tags,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ClaimItem(
        id: id ?? this.id,
        images: images ?? this.images,
        claimOrderId: claimOrderId ?? this.claimOrderId,
        claimOrder: claimOrder ?? this.claimOrder,
        itemId: itemId ?? this.itemId,
        item: item ?? this.item,
        variantId: variantId ?? this.variantId,
        variant: variant ?? this.variant,
        reason: reason ?? this.reason,
        note: note ?? this.note,
        quantity: quantity ?? this.quantity,
        tags: tags ?? this.tags,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ClaimItem copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<List<ClaimImage>?>? images,
      Wrapped<String>? claimOrderId,
      Wrapped<ClaimOrder?>? claimOrder,
      Wrapped<String>? itemId,
      Wrapped<LineItem?>? item,
      Wrapped<String>? variantId,
      Wrapped<ProductVariant?>? variant,
      Wrapped<enums.ClaimItemReason>? reason,
      Wrapped<String?>? note,
      Wrapped<int>? quantity,
      Wrapped<List<ClaimTag>?>? tags,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ClaimItem(
        id: (id != null ? id.value : this.id),
        images: (images != null ? images.value : this.images),
        claimOrderId:
            (claimOrderId != null ? claimOrderId.value : this.claimOrderId),
        claimOrder: (claimOrder != null ? claimOrder.value : this.claimOrder),
        itemId: (itemId != null ? itemId.value : this.itemId),
        item: (item != null ? item.value : this.item),
        variantId: (variantId != null ? variantId.value : this.variantId),
        variant: (variant != null ? variant.value : this.variant),
        reason: (reason != null ? reason.value : this.reason),
        note: (note != null ? note.value : this.note),
        quantity: (quantity != null ? quantity.value : this.quantity),
        tags: (tags != null ? tags.value : this.tags),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ClaimOrder {
  const ClaimOrder({
    required this.id,
    required this.type,
    required this.paymentStatus,
    required this.fulfillmentStatus,
    this.claimItems,
    this.additionalItems,
    required this.orderId,
    this.order,
    this.returnOrder,
    required this.shippingAddressId,
    this.shippingAddress,
    this.shippingMethods,
    this.fulfillments,
    required this.refundAmount,
    required this.canceledAt,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
    required this.noNotification,
    required this.idempotencyKey,
  });

  factory ClaimOrder.fromJson(Map<String, dynamic> json) =>
      _$ClaimOrderFromJson(json);

  static const toJsonFactory = _$ClaimOrderToJson;
  Map<String, dynamic> toJson() => _$ClaimOrderToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: claimOrderTypeToJson,
    fromJson: claimOrderTypeFromJson,
  )
  final enums.ClaimOrderType type;
  @JsonKey(
    name: 'payment_status',
    includeIfNull: false,
    toJson: claimOrderPaymentStatusToJson,
    fromJson: claimOrderPaymentStatusPaymentStatusFromJson,
  )
  final enums.ClaimOrderPaymentStatus paymentStatus;
  static enums.ClaimOrderPaymentStatus
      claimOrderPaymentStatusPaymentStatusFromJson(Object? value) =>
          claimOrderPaymentStatusFromJson(
              value, enums.ClaimOrderPaymentStatus.na);

  @JsonKey(
    name: 'fulfillment_status',
    includeIfNull: false,
    toJson: claimOrderFulfillmentStatusToJson,
    fromJson: claimOrderFulfillmentStatusFulfillmentStatusFromJson,
  )
  final enums.ClaimOrderFulfillmentStatus fulfillmentStatus;
  static enums.ClaimOrderFulfillmentStatus
      claimOrderFulfillmentStatusFulfillmentStatusFromJson(Object? value) =>
          claimOrderFulfillmentStatusFromJson(
              value, enums.ClaimOrderFulfillmentStatus.notFulfilled);

  @JsonKey(
      name: 'claim_items', includeIfNull: false, defaultValue: <ClaimItem>[])
  final List<ClaimItem>? claimItems;
  @JsonKey(
      name: 'additional_items',
      includeIfNull: false,
      defaultValue: <LineItem>[])
  final List<LineItem>? additionalItems;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'return_order', includeIfNull: false)
  final Return? returnOrder;
  @JsonKey(
      name: 'shipping_address_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? shippingAddressId;
  @JsonKey(name: 'shipping_address', includeIfNull: false)
  final Address? shippingAddress;
  @JsonKey(
      name: 'shipping_methods',
      includeIfNull: false,
      defaultValue: <ShippingMethod>[])
  final List<ShippingMethod>? shippingMethods;
  @JsonKey(
      name: 'fulfillments', includeIfNull: false, defaultValue: <Fulfillment>[])
  final List<Fulfillment>? fulfillments;
  @JsonKey(name: 'refund_amount', includeIfNull: false, defaultValue: 36)
  final int? refundAmount;
  @JsonKey(name: 'canceled_at', includeIfNull: false)
  final DateTime? canceledAt;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  static const fromJsonFactory = _$ClaimOrderFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ClaimOrderExtension on ClaimOrder {
  ClaimOrder copyWith(
      {String? id,
      enums.ClaimOrderType? type,
      enums.ClaimOrderPaymentStatus? paymentStatus,
      enums.ClaimOrderFulfillmentStatus? fulfillmentStatus,
      List<ClaimItem>? claimItems,
      List<LineItem>? additionalItems,
      String? orderId,
      Order? order,
      Return? returnOrder,
      String? shippingAddressId,
      Address? shippingAddress,
      List<ShippingMethod>? shippingMethods,
      List<Fulfillment>? fulfillments,
      int? refundAmount,
      DateTime? canceledAt,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata,
      bool? noNotification,
      String? idempotencyKey}) {
    return ClaimOrder(
        id: id ?? this.id,
        type: type ?? this.type,
        paymentStatus: paymentStatus ?? this.paymentStatus,
        fulfillmentStatus: fulfillmentStatus ?? this.fulfillmentStatus,
        claimItems: claimItems ?? this.claimItems,
        additionalItems: additionalItems ?? this.additionalItems,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        returnOrder: returnOrder ?? this.returnOrder,
        shippingAddressId: shippingAddressId ?? this.shippingAddressId,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        shippingMethods: shippingMethods ?? this.shippingMethods,
        fulfillments: fulfillments ?? this.fulfillments,
        refundAmount: refundAmount ?? this.refundAmount,
        canceledAt: canceledAt ?? this.canceledAt,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata,
        noNotification: noNotification ?? this.noNotification,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey);
  }

  ClaimOrder copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.ClaimOrderType>? type,
      Wrapped<enums.ClaimOrderPaymentStatus>? paymentStatus,
      Wrapped<enums.ClaimOrderFulfillmentStatus>? fulfillmentStatus,
      Wrapped<List<ClaimItem>?>? claimItems,
      Wrapped<List<LineItem>?>? additionalItems,
      Wrapped<String>? orderId,
      Wrapped<Order?>? order,
      Wrapped<Return?>? returnOrder,
      Wrapped<String?>? shippingAddressId,
      Wrapped<Address?>? shippingAddress,
      Wrapped<List<ShippingMethod>?>? shippingMethods,
      Wrapped<List<Fulfillment>?>? fulfillments,
      Wrapped<int?>? refundAmount,
      Wrapped<DateTime?>? canceledAt,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata,
      Wrapped<bool?>? noNotification,
      Wrapped<String?>? idempotencyKey}) {
    return ClaimOrder(
        id: (id != null ? id.value : this.id),
        type: (type != null ? type.value : this.type),
        paymentStatus:
            (paymentStatus != null ? paymentStatus.value : this.paymentStatus),
        fulfillmentStatus: (fulfillmentStatus != null
            ? fulfillmentStatus.value
            : this.fulfillmentStatus),
        claimItems: (claimItems != null ? claimItems.value : this.claimItems),
        additionalItems: (additionalItems != null
            ? additionalItems.value
            : this.additionalItems),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        returnOrder:
            (returnOrder != null ? returnOrder.value : this.returnOrder),
        shippingAddressId: (shippingAddressId != null
            ? shippingAddressId.value
            : this.shippingAddressId),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        shippingMethods: (shippingMethods != null
            ? shippingMethods.value
            : this.shippingMethods),
        fulfillments:
            (fulfillments != null ? fulfillments.value : this.fulfillments),
        refundAmount:
            (refundAmount != null ? refundAmount.value : this.refundAmount),
        canceledAt: (canceledAt != null ? canceledAt.value : this.canceledAt),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey));
  }
}

@JsonSerializable(explicitToJson: true)
class ClaimTag {
  const ClaimTag({
    required this.id,
    required this.value,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ClaimTag.fromJson(Map<String, dynamic> json) =>
      _$ClaimTagFromJson(json);

  static const toJsonFactory = _$ClaimTagToJson;
  Map<String, dynamic> toJson() => _$ClaimTagToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ClaimTagFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ClaimTagExtension on ClaimTag {
  ClaimTag copyWith(
      {String? id,
      String? value,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ClaimTag(
        id: id ?? this.id,
        value: value ?? this.value,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ClaimTag copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? value,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ClaimTag(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class Country {
  const Country({
    required this.id,
    required this.iso2,
    required this.iso3,
    required this.numCode,
    required this.name,
    required this.displayName,
    required this.regionId,
    this.region,
  });

  factory Country.fromJson(Map<String, dynamic> json) =>
      _$CountryFromJson(json);

  static const toJsonFactory = _$CountryToJson;
  Map<String, dynamic> toJson() => _$CountryToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'iso_2', includeIfNull: false, defaultValue: 'default')
  final String iso2;
  @JsonKey(name: 'iso_3', includeIfNull: false, defaultValue: 'default')
  final String iso3;
  @JsonKey(name: 'num_code', includeIfNull: false, defaultValue: 'default')
  final String numCode;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'display_name', includeIfNull: false, defaultValue: 'default')
  final String displayName;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  static const fromJsonFactory = _$CountryFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $CountryExtension on Country {
  Country copyWith(
      {String? id,
      String? iso2,
      String? iso3,
      String? numCode,
      String? name,
      String? displayName,
      String? regionId,
      Region? region}) {
    return Country(
        id: id ?? this.id,
        iso2: iso2 ?? this.iso2,
        iso3: iso3 ?? this.iso3,
        numCode: numCode ?? this.numCode,
        name: name ?? this.name,
        displayName: displayName ?? this.displayName,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region);
  }

  Country copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? iso2,
      Wrapped<String>? iso3,
      Wrapped<String>? numCode,
      Wrapped<String>? name,
      Wrapped<String>? displayName,
      Wrapped<String?>? regionId,
      Wrapped<Region?>? region}) {
    return Country(
        id: (id != null ? id.value : this.id),
        iso2: (iso2 != null ? iso2.value : this.iso2),
        iso3: (iso3 != null ? iso3.value : this.iso3),
        numCode: (numCode != null ? numCode.value : this.numCode),
        name: (name != null ? name.value : this.name),
        displayName:
            (displayName != null ? displayName.value : this.displayName),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region));
  }
}

@JsonSerializable(explicitToJson: true)
class CreateStockLocationInput {
  const CreateStockLocationInput({
    required this.name,
    this.addressId,
    this.address,
    this.metadata,
  });

  factory CreateStockLocationInput.fromJson(Map<String, dynamic> json) =>
      _$CreateStockLocationInputFromJson(json);

  static const toJsonFactory = _$CreateStockLocationInputToJson;
  Map<String, dynamic> toJson() => _$CreateStockLocationInputToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'address_id', includeIfNull: false, defaultValue: 'default')
  final String? addressId;
  @JsonKey(name: 'address', includeIfNull: false)
  final StockLocationAddressInput? address;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$CreateStockLocationInputFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $CreateStockLocationInputExtension on CreateStockLocationInput {
  CreateStockLocationInput copyWith(
      {String? name,
      String? addressId,
      StockLocationAddressInput? address,
      Object? metadata}) {
    return CreateStockLocationInput(
        name: name ?? this.name,
        addressId: addressId ?? this.addressId,
        address: address ?? this.address,
        metadata: metadata ?? this.metadata);
  }

  CreateStockLocationInput copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<String?>? addressId,
      Wrapped<StockLocationAddressInput?>? address,
      Wrapped<Object?>? metadata}) {
    return CreateStockLocationInput(
        name: (name != null ? name.value : this.name),
        addressId: (addressId != null ? addressId.value : this.addressId),
        address: (address != null ? address.value : this.address),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class Currency {
  const Currency({
    required this.code,
    required this.symbol,
    required this.symbolNative,
    required this.name,
    this.includesTax,
  });

  factory Currency.fromJson(Map<String, dynamic> json) =>
      _$CurrencyFromJson(json);

  static const toJsonFactory = _$CurrencyToJson;
  Map<String, dynamic> toJson() => _$CurrencyToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  @JsonKey(name: 'symbol', includeIfNull: false, defaultValue: 'default')
  final String symbol;
  @JsonKey(name: 'symbol_native', includeIfNull: false, defaultValue: 'default')
  final String symbolNative;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'includes_tax', includeIfNull: false, defaultValue: false)
  final bool? includesTax;
  static const fromJsonFactory = _$CurrencyFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $CurrencyExtension on Currency {
  Currency copyWith(
      {String? code,
      String? symbol,
      String? symbolNative,
      String? name,
      bool? includesTax}) {
    return Currency(
        code: code ?? this.code,
        symbol: symbol ?? this.symbol,
        symbolNative: symbolNative ?? this.symbolNative,
        name: name ?? this.name,
        includesTax: includesTax ?? this.includesTax);
  }

  Currency copyWithWrapped(
      {Wrapped<String>? code,
      Wrapped<String>? symbol,
      Wrapped<String>? symbolNative,
      Wrapped<String>? name,
      Wrapped<bool?>? includesTax}) {
    return Currency(
        code: (code != null ? code.value : this.code),
        symbol: (symbol != null ? symbol.value : this.symbol),
        symbolNative:
            (symbolNative != null ? symbolNative.value : this.symbolNative),
        name: (name != null ? name.value : this.name),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax));
  }
}

@JsonSerializable(explicitToJson: true)
class CustomShippingOption {
  const CustomShippingOption({
    required this.id,
    required this.price,
    required this.shippingOptionId,
    this.shippingOption,
    required this.cartId,
    this.cart,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory CustomShippingOption.fromJson(Map<String, dynamic> json) =>
      _$CustomShippingOptionFromJson(json);

  static const toJsonFactory = _$CustomShippingOptionToJson;
  Map<String, dynamic> toJson() => _$CustomShippingOptionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int price;
  @JsonKey(
      name: 'shipping_option_id', includeIfNull: false, defaultValue: 'default')
  final String shippingOptionId;
  @JsonKey(name: 'shipping_option', includeIfNull: false)
  final ShippingOption? shippingOption;
  @JsonKey(name: 'cart_id', includeIfNull: false, defaultValue: 'default')
  final String? cartId;
  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart? cart;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$CustomShippingOptionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $CustomShippingOptionExtension on CustomShippingOption {
  CustomShippingOption copyWith(
      {String? id,
      int? price,
      String? shippingOptionId,
      ShippingOption? shippingOption,
      String? cartId,
      Cart? cart,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return CustomShippingOption(
        id: id ?? this.id,
        price: price ?? this.price,
        shippingOptionId: shippingOptionId ?? this.shippingOptionId,
        shippingOption: shippingOption ?? this.shippingOption,
        cartId: cartId ?? this.cartId,
        cart: cart ?? this.cart,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  CustomShippingOption copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<int>? price,
      Wrapped<String>? shippingOptionId,
      Wrapped<ShippingOption?>? shippingOption,
      Wrapped<String?>? cartId,
      Wrapped<Cart?>? cart,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return CustomShippingOption(
        id: (id != null ? id.value : this.id),
        price: (price != null ? price.value : this.price),
        shippingOptionId: (shippingOptionId != null
            ? shippingOptionId.value
            : this.shippingOptionId),
        shippingOption: (shippingOption != null
            ? shippingOption.value
            : this.shippingOption),
        cartId: (cartId != null ? cartId.value : this.cartId),
        cart: (cart != null ? cart.value : this.cart),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class Customer {
  const Customer({
    required this.id,
    required this.email,
    required this.firstName,
    required this.lastName,
    required this.billingAddressId,
    this.billingAddress,
    this.shippingAddresses,
    required this.phone,
    required this.hasAccount,
    this.orders,
    this.groups,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Customer.fromJson(Map<String, dynamic> json) =>
      _$CustomerFromJson(json);

  static const toJsonFactory = _$CustomerToJson;
  Map<String, dynamic> toJson() => _$CustomerToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String? firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String? lastName;
  @JsonKey(
      name: 'billing_address_id', includeIfNull: false, defaultValue: 'default')
  final String? billingAddressId;
  @JsonKey(name: 'billing_address', includeIfNull: false)
  final Address? billingAddress;
  @JsonKey(
      name: 'shipping_addresses',
      includeIfNull: false,
      defaultValue: <Address>[])
  final List<Address>? shippingAddresses;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'has_account', includeIfNull: false, defaultValue: false)
  final bool hasAccount;
  @JsonKey(name: 'orders', includeIfNull: false, defaultValue: <Order>[])
  final List<Order>? orders;
  @JsonKey(
      name: 'groups', includeIfNull: false, defaultValue: <CustomerGroup>[])
  final List<CustomerGroup>? groups;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$CustomerFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $CustomerExtension on Customer {
  Customer copyWith(
      {String? id,
      String? email,
      String? firstName,
      String? lastName,
      String? billingAddressId,
      Address? billingAddress,
      List<Address>? shippingAddresses,
      String? phone,
      bool? hasAccount,
      List<Order>? orders,
      List<CustomerGroup>? groups,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Customer(
        id: id ?? this.id,
        email: email ?? this.email,
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        billingAddressId: billingAddressId ?? this.billingAddressId,
        billingAddress: billingAddress ?? this.billingAddress,
        shippingAddresses: shippingAddresses ?? this.shippingAddresses,
        phone: phone ?? this.phone,
        hasAccount: hasAccount ?? this.hasAccount,
        orders: orders ?? this.orders,
        groups: groups ?? this.groups,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Customer copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? email,
      Wrapped<String?>? firstName,
      Wrapped<String?>? lastName,
      Wrapped<String?>? billingAddressId,
      Wrapped<Address?>? billingAddress,
      Wrapped<List<Address>?>? shippingAddresses,
      Wrapped<String?>? phone,
      Wrapped<bool>? hasAccount,
      Wrapped<List<Order>?>? orders,
      Wrapped<List<CustomerGroup>?>? groups,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Customer(
        id: (id != null ? id.value : this.id),
        email: (email != null ? email.value : this.email),
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        billingAddressId: (billingAddressId != null
            ? billingAddressId.value
            : this.billingAddressId),
        billingAddress: (billingAddress != null
            ? billingAddress.value
            : this.billingAddress),
        shippingAddresses: (shippingAddresses != null
            ? shippingAddresses.value
            : this.shippingAddresses),
        phone: (phone != null ? phone.value : this.phone),
        hasAccount: (hasAccount != null ? hasAccount.value : this.hasAccount),
        orders: (orders != null ? orders.value : this.orders),
        groups: (groups != null ? groups.value : this.groups),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class CustomerGroup {
  const CustomerGroup({
    required this.id,
    required this.name,
    this.customers,
    this.priceLists,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory CustomerGroup.fromJson(Map<String, dynamic> json) =>
      _$CustomerGroupFromJson(json);

  static const toJsonFactory = _$CustomerGroupToJson;
  Map<String, dynamic> toJson() => _$CustomerGroupToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'customers', includeIfNull: false, defaultValue: <Customer>[])
  final List<Customer>? customers;
  @JsonKey(
      name: 'price_lists', includeIfNull: false, defaultValue: <PriceList>[])
  final List<PriceList>? priceLists;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$CustomerGroupFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $CustomerGroupExtension on CustomerGroup {
  CustomerGroup copyWith(
      {String? id,
      String? name,
      List<Customer>? customers,
      List<PriceList>? priceLists,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return CustomerGroup(
        id: id ?? this.id,
        name: name ?? this.name,
        customers: customers ?? this.customers,
        priceLists: priceLists ?? this.priceLists,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  CustomerGroup copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<List<Customer>?>? customers,
      Wrapped<List<PriceList>?>? priceLists,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return CustomerGroup(
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        customers: (customers != null ? customers.value : this.customers),
        priceLists: (priceLists != null ? priceLists.value : this.priceLists),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DecoratedInventoryItemDTO {
  const DecoratedInventoryItemDTO({
    this.locationLevels,
    this.variants,
    required this.stockedQuantity,
    required this.reservedQuantity,
    this.id,
    required this.sku,
    this.hsCode,
    this.originCountry,
    this.midCode,
    this.title,
    this.description,
    this.thumbnail,
    this.material,
    this.weight,
    this.height,
    this.width,
    this.length,
    this.requiresShipping,
    this.metadata,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
  });

  factory DecoratedInventoryItemDTO.fromJson(Map<String, dynamic> json) =>
      _$DecoratedInventoryItemDTOFromJson(json);

  static const toJsonFactory = _$DecoratedInventoryItemDTOToJson;
  Map<String, dynamic> toJson() => _$DecoratedInventoryItemDTOToJson(this);

  @JsonKey(
      name: 'location_levels',
      includeIfNull: false,
      defaultValue: <InventoryLevelDTO>[])
  final List<InventoryLevelDTO>? locationLevels;
  @JsonKey(
      name: 'variants', includeIfNull: false, defaultValue: <ProductVariant>[])
  final List<ProductVariant>? variants;
  @JsonKey(name: 'stocked_quantity', includeIfNull: false)
  final double stockedQuantity;
  @JsonKey(name: 'reserved_quantity', includeIfNull: false)
  final double reservedQuantity;
  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String sku;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'requires_shipping', includeIfNull: false)
  final bool? requiresShipping;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime? createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime? updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$DecoratedInventoryItemDTOFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DecoratedInventoryItemDTOExtension on DecoratedInventoryItemDTO {
  DecoratedInventoryItemDTO copyWith(
      {List<InventoryLevelDTO>? locationLevels,
      List<ProductVariant>? variants,
      double? stockedQuantity,
      double? reservedQuantity,
      String? id,
      String? sku,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? title,
      String? description,
      String? thumbnail,
      String? material,
      double? weight,
      double? height,
      double? width,
      double? length,
      bool? requiresShipping,
      Object? metadata,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return DecoratedInventoryItemDTO(
        locationLevels: locationLevels ?? this.locationLevels,
        variants: variants ?? this.variants,
        stockedQuantity: stockedQuantity ?? this.stockedQuantity,
        reservedQuantity: reservedQuantity ?? this.reservedQuantity,
        id: id ?? this.id,
        sku: sku ?? this.sku,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        title: title ?? this.title,
        description: description ?? this.description,
        thumbnail: thumbnail ?? this.thumbnail,
        material: material ?? this.material,
        weight: weight ?? this.weight,
        height: height ?? this.height,
        width: width ?? this.width,
        length: length ?? this.length,
        requiresShipping: requiresShipping ?? this.requiresShipping,
        metadata: metadata ?? this.metadata,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  DecoratedInventoryItemDTO copyWithWrapped(
      {Wrapped<List<InventoryLevelDTO>?>? locationLevels,
      Wrapped<List<ProductVariant>?>? variants,
      Wrapped<double>? stockedQuantity,
      Wrapped<double>? reservedQuantity,
      Wrapped<String?>? id,
      Wrapped<String>? sku,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? title,
      Wrapped<String?>? description,
      Wrapped<String?>? thumbnail,
      Wrapped<String?>? material,
      Wrapped<double?>? weight,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<double?>? length,
      Wrapped<bool?>? requiresShipping,
      Wrapped<Object?>? metadata,
      Wrapped<DateTime?>? createdAt,
      Wrapped<DateTime?>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return DecoratedInventoryItemDTO(
        locationLevels: (locationLevels != null
            ? locationLevels.value
            : this.locationLevels),
        variants: (variants != null ? variants.value : this.variants),
        stockedQuantity: (stockedQuantity != null
            ? stockedQuantity.value
            : this.stockedQuantity),
        reservedQuantity: (reservedQuantity != null
            ? reservedQuantity.value
            : this.reservedQuantity),
        id: (id != null ? id.value : this.id),
        sku: (sku != null ? sku.value : this.sku),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        title: (title != null ? title.value : this.title),
        description:
            (description != null ? description.value : this.description),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        material: (material != null ? material.value : this.material),
        weight: (weight != null ? weight.value : this.weight),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        length: (length != null ? length.value : this.length),
        requiresShipping: (requiresShipping != null
            ? requiresShipping.value
            : this.requiresShipping),
        metadata: (metadata != null ? metadata.value : this.metadata),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class Discount {
  const Discount({
    required this.id,
    required this.code,
    required this.isDynamic,
    required this.ruleId,
    this.rule,
    required this.isDisabled,
    required this.parentDiscountId,
    this.parentDiscount,
    required this.startsAt,
    required this.endsAt,
    required this.validDuration,
    this.regions,
    required this.usageLimit,
    required this.usageCount,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Discount.fromJson(Map<String, dynamic> json) =>
      _$DiscountFromJson(json);

  static const toJsonFactory = _$DiscountToJson;
  Map<String, dynamic> toJson() => _$DiscountToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  @JsonKey(name: 'is_dynamic', includeIfNull: false)
  final bool isDynamic;
  @JsonKey(name: 'rule_id', includeIfNull: false, defaultValue: 'default')
  final String? ruleId;
  @JsonKey(name: 'rule', includeIfNull: false)
  final DiscountRule? rule;
  @JsonKey(name: 'is_disabled', includeIfNull: false)
  final bool isDisabled;
  @JsonKey(
      name: 'parent_discount_id', includeIfNull: false, defaultValue: 'default')
  final String? parentDiscountId;
  @JsonKey(name: 'parent_discount', includeIfNull: false)
  final Discount? parentDiscount;
  @JsonKey(name: 'starts_at', includeIfNull: false)
  final DateTime startsAt;
  @JsonKey(name: 'ends_at', includeIfNull: false)
  final DateTime? endsAt;
  @JsonKey(
      name: 'valid_duration', includeIfNull: false, defaultValue: 'default')
  final String? validDuration;
  @JsonKey(name: 'regions', includeIfNull: false, defaultValue: <Region>[])
  final List<Region>? regions;
  @JsonKey(name: 'usage_limit', includeIfNull: false, defaultValue: 36)
  final int? usageLimit;
  @JsonKey(name: 'usage_count', includeIfNull: false, defaultValue: 36)
  final int usageCount;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DiscountFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DiscountExtension on Discount {
  Discount copyWith(
      {String? id,
      String? code,
      bool? isDynamic,
      String? ruleId,
      DiscountRule? rule,
      bool? isDisabled,
      String? parentDiscountId,
      Discount? parentDiscount,
      DateTime? startsAt,
      DateTime? endsAt,
      String? validDuration,
      List<Region>? regions,
      int? usageLimit,
      int? usageCount,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Discount(
        id: id ?? this.id,
        code: code ?? this.code,
        isDynamic: isDynamic ?? this.isDynamic,
        ruleId: ruleId ?? this.ruleId,
        rule: rule ?? this.rule,
        isDisabled: isDisabled ?? this.isDisabled,
        parentDiscountId: parentDiscountId ?? this.parentDiscountId,
        parentDiscount: parentDiscount ?? this.parentDiscount,
        startsAt: startsAt ?? this.startsAt,
        endsAt: endsAt ?? this.endsAt,
        validDuration: validDuration ?? this.validDuration,
        regions: regions ?? this.regions,
        usageLimit: usageLimit ?? this.usageLimit,
        usageCount: usageCount ?? this.usageCount,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Discount copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? code,
      Wrapped<bool>? isDynamic,
      Wrapped<String?>? ruleId,
      Wrapped<DiscountRule?>? rule,
      Wrapped<bool>? isDisabled,
      Wrapped<String?>? parentDiscountId,
      Wrapped<Discount?>? parentDiscount,
      Wrapped<DateTime>? startsAt,
      Wrapped<DateTime?>? endsAt,
      Wrapped<String?>? validDuration,
      Wrapped<List<Region>?>? regions,
      Wrapped<int?>? usageLimit,
      Wrapped<int>? usageCount,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Discount(
        id: (id != null ? id.value : this.id),
        code: (code != null ? code.value : this.code),
        isDynamic: (isDynamic != null ? isDynamic.value : this.isDynamic),
        ruleId: (ruleId != null ? ruleId.value : this.ruleId),
        rule: (rule != null ? rule.value : this.rule),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled),
        parentDiscountId: (parentDiscountId != null
            ? parentDiscountId.value
            : this.parentDiscountId),
        parentDiscount: (parentDiscount != null
            ? parentDiscount.value
            : this.parentDiscount),
        startsAt: (startsAt != null ? startsAt.value : this.startsAt),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        validDuration:
            (validDuration != null ? validDuration.value : this.validDuration),
        regions: (regions != null ? regions.value : this.regions),
        usageLimit: (usageLimit != null ? usageLimit.value : this.usageLimit),
        usageCount: (usageCount != null ? usageCount.value : this.usageCount),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DiscountCondition {
  const DiscountCondition({
    required this.id,
    required this.type,
    required this.$operator,
    required this.discountRuleId,
    this.discountRule,
    this.products,
    this.productTypes,
    this.productTags,
    this.productCollections,
    this.customerGroups,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory DiscountCondition.fromJson(Map<String, dynamic> json) =>
      _$DiscountConditionFromJson(json);

  static const toJsonFactory = _$DiscountConditionToJson;
  Map<String, dynamic> toJson() => _$DiscountConditionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: discountConditionTypeToJson,
    fromJson: discountConditionTypeFromJson,
  )
  final enums.DiscountConditionType type;
  @JsonKey(
    name: 'operator',
    includeIfNull: false,
    toJson: discountConditionOperatorToJson,
    fromJson: discountConditionOperatorFromJson,
  )
  final enums.DiscountConditionOperator $operator;
  @JsonKey(
      name: 'discount_rule_id', includeIfNull: false, defaultValue: 'default')
  final String discountRuleId;
  @JsonKey(name: 'discount_rule', includeIfNull: false)
  final DiscountRule? discountRule;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Product>[])
  final List<Product>? products;
  @JsonKey(
      name: 'product_types',
      includeIfNull: false,
      defaultValue: <ProductType>[])
  final List<ProductType>? productTypes;
  @JsonKey(
      name: 'product_tags', includeIfNull: false, defaultValue: <ProductTag>[])
  final List<ProductTag>? productTags;
  @JsonKey(
      name: 'product_collections',
      includeIfNull: false,
      defaultValue: <ProductCollection>[])
  final List<ProductCollection>? productCollections;
  @JsonKey(
      name: 'customer_groups',
      includeIfNull: false,
      defaultValue: <CustomerGroup>[])
  final List<CustomerGroup>? customerGroups;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DiscountConditionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DiscountConditionExtension on DiscountCondition {
  DiscountCondition copyWith(
      {String? id,
      enums.DiscountConditionType? type,
      enums.DiscountConditionOperator? $operator,
      String? discountRuleId,
      DiscountRule? discountRule,
      List<Product>? products,
      List<ProductType>? productTypes,
      List<ProductTag>? productTags,
      List<ProductCollection>? productCollections,
      List<CustomerGroup>? customerGroups,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return DiscountCondition(
        id: id ?? this.id,
        type: type ?? this.type,
        $operator: $operator ?? this.$operator,
        discountRuleId: discountRuleId ?? this.discountRuleId,
        discountRule: discountRule ?? this.discountRule,
        products: products ?? this.products,
        productTypes: productTypes ?? this.productTypes,
        productTags: productTags ?? this.productTags,
        productCollections: productCollections ?? this.productCollections,
        customerGroups: customerGroups ?? this.customerGroups,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  DiscountCondition copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.DiscountConditionType>? type,
      Wrapped<enums.DiscountConditionOperator>? $operator,
      Wrapped<String>? discountRuleId,
      Wrapped<DiscountRule?>? discountRule,
      Wrapped<List<Product>?>? products,
      Wrapped<List<ProductType>?>? productTypes,
      Wrapped<List<ProductTag>?>? productTags,
      Wrapped<List<ProductCollection>?>? productCollections,
      Wrapped<List<CustomerGroup>?>? customerGroups,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return DiscountCondition(
        id: (id != null ? id.value : this.id),
        type: (type != null ? type.value : this.type),
        $operator: ($operator != null ? $operator.value : this.$operator),
        discountRuleId: (discountRuleId != null
            ? discountRuleId.value
            : this.discountRuleId),
        discountRule:
            (discountRule != null ? discountRule.value : this.discountRule),
        products: (products != null ? products.value : this.products),
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes),
        productTags:
            (productTags != null ? productTags.value : this.productTags),
        productCollections: (productCollections != null
            ? productCollections.value
            : this.productCollections),
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DiscountConditionCustomerGroup {
  const DiscountConditionCustomerGroup({
    required this.customerGroupId,
    required this.conditionId,
    this.customerGroup,
    this.discountCondition,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory DiscountConditionCustomerGroup.fromJson(Map<String, dynamic> json) =>
      _$DiscountConditionCustomerGroupFromJson(json);

  static const toJsonFactory = _$DiscountConditionCustomerGroupToJson;
  Map<String, dynamic> toJson() => _$DiscountConditionCustomerGroupToJson(this);

  @JsonKey(
      name: 'customer_group_id', includeIfNull: false, defaultValue: 'default')
  final String customerGroupId;
  @JsonKey(name: 'condition_id', includeIfNull: false, defaultValue: 'default')
  final String conditionId;
  @JsonKey(name: 'customer_group', includeIfNull: false)
  final CustomerGroup? customerGroup;
  @JsonKey(name: 'discount_condition', includeIfNull: false)
  final DiscountCondition? discountCondition;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DiscountConditionCustomerGroupFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DiscountConditionCustomerGroupExtension
    on DiscountConditionCustomerGroup {
  DiscountConditionCustomerGroup copyWith(
      {String? customerGroupId,
      String? conditionId,
      CustomerGroup? customerGroup,
      DiscountCondition? discountCondition,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return DiscountConditionCustomerGroup(
        customerGroupId: customerGroupId ?? this.customerGroupId,
        conditionId: conditionId ?? this.conditionId,
        customerGroup: customerGroup ?? this.customerGroup,
        discountCondition: discountCondition ?? this.discountCondition,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  DiscountConditionCustomerGroup copyWithWrapped(
      {Wrapped<String>? customerGroupId,
      Wrapped<String>? conditionId,
      Wrapped<CustomerGroup?>? customerGroup,
      Wrapped<DiscountCondition?>? discountCondition,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return DiscountConditionCustomerGroup(
        customerGroupId: (customerGroupId != null
            ? customerGroupId.value
            : this.customerGroupId),
        conditionId:
            (conditionId != null ? conditionId.value : this.conditionId),
        customerGroup:
            (customerGroup != null ? customerGroup.value : this.customerGroup),
        discountCondition: (discountCondition != null
            ? discountCondition.value
            : this.discountCondition),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DiscountConditionProduct {
  const DiscountConditionProduct({
    required this.productId,
    required this.conditionId,
    this.product,
    this.discountCondition,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory DiscountConditionProduct.fromJson(Map<String, dynamic> json) =>
      _$DiscountConditionProductFromJson(json);

  static const toJsonFactory = _$DiscountConditionProductToJson;
  Map<String, dynamic> toJson() => _$DiscountConditionProductToJson(this);

  @JsonKey(name: 'product_id', includeIfNull: false, defaultValue: 'default')
  final String productId;
  @JsonKey(name: 'condition_id', includeIfNull: false, defaultValue: 'default')
  final String conditionId;
  @JsonKey(name: 'product', includeIfNull: false)
  final Product? product;
  @JsonKey(name: 'discount_condition', includeIfNull: false)
  final DiscountCondition? discountCondition;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DiscountConditionProductFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DiscountConditionProductExtension on DiscountConditionProduct {
  DiscountConditionProduct copyWith(
      {String? productId,
      String? conditionId,
      Product? product,
      DiscountCondition? discountCondition,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return DiscountConditionProduct(
        productId: productId ?? this.productId,
        conditionId: conditionId ?? this.conditionId,
        product: product ?? this.product,
        discountCondition: discountCondition ?? this.discountCondition,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  DiscountConditionProduct copyWithWrapped(
      {Wrapped<String>? productId,
      Wrapped<String>? conditionId,
      Wrapped<Product?>? product,
      Wrapped<DiscountCondition?>? discountCondition,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return DiscountConditionProduct(
        productId: (productId != null ? productId.value : this.productId),
        conditionId:
            (conditionId != null ? conditionId.value : this.conditionId),
        product: (product != null ? product.value : this.product),
        discountCondition: (discountCondition != null
            ? discountCondition.value
            : this.discountCondition),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DiscountConditionProductCollection {
  const DiscountConditionProductCollection({
    required this.productCollectionId,
    required this.conditionId,
    this.productCollection,
    this.discountCondition,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory DiscountConditionProductCollection.fromJson(
          Map<String, dynamic> json) =>
      _$DiscountConditionProductCollectionFromJson(json);

  static const toJsonFactory = _$DiscountConditionProductCollectionToJson;
  Map<String, dynamic> toJson() =>
      _$DiscountConditionProductCollectionToJson(this);

  @JsonKey(
      name: 'product_collection_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String productCollectionId;
  @JsonKey(name: 'condition_id', includeIfNull: false, defaultValue: 'default')
  final String conditionId;
  @JsonKey(name: 'product_collection', includeIfNull: false)
  final ProductCollection? productCollection;
  @JsonKey(name: 'discount_condition', includeIfNull: false)
  final DiscountCondition? discountCondition;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DiscountConditionProductCollectionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DiscountConditionProductCollectionExtension
    on DiscountConditionProductCollection {
  DiscountConditionProductCollection copyWith(
      {String? productCollectionId,
      String? conditionId,
      ProductCollection? productCollection,
      DiscountCondition? discountCondition,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return DiscountConditionProductCollection(
        productCollectionId: productCollectionId ?? this.productCollectionId,
        conditionId: conditionId ?? this.conditionId,
        productCollection: productCollection ?? this.productCollection,
        discountCondition: discountCondition ?? this.discountCondition,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  DiscountConditionProductCollection copyWithWrapped(
      {Wrapped<String>? productCollectionId,
      Wrapped<String>? conditionId,
      Wrapped<ProductCollection?>? productCollection,
      Wrapped<DiscountCondition?>? discountCondition,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return DiscountConditionProductCollection(
        productCollectionId: (productCollectionId != null
            ? productCollectionId.value
            : this.productCollectionId),
        conditionId:
            (conditionId != null ? conditionId.value : this.conditionId),
        productCollection: (productCollection != null
            ? productCollection.value
            : this.productCollection),
        discountCondition: (discountCondition != null
            ? discountCondition.value
            : this.discountCondition),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DiscountConditionProductTag {
  const DiscountConditionProductTag({
    required this.productTagId,
    required this.conditionId,
    this.productTag,
    this.discountCondition,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory DiscountConditionProductTag.fromJson(Map<String, dynamic> json) =>
      _$DiscountConditionProductTagFromJson(json);

  static const toJsonFactory = _$DiscountConditionProductTagToJson;
  Map<String, dynamic> toJson() => _$DiscountConditionProductTagToJson(this);

  @JsonKey(
      name: 'product_tag_id', includeIfNull: false, defaultValue: 'default')
  final String productTagId;
  @JsonKey(name: 'condition_id', includeIfNull: false, defaultValue: 'default')
  final String conditionId;
  @JsonKey(name: 'product_tag', includeIfNull: false)
  final ProductTag? productTag;
  @JsonKey(name: 'discount_condition', includeIfNull: false)
  final DiscountCondition? discountCondition;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DiscountConditionProductTagFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DiscountConditionProductTagExtension on DiscountConditionProductTag {
  DiscountConditionProductTag copyWith(
      {String? productTagId,
      String? conditionId,
      ProductTag? productTag,
      DiscountCondition? discountCondition,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return DiscountConditionProductTag(
        productTagId: productTagId ?? this.productTagId,
        conditionId: conditionId ?? this.conditionId,
        productTag: productTag ?? this.productTag,
        discountCondition: discountCondition ?? this.discountCondition,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  DiscountConditionProductTag copyWithWrapped(
      {Wrapped<String>? productTagId,
      Wrapped<String>? conditionId,
      Wrapped<ProductTag?>? productTag,
      Wrapped<DiscountCondition?>? discountCondition,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return DiscountConditionProductTag(
        productTagId:
            (productTagId != null ? productTagId.value : this.productTagId),
        conditionId:
            (conditionId != null ? conditionId.value : this.conditionId),
        productTag: (productTag != null ? productTag.value : this.productTag),
        discountCondition: (discountCondition != null
            ? discountCondition.value
            : this.discountCondition),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DiscountConditionProductType {
  const DiscountConditionProductType({
    required this.productTypeId,
    required this.conditionId,
    this.productType,
    this.discountCondition,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory DiscountConditionProductType.fromJson(Map<String, dynamic> json) =>
      _$DiscountConditionProductTypeFromJson(json);

  static const toJsonFactory = _$DiscountConditionProductTypeToJson;
  Map<String, dynamic> toJson() => _$DiscountConditionProductTypeToJson(this);

  @JsonKey(
      name: 'product_type_id', includeIfNull: false, defaultValue: 'default')
  final String productTypeId;
  @JsonKey(name: 'condition_id', includeIfNull: false, defaultValue: 'default')
  final String conditionId;
  @JsonKey(name: 'product_type', includeIfNull: false)
  final ProductType? productType;
  @JsonKey(name: 'discount_condition', includeIfNull: false)
  final DiscountCondition? discountCondition;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DiscountConditionProductTypeFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DiscountConditionProductTypeExtension
    on DiscountConditionProductType {
  DiscountConditionProductType copyWith(
      {String? productTypeId,
      String? conditionId,
      ProductType? productType,
      DiscountCondition? discountCondition,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return DiscountConditionProductType(
        productTypeId: productTypeId ?? this.productTypeId,
        conditionId: conditionId ?? this.conditionId,
        productType: productType ?? this.productType,
        discountCondition: discountCondition ?? this.discountCondition,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  DiscountConditionProductType copyWithWrapped(
      {Wrapped<String>? productTypeId,
      Wrapped<String>? conditionId,
      Wrapped<ProductType?>? productType,
      Wrapped<DiscountCondition?>? discountCondition,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return DiscountConditionProductType(
        productTypeId:
            (productTypeId != null ? productTypeId.value : this.productTypeId),
        conditionId:
            (conditionId != null ? conditionId.value : this.conditionId),
        productType:
            (productType != null ? productType.value : this.productType),
        discountCondition: (discountCondition != null
            ? discountCondition.value
            : this.discountCondition),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DiscountRule {
  const DiscountRule({
    required this.id,
    required this.type,
    required this.description,
    required this.value,
    required this.allocation,
    this.conditions,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory DiscountRule.fromJson(Map<String, dynamic> json) =>
      _$DiscountRuleFromJson(json);

  static const toJsonFactory = _$DiscountRuleToJson;
  Map<String, dynamic> toJson() => _$DiscountRuleToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: discountRuleTypeToJson,
    fromJson: discountRuleTypeFromJson,
  )
  final enums.DiscountRuleType type;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 36)
  final int value;
  @JsonKey(
    name: 'allocation',
    includeIfNull: false,
    toJson: discountRuleAllocationNullableToJson,
    fromJson: discountRuleAllocationNullableFromJson,
  )
  final enums.DiscountRuleAllocation? allocation;
  @JsonKey(
      name: 'conditions',
      includeIfNull: false,
      defaultValue: <DiscountCondition>[])
  final List<DiscountCondition>? conditions;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DiscountRuleFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DiscountRuleExtension on DiscountRule {
  DiscountRule copyWith(
      {String? id,
      enums.DiscountRuleType? type,
      String? description,
      int? value,
      enums.DiscountRuleAllocation? allocation,
      List<DiscountCondition>? conditions,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return DiscountRule(
        id: id ?? this.id,
        type: type ?? this.type,
        description: description ?? this.description,
        value: value ?? this.value,
        allocation: allocation ?? this.allocation,
        conditions: conditions ?? this.conditions,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  DiscountRule copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.DiscountRuleType>? type,
      Wrapped<String?>? description,
      Wrapped<int>? value,
      Wrapped<enums.DiscountRuleAllocation?>? allocation,
      Wrapped<List<DiscountCondition>?>? conditions,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return DiscountRule(
        id: (id != null ? id.value : this.id),
        type: (type != null ? type.value : this.type),
        description:
            (description != null ? description.value : this.description),
        value: (value != null ? value.value : this.value),
        allocation: (allocation != null ? allocation.value : this.allocation),
        conditions: (conditions != null ? conditions.value : this.conditions),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class DraftOrder {
  const DraftOrder({
    required this.id,
    required this.status,
    required this.displayId,
    required this.cartId,
    this.cart,
    required this.orderId,
    this.order,
    required this.canceledAt,
    required this.completedAt,
    required this.noNotificationOrder,
    required this.idempotencyKey,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory DraftOrder.fromJson(Map<String, dynamic> json) =>
      _$DraftOrderFromJson(json);

  static const toJsonFactory = _$DraftOrderToJson;
  Map<String, dynamic> toJson() => _$DraftOrderToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: draftOrderStatusToJson,
    fromJson: draftOrderStatusStatusFromJson,
  )
  final enums.DraftOrderStatus status;
  static enums.DraftOrderStatus draftOrderStatusStatusFromJson(Object? value) =>
      draftOrderStatusFromJson(value, enums.DraftOrderStatus.open);

  @JsonKey(name: 'display_id', includeIfNull: false, defaultValue: 'default')
  final String displayId;
  @JsonKey(name: 'cart_id', includeIfNull: false, defaultValue: 'default')
  final String? cartId;
  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart? cart;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String? orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'canceled_at', includeIfNull: false)
  final DateTime? canceledAt;
  @JsonKey(name: 'completed_at', includeIfNull: false)
  final DateTime? completedAt;
  @JsonKey(name: 'no_notification_order', includeIfNull: false)
  final bool? noNotificationOrder;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$DraftOrderFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $DraftOrderExtension on DraftOrder {
  DraftOrder copyWith(
      {String? id,
      enums.DraftOrderStatus? status,
      String? displayId,
      String? cartId,
      Cart? cart,
      String? orderId,
      Order? order,
      DateTime? canceledAt,
      DateTime? completedAt,
      bool? noNotificationOrder,
      String? idempotencyKey,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return DraftOrder(
        id: id ?? this.id,
        status: status ?? this.status,
        displayId: displayId ?? this.displayId,
        cartId: cartId ?? this.cartId,
        cart: cart ?? this.cart,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        canceledAt: canceledAt ?? this.canceledAt,
        completedAt: completedAt ?? this.completedAt,
        noNotificationOrder: noNotificationOrder ?? this.noNotificationOrder,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  DraftOrder copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.DraftOrderStatus>? status,
      Wrapped<String>? displayId,
      Wrapped<String?>? cartId,
      Wrapped<Cart?>? cart,
      Wrapped<String?>? orderId,
      Wrapped<Order?>? order,
      Wrapped<DateTime?>? canceledAt,
      Wrapped<DateTime?>? completedAt,
      Wrapped<bool?>? noNotificationOrder,
      Wrapped<String?>? idempotencyKey,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return DraftOrder(
        id: (id != null ? id.value : this.id),
        status: (status != null ? status.value : this.status),
        displayId: (displayId != null ? displayId.value : this.displayId),
        cartId: (cartId != null ? cartId.value : this.cartId),
        cart: (cart != null ? cart.value : this.cart),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        canceledAt: (canceledAt != null ? canceledAt.value : this.canceledAt),
        completedAt:
            (completedAt != null ? completedAt.value : this.completedAt),
        noNotificationOrder: (noNotificationOrder != null
            ? noNotificationOrder.value
            : this.noNotificationOrder),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class Error {
  const Error({
    this.code,
    this.message,
    this.type,
  });

  factory Error.fromJson(Map<String, dynamic> json) => _$ErrorFromJson(json);

  static const toJsonFactory = _$ErrorToJson;
  Map<String, dynamic> toJson() => _$ErrorToJson(this);

  @JsonKey(
    name: 'code',
    includeIfNull: false,
    toJson: errorCodeNullableToJson,
    fromJson: errorCodeNullableFromJson,
  )
  final enums.ErrorCode? code;
  @JsonKey(name: 'message', includeIfNull: false, defaultValue: 'default')
  final String? message;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: errorTypeNullableToJson,
    fromJson: errorTypeNullableFromJson,
  )
  final enums.ErrorType? type;
  static const fromJsonFactory = _$ErrorFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ErrorExtension on Error {
  Error copyWith(
      {enums.ErrorCode? code, String? message, enums.ErrorType? type}) {
    return Error(
        code: code ?? this.code,
        message: message ?? this.message,
        type: type ?? this.type);
  }

  Error copyWithWrapped(
      {Wrapped<enums.ErrorCode?>? code,
      Wrapped<String?>? message,
      Wrapped<enums.ErrorType?>? type}) {
    return Error(
        code: (code != null ? code.value : this.code),
        message: (message != null ? message.value : this.message),
        type: (type != null ? type.value : this.type));
  }
}

@JsonSerializable(explicitToJson: true)
class ExtendedReservationItem {
  const ExtendedReservationItem({
    this.lineItem,
    this.inventoryItem,
    required this.id,
    required this.locationId,
    required this.inventoryItemId,
    this.description,
    this.createdBy,
    required this.quantity,
    this.metadata,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
  });

  factory ExtendedReservationItem.fromJson(Map<String, dynamic> json) =>
      _$ExtendedReservationItemFromJson(json);

  static const toJsonFactory = _$ExtendedReservationItemToJson;
  Map<String, dynamic> toJson() => _$ExtendedReservationItemToJson(this);

  @JsonKey(name: 'line_item', includeIfNull: false)
  final LineItem? lineItem;
  @JsonKey(name: 'inventory_item', includeIfNull: false)
  final InventoryItemDTO? inventoryItem;
  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  @JsonKey(
      name: 'inventory_item_id', includeIfNull: false, defaultValue: 'default')
  final String inventoryItemId;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'created_by', includeIfNull: false, defaultValue: 'default')
  final String? createdBy;
  @JsonKey(name: 'quantity', includeIfNull: false)
  final double quantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime? createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime? updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$ExtendedReservationItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ExtendedReservationItemExtension on ExtendedReservationItem {
  ExtendedReservationItem copyWith(
      {LineItem? lineItem,
      InventoryItemDTO? inventoryItem,
      String? id,
      String? locationId,
      String? inventoryItemId,
      String? description,
      String? createdBy,
      double? quantity,
      Object? metadata,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return ExtendedReservationItem(
        lineItem: lineItem ?? this.lineItem,
        inventoryItem: inventoryItem ?? this.inventoryItem,
        id: id ?? this.id,
        locationId: locationId ?? this.locationId,
        inventoryItemId: inventoryItemId ?? this.inventoryItemId,
        description: description ?? this.description,
        createdBy: createdBy ?? this.createdBy,
        quantity: quantity ?? this.quantity,
        metadata: metadata ?? this.metadata,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  ExtendedReservationItem copyWithWrapped(
      {Wrapped<LineItem?>? lineItem,
      Wrapped<InventoryItemDTO?>? inventoryItem,
      Wrapped<String>? id,
      Wrapped<String>? locationId,
      Wrapped<String>? inventoryItemId,
      Wrapped<String?>? description,
      Wrapped<String?>? createdBy,
      Wrapped<double>? quantity,
      Wrapped<Object?>? metadata,
      Wrapped<DateTime?>? createdAt,
      Wrapped<DateTime?>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return ExtendedReservationItem(
        lineItem: (lineItem != null ? lineItem.value : this.lineItem),
        inventoryItem:
            (inventoryItem != null ? inventoryItem.value : this.inventoryItem),
        id: (id != null ? id.value : this.id),
        locationId: (locationId != null ? locationId.value : this.locationId),
        inventoryItemId: (inventoryItemId != null
            ? inventoryItemId.value
            : this.inventoryItemId),
        description:
            (description != null ? description.value : this.description),
        createdBy: (createdBy != null ? createdBy.value : this.createdBy),
        quantity: (quantity != null ? quantity.value : this.quantity),
        metadata: (metadata != null ? metadata.value : this.metadata),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class ExtendedStoreDTO {
  const ExtendedStoreDTO({
    required this.paymentProviders,
    required this.fulfillmentProviders,
    required this.featureFlags,
    required this.modules,
    required this.id,
    required this.name,
    required this.defaultCurrencyCode,
    this.defaultCurrency,
    this.currencies,
    required this.swapLinkTemplate,
    required this.paymentLinkTemplate,
    required this.inviteLinkTemplate,
    required this.defaultLocationId,
    this.defaultSalesChannelId,
    this.defaultSalesChannel,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory ExtendedStoreDTO.fromJson(Map<String, dynamic> json) =>
      _$ExtendedStoreDTOFromJson(json);

  static const toJsonFactory = _$ExtendedStoreDTOToJson;
  Map<String, dynamic> toJson() => _$ExtendedStoreDTOToJson(this);

  @JsonKey(name: 'payment_providers', includeIfNull: false)
  final PaymentProvider? paymentProviders;
  @JsonKey(name: 'fulfillment_providers', includeIfNull: false)
  final FulfillmentProvider? fulfillmentProviders;
  @JsonKey(name: 'feature_flags', includeIfNull: false)
  final FeatureFlagsResponse? featureFlags;
  @JsonKey(name: 'modules', includeIfNull: false)
  final ModulesResponse modules;
  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(
      name: 'default_currency_code',
      includeIfNull: false,
      defaultValue: 'default')
  final String defaultCurrencyCode;
  @JsonKey(name: 'default_currency', includeIfNull: false)
  final Currency? defaultCurrency;
  @JsonKey(name: 'currencies', includeIfNull: false, defaultValue: <Currency>[])
  final List<Currency>? currencies;
  @JsonKey(
      name: 'swap_link_template', includeIfNull: false, defaultValue: 'default')
  final String? swapLinkTemplate;
  @JsonKey(
      name: 'payment_link_template',
      includeIfNull: false,
      defaultValue: 'default')
  final String? paymentLinkTemplate;
  @JsonKey(
      name: 'invite_link_template',
      includeIfNull: false,
      defaultValue: 'default')
  final String? inviteLinkTemplate;
  @JsonKey(
      name: 'default_location_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? defaultLocationId;
  @JsonKey(
      name: 'default_sales_channel_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? defaultSalesChannelId;
  @JsonKey(name: 'default_sales_channel', includeIfNull: false)
  final SalesChannel? defaultSalesChannel;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ExtendedStoreDTOFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ExtendedStoreDTOExtension on ExtendedStoreDTO {
  ExtendedStoreDTO copyWith(
      {PaymentProvider? paymentProviders,
      FulfillmentProvider? fulfillmentProviders,
      FeatureFlagsResponse? featureFlags,
      ModulesResponse? modules,
      String? id,
      String? name,
      String? defaultCurrencyCode,
      Currency? defaultCurrency,
      List<Currency>? currencies,
      String? swapLinkTemplate,
      String? paymentLinkTemplate,
      String? inviteLinkTemplate,
      String? defaultLocationId,
      String? defaultSalesChannelId,
      SalesChannel? defaultSalesChannel,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return ExtendedStoreDTO(
        paymentProviders: paymentProviders ?? this.paymentProviders,
        fulfillmentProviders: fulfillmentProviders ?? this.fulfillmentProviders,
        featureFlags: featureFlags ?? this.featureFlags,
        modules: modules ?? this.modules,
        id: id ?? this.id,
        name: name ?? this.name,
        defaultCurrencyCode: defaultCurrencyCode ?? this.defaultCurrencyCode,
        defaultCurrency: defaultCurrency ?? this.defaultCurrency,
        currencies: currencies ?? this.currencies,
        swapLinkTemplate: swapLinkTemplate ?? this.swapLinkTemplate,
        paymentLinkTemplate: paymentLinkTemplate ?? this.paymentLinkTemplate,
        inviteLinkTemplate: inviteLinkTemplate ?? this.inviteLinkTemplate,
        defaultLocationId: defaultLocationId ?? this.defaultLocationId,
        defaultSalesChannelId:
            defaultSalesChannelId ?? this.defaultSalesChannelId,
        defaultSalesChannel: defaultSalesChannel ?? this.defaultSalesChannel,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  ExtendedStoreDTO copyWithWrapped(
      {Wrapped<PaymentProvider?>? paymentProviders,
      Wrapped<FulfillmentProvider?>? fulfillmentProviders,
      Wrapped<FeatureFlagsResponse?>? featureFlags,
      Wrapped<ModulesResponse>? modules,
      Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<String>? defaultCurrencyCode,
      Wrapped<Currency?>? defaultCurrency,
      Wrapped<List<Currency>?>? currencies,
      Wrapped<String?>? swapLinkTemplate,
      Wrapped<String?>? paymentLinkTemplate,
      Wrapped<String?>? inviteLinkTemplate,
      Wrapped<String?>? defaultLocationId,
      Wrapped<String?>? defaultSalesChannelId,
      Wrapped<SalesChannel?>? defaultSalesChannel,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return ExtendedStoreDTO(
        paymentProviders: (paymentProviders != null
            ? paymentProviders.value
            : this.paymentProviders),
        fulfillmentProviders: (fulfillmentProviders != null
            ? fulfillmentProviders.value
            : this.fulfillmentProviders),
        featureFlags:
            (featureFlags != null ? featureFlags.value : this.featureFlags),
        modules: (modules != null ? modules.value : this.modules),
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        defaultCurrencyCode: (defaultCurrencyCode != null
            ? defaultCurrencyCode.value
            : this.defaultCurrencyCode),
        defaultCurrency: (defaultCurrency != null
            ? defaultCurrency.value
            : this.defaultCurrency),
        currencies: (currencies != null ? currencies.value : this.currencies),
        swapLinkTemplate: (swapLinkTemplate != null
            ? swapLinkTemplate.value
            : this.swapLinkTemplate),
        paymentLinkTemplate: (paymentLinkTemplate != null
            ? paymentLinkTemplate.value
            : this.paymentLinkTemplate),
        inviteLinkTemplate: (inviteLinkTemplate != null
            ? inviteLinkTemplate.value
            : this.inviteLinkTemplate),
        defaultLocationId: (defaultLocationId != null
            ? defaultLocationId.value
            : this.defaultLocationId),
        defaultSalesChannelId: (defaultSalesChannelId != null
            ? defaultSalesChannelId.value
            : this.defaultSalesChannelId),
        defaultSalesChannel: (defaultSalesChannel != null
            ? defaultSalesChannel.value
            : this.defaultSalesChannel),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

typedef FeatureFlagsResponse = List<FeatureFlagsResponse$Item>;

@JsonSerializable(explicitToJson: true)
class FeatureFlagsResponse$Item {
  const FeatureFlagsResponse$Item({
    required this.key,
    required this.value,
  });

  factory FeatureFlagsResponse$Item.fromJson(Map<String, dynamic> json) =>
      _$FeatureFlagsResponse$ItemFromJson(json);

  static const toJsonFactory = _$FeatureFlagsResponse$ItemToJson;
  Map<String, dynamic> toJson() => _$FeatureFlagsResponse$ItemToJson(this);

  @JsonKey(name: 'key', includeIfNull: false, defaultValue: 'default')
  final String key;
  @JsonKey(name: 'value', includeIfNull: false)
  final bool value;
  static const fromJsonFactory = _$FeatureFlagsResponse$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $FeatureFlagsResponse$ItemExtension on FeatureFlagsResponse$Item {
  FeatureFlagsResponse$Item copyWith({String? key, bool? value}) {
    return FeatureFlagsResponse$Item(
        key: key ?? this.key, value: value ?? this.value);
  }

  FeatureFlagsResponse$Item copyWithWrapped(
      {Wrapped<String>? key, Wrapped<bool>? value}) {
    return FeatureFlagsResponse$Item(
        key: (key != null ? key.value : this.key),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class Fulfillment {
  const Fulfillment({
    required this.id,
    required this.claimOrderId,
    this.claimOrder,
    required this.swapId,
    this.swap,
    required this.orderId,
    this.order,
    required this.providerId,
    this.provider,
    required this.locationId,
    this.items,
    this.trackingLinks,
    required this.trackingNumbers,
    required this.data,
    required this.shippedAt,
    required this.noNotification,
    required this.canceledAt,
    required this.idempotencyKey,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory Fulfillment.fromJson(Map<String, dynamic> json) =>
      _$FulfillmentFromJson(json);

  static const toJsonFactory = _$FulfillmentToJson;
  Map<String, dynamic> toJson() => _$FulfillmentToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
      name: 'claim_order_id', includeIfNull: false, defaultValue: 'default')
  final String? claimOrderId;
  @JsonKey(name: 'claim_order', includeIfNull: false)
  final ClaimOrder? claimOrder;
  @JsonKey(name: 'swap_id', includeIfNull: false, defaultValue: 'default')
  final String? swapId;
  @JsonKey(name: 'swap', includeIfNull: false)
  final Swap? swap;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String? orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'provider', includeIfNull: false)
  final FulfillmentProvider? provider;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String? locationId;
  @JsonKey(
      name: 'items', includeIfNull: false, defaultValue: <FulfillmentItem>[])
  final List<FulfillmentItem>? items;
  @JsonKey(
      name: 'tracking_links',
      includeIfNull: false,
      defaultValue: <TrackingLink>[])
  final List<TrackingLink>? trackingLinks;
  @JsonKey(
      name: 'tracking_numbers', includeIfNull: false, defaultValue: <String>[])
  final List<String> trackingNumbers;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(name: 'shipped_at', includeIfNull: false)
  final DateTime? shippedAt;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(name: 'canceled_at', includeIfNull: false)
  final DateTime? canceledAt;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$FulfillmentFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $FulfillmentExtension on Fulfillment {
  Fulfillment copyWith(
      {String? id,
      String? claimOrderId,
      ClaimOrder? claimOrder,
      String? swapId,
      Swap? swap,
      String? orderId,
      Order? order,
      String? providerId,
      FulfillmentProvider? provider,
      String? locationId,
      List<FulfillmentItem>? items,
      List<TrackingLink>? trackingLinks,
      List<String>? trackingNumbers,
      Object? data,
      DateTime? shippedAt,
      bool? noNotification,
      DateTime? canceledAt,
      String? idempotencyKey,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return Fulfillment(
        id: id ?? this.id,
        claimOrderId: claimOrderId ?? this.claimOrderId,
        claimOrder: claimOrder ?? this.claimOrder,
        swapId: swapId ?? this.swapId,
        swap: swap ?? this.swap,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        providerId: providerId ?? this.providerId,
        provider: provider ?? this.provider,
        locationId: locationId ?? this.locationId,
        items: items ?? this.items,
        trackingLinks: trackingLinks ?? this.trackingLinks,
        trackingNumbers: trackingNumbers ?? this.trackingNumbers,
        data: data ?? this.data,
        shippedAt: shippedAt ?? this.shippedAt,
        noNotification: noNotification ?? this.noNotification,
        canceledAt: canceledAt ?? this.canceledAt,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  Fulfillment copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? claimOrderId,
      Wrapped<ClaimOrder?>? claimOrder,
      Wrapped<String?>? swapId,
      Wrapped<Swap?>? swap,
      Wrapped<String?>? orderId,
      Wrapped<Order?>? order,
      Wrapped<String>? providerId,
      Wrapped<FulfillmentProvider?>? provider,
      Wrapped<String?>? locationId,
      Wrapped<List<FulfillmentItem>?>? items,
      Wrapped<List<TrackingLink>?>? trackingLinks,
      Wrapped<List<String>>? trackingNumbers,
      Wrapped<Object>? data,
      Wrapped<DateTime?>? shippedAt,
      Wrapped<bool?>? noNotification,
      Wrapped<DateTime?>? canceledAt,
      Wrapped<String?>? idempotencyKey,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return Fulfillment(
        id: (id != null ? id.value : this.id),
        claimOrderId:
            (claimOrderId != null ? claimOrderId.value : this.claimOrderId),
        claimOrder: (claimOrder != null ? claimOrder.value : this.claimOrder),
        swapId: (swapId != null ? swapId.value : this.swapId),
        swap: (swap != null ? swap.value : this.swap),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        providerId: (providerId != null ? providerId.value : this.providerId),
        provider: (provider != null ? provider.value : this.provider),
        locationId: (locationId != null ? locationId.value : this.locationId),
        items: (items != null ? items.value : this.items),
        trackingLinks:
            (trackingLinks != null ? trackingLinks.value : this.trackingLinks),
        trackingNumbers: (trackingNumbers != null
            ? trackingNumbers.value
            : this.trackingNumbers),
        data: (data != null ? data.value : this.data),
        shippedAt: (shippedAt != null ? shippedAt.value : this.shippedAt),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        canceledAt: (canceledAt != null ? canceledAt.value : this.canceledAt),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class FulfillmentItem {
  const FulfillmentItem({
    required this.fulfillmentId,
    required this.itemId,
    this.fulfillment,
    this.item,
    required this.quantity,
  });

  factory FulfillmentItem.fromJson(Map<String, dynamic> json) =>
      _$FulfillmentItemFromJson(json);

  static const toJsonFactory = _$FulfillmentItemToJson;
  Map<String, dynamic> toJson() => _$FulfillmentItemToJson(this);

  @JsonKey(
      name: 'fulfillment_id', includeIfNull: false, defaultValue: 'default')
  final String fulfillmentId;
  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'fulfillment', includeIfNull: false)
  final Fulfillment? fulfillment;
  @JsonKey(name: 'item', includeIfNull: false)
  final LineItem? item;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  static const fromJsonFactory = _$FulfillmentItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $FulfillmentItemExtension on FulfillmentItem {
  FulfillmentItem copyWith(
      {String? fulfillmentId,
      String? itemId,
      Fulfillment? fulfillment,
      LineItem? item,
      int? quantity}) {
    return FulfillmentItem(
        fulfillmentId: fulfillmentId ?? this.fulfillmentId,
        itemId: itemId ?? this.itemId,
        fulfillment: fulfillment ?? this.fulfillment,
        item: item ?? this.item,
        quantity: quantity ?? this.quantity);
  }

  FulfillmentItem copyWithWrapped(
      {Wrapped<String>? fulfillmentId,
      Wrapped<String>? itemId,
      Wrapped<Fulfillment?>? fulfillment,
      Wrapped<LineItem?>? item,
      Wrapped<int>? quantity}) {
    return FulfillmentItem(
        fulfillmentId:
            (fulfillmentId != null ? fulfillmentId.value : this.fulfillmentId),
        itemId: (itemId != null ? itemId.value : this.itemId),
        fulfillment:
            (fulfillment != null ? fulfillment.value : this.fulfillment),
        item: (item != null ? item.value : this.item),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class FulfillmentProvider {
  const FulfillmentProvider({
    required this.id,
    required this.isInstalled,
  });

  factory FulfillmentProvider.fromJson(Map<String, dynamic> json) =>
      _$FulfillmentProviderFromJson(json);

  static const toJsonFactory = _$FulfillmentProviderToJson;
  Map<String, dynamic> toJson() => _$FulfillmentProviderToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'is_installed', includeIfNull: false, defaultValue: true)
  final bool isInstalled;
  static const fromJsonFactory = _$FulfillmentProviderFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $FulfillmentProviderExtension on FulfillmentProvider {
  FulfillmentProvider copyWith({String? id, bool? isInstalled}) {
    return FulfillmentProvider(
        id: id ?? this.id, isInstalled: isInstalled ?? this.isInstalled);
  }

  FulfillmentProvider copyWithWrapped(
      {Wrapped<String>? id, Wrapped<bool>? isInstalled}) {
    return FulfillmentProvider(
        id: (id != null ? id.value : this.id),
        isInstalled:
            (isInstalled != null ? isInstalled.value : this.isInstalled));
  }
}

@JsonSerializable(explicitToJson: true)
class GiftCard {
  const GiftCard({
    required this.id,
    required this.code,
    required this.value,
    required this.balance,
    required this.regionId,
    this.region,
    required this.orderId,
    this.order,
    required this.isDisabled,
    required this.endsAt,
    required this.taxRate,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory GiftCard.fromJson(Map<String, dynamic> json) =>
      _$GiftCardFromJson(json);

  static const toJsonFactory = _$GiftCardToJson;
  Map<String, dynamic> toJson() => _$GiftCardToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 36)
  final int value;
  @JsonKey(name: 'balance', includeIfNull: false, defaultValue: 36)
  final int balance;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String? orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'is_disabled', includeIfNull: false, defaultValue: false)
  final bool isDisabled;
  @JsonKey(name: 'ends_at', includeIfNull: false)
  final DateTime? endsAt;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final double? taxRate;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$GiftCardFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $GiftCardExtension on GiftCard {
  GiftCard copyWith(
      {String? id,
      String? code,
      int? value,
      int? balance,
      String? regionId,
      Region? region,
      String? orderId,
      Order? order,
      bool? isDisabled,
      DateTime? endsAt,
      double? taxRate,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return GiftCard(
        id: id ?? this.id,
        code: code ?? this.code,
        value: value ?? this.value,
        balance: balance ?? this.balance,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        isDisabled: isDisabled ?? this.isDisabled,
        endsAt: endsAt ?? this.endsAt,
        taxRate: taxRate ?? this.taxRate,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  GiftCard copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? code,
      Wrapped<int>? value,
      Wrapped<int>? balance,
      Wrapped<String>? regionId,
      Wrapped<Region?>? region,
      Wrapped<String?>? orderId,
      Wrapped<Order?>? order,
      Wrapped<bool>? isDisabled,
      Wrapped<DateTime?>? endsAt,
      Wrapped<double?>? taxRate,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return GiftCard(
        id: (id != null ? id.value : this.id),
        code: (code != null ? code.value : this.code),
        value: (value != null ? value.value : this.value),
        balance: (balance != null ? balance.value : this.balance),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class GiftCardTransaction {
  const GiftCardTransaction({
    required this.id,
    required this.giftCardId,
    this.giftCard,
    required this.orderId,
    this.order,
    required this.amount,
    required this.createdAt,
    required this.isTaxable,
    required this.taxRate,
  });

  factory GiftCardTransaction.fromJson(Map<String, dynamic> json) =>
      _$GiftCardTransactionFromJson(json);

  static const toJsonFactory = _$GiftCardTransactionToJson;
  Map<String, dynamic> toJson() => _$GiftCardTransactionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'gift_card_id', includeIfNull: false, defaultValue: 'default')
  final String giftCardId;
  @JsonKey(name: 'gift_card', includeIfNull: false)
  final GiftCard? giftCard;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'is_taxable', includeIfNull: false)
  final bool? isTaxable;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final double? taxRate;
  static const fromJsonFactory = _$GiftCardTransactionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $GiftCardTransactionExtension on GiftCardTransaction {
  GiftCardTransaction copyWith(
      {String? id,
      String? giftCardId,
      GiftCard? giftCard,
      String? orderId,
      Order? order,
      int? amount,
      DateTime? createdAt,
      bool? isTaxable,
      double? taxRate}) {
    return GiftCardTransaction(
        id: id ?? this.id,
        giftCardId: giftCardId ?? this.giftCardId,
        giftCard: giftCard ?? this.giftCard,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        amount: amount ?? this.amount,
        createdAt: createdAt ?? this.createdAt,
        isTaxable: isTaxable ?? this.isTaxable,
        taxRate: taxRate ?? this.taxRate);
  }

  GiftCardTransaction copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? giftCardId,
      Wrapped<GiftCard?>? giftCard,
      Wrapped<String>? orderId,
      Wrapped<Order?>? order,
      Wrapped<int>? amount,
      Wrapped<DateTime>? createdAt,
      Wrapped<bool?>? isTaxable,
      Wrapped<double?>? taxRate}) {
    return GiftCardTransaction(
        id: (id != null ? id.value : this.id),
        giftCardId: (giftCardId != null ? giftCardId.value : this.giftCardId),
        giftCard: (giftCard != null ? giftCard.value : this.giftCard),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        amount: (amount != null ? amount.value : this.amount),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        isTaxable: (isTaxable != null ? isTaxable.value : this.isTaxable),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate));
  }
}

@JsonSerializable(explicitToJson: true)
class IdempotencyKey {
  const IdempotencyKey({
    required this.id,
    required this.idempotencyKey,
    required this.createdAt,
    required this.lockedAt,
    required this.requestMethod,
    required this.requestParams,
    required this.requestPath,
    required this.responseCode,
    required this.responseBody,
    required this.recoveryPoint,
  });

  factory IdempotencyKey.fromJson(Map<String, dynamic> json) =>
      _$IdempotencyKeyFromJson(json);

  static const toJsonFactory = _$IdempotencyKeyToJson;
  Map<String, dynamic> toJson() => _$IdempotencyKeyToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String idempotencyKey;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'locked_at', includeIfNull: false)
  final DateTime? lockedAt;
  @JsonKey(
      name: 'request_method', includeIfNull: false, defaultValue: 'default')
  final String? requestMethod;
  @JsonKey(name: 'request_params', includeIfNull: false)
  final Object? requestParams;
  @JsonKey(name: 'request_path', includeIfNull: false, defaultValue: 'default')
  final String? requestPath;
  @JsonKey(name: 'response_code', includeIfNull: false, defaultValue: 'default')
  final String? responseCode;
  @JsonKey(name: 'response_body', includeIfNull: false)
  final Object? responseBody;
  @JsonKey(
      name: 'recovery_point', includeIfNull: false, defaultValue: 'default')
  final String recoveryPoint;
  static const fromJsonFactory = _$IdempotencyKeyFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $IdempotencyKeyExtension on IdempotencyKey {
  IdempotencyKey copyWith(
      {String? id,
      String? idempotencyKey,
      DateTime? createdAt,
      DateTime? lockedAt,
      String? requestMethod,
      Object? requestParams,
      String? requestPath,
      String? responseCode,
      Object? responseBody,
      String? recoveryPoint}) {
    return IdempotencyKey(
        id: id ?? this.id,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        createdAt: createdAt ?? this.createdAt,
        lockedAt: lockedAt ?? this.lockedAt,
        requestMethod: requestMethod ?? this.requestMethod,
        requestParams: requestParams ?? this.requestParams,
        requestPath: requestPath ?? this.requestPath,
        responseCode: responseCode ?? this.responseCode,
        responseBody: responseBody ?? this.responseBody,
        recoveryPoint: recoveryPoint ?? this.recoveryPoint);
  }

  IdempotencyKey copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? idempotencyKey,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime?>? lockedAt,
      Wrapped<String?>? requestMethod,
      Wrapped<Object?>? requestParams,
      Wrapped<String?>? requestPath,
      Wrapped<String?>? responseCode,
      Wrapped<Object?>? responseBody,
      Wrapped<String>? recoveryPoint}) {
    return IdempotencyKey(
        id: (id != null ? id.value : this.id),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        lockedAt: (lockedAt != null ? lockedAt.value : this.lockedAt),
        requestMethod:
            (requestMethod != null ? requestMethod.value : this.requestMethod),
        requestParams:
            (requestParams != null ? requestParams.value : this.requestParams),
        requestPath:
            (requestPath != null ? requestPath.value : this.requestPath),
        responseCode:
            (responseCode != null ? responseCode.value : this.responseCode),
        responseBody:
            (responseBody != null ? responseBody.value : this.responseBody),
        recoveryPoint:
            (recoveryPoint != null ? recoveryPoint.value : this.recoveryPoint));
  }
}

@JsonSerializable(explicitToJson: true)
class Image {
  const Image({
    required this.id,
    required this.url,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Image.fromJson(Map<String, dynamic> json) => _$ImageFromJson(json);

  static const toJsonFactory = _$ImageToJson;
  Map<String, dynamic> toJson() => _$ImageToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'url', includeIfNull: false, defaultValue: 'default')
  final String url;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ImageFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ImageExtension on Image {
  Image copyWith(
      {String? id,
      String? url,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Image(
        id: id ?? this.id,
        url: url ?? this.url,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Image copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? url,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Image(
        id: (id != null ? id.value : this.id),
        url: (url != null ? url.value : this.url),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class InventoryItemDTO {
  const InventoryItemDTO({
    this.id,
    required this.sku,
    this.hsCode,
    this.originCountry,
    this.midCode,
    this.title,
    this.description,
    this.thumbnail,
    this.material,
    this.weight,
    this.height,
    this.width,
    this.length,
    this.requiresShipping,
    this.metadata,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
  });

  factory InventoryItemDTO.fromJson(Map<String, dynamic> json) =>
      _$InventoryItemDTOFromJson(json);

  static const toJsonFactory = _$InventoryItemDTOToJson;
  Map<String, dynamic> toJson() => _$InventoryItemDTOToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String sku;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'requires_shipping', includeIfNull: false)
  final bool? requiresShipping;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime? createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime? updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$InventoryItemDTOFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $InventoryItemDTOExtension on InventoryItemDTO {
  InventoryItemDTO copyWith(
      {String? id,
      String? sku,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? title,
      String? description,
      String? thumbnail,
      String? material,
      double? weight,
      double? height,
      double? width,
      double? length,
      bool? requiresShipping,
      Object? metadata,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return InventoryItemDTO(
        id: id ?? this.id,
        sku: sku ?? this.sku,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        title: title ?? this.title,
        description: description ?? this.description,
        thumbnail: thumbnail ?? this.thumbnail,
        material: material ?? this.material,
        weight: weight ?? this.weight,
        height: height ?? this.height,
        width: width ?? this.width,
        length: length ?? this.length,
        requiresShipping: requiresShipping ?? this.requiresShipping,
        metadata: metadata ?? this.metadata,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  InventoryItemDTO copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String>? sku,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? title,
      Wrapped<String?>? description,
      Wrapped<String?>? thumbnail,
      Wrapped<String?>? material,
      Wrapped<double?>? weight,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<double?>? length,
      Wrapped<bool?>? requiresShipping,
      Wrapped<Object?>? metadata,
      Wrapped<DateTime?>? createdAt,
      Wrapped<DateTime?>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return InventoryItemDTO(
        id: (id != null ? id.value : this.id),
        sku: (sku != null ? sku.value : this.sku),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        title: (title != null ? title.value : this.title),
        description:
            (description != null ? description.value : this.description),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        material: (material != null ? material.value : this.material),
        weight: (weight != null ? weight.value : this.weight),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        length: (length != null ? length.value : this.length),
        requiresShipping: (requiresShipping != null
            ? requiresShipping.value
            : this.requiresShipping),
        metadata: (metadata != null ? metadata.value : this.metadata),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class InventoryLevelDTO {
  const InventoryLevelDTO({
    required this.locationId,
    required this.stockedQuantity,
    required this.reservedQuantity,
    required this.incomingQuantity,
    this.metadata,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
  });

  factory InventoryLevelDTO.fromJson(Map<String, dynamic> json) =>
      _$InventoryLevelDTOFromJson(json);

  static const toJsonFactory = _$InventoryLevelDTOToJson;
  Map<String, dynamic> toJson() => _$InventoryLevelDTOToJson(this);

  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  @JsonKey(name: 'stocked_quantity', includeIfNull: false)
  final double stockedQuantity;
  @JsonKey(name: 'reserved_quantity', includeIfNull: false)
  final double reservedQuantity;
  @JsonKey(name: 'incoming_quantity', includeIfNull: false)
  final double incomingQuantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime? createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime? updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$InventoryLevelDTOFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $InventoryLevelDTOExtension on InventoryLevelDTO {
  InventoryLevelDTO copyWith(
      {String? locationId,
      double? stockedQuantity,
      double? reservedQuantity,
      double? incomingQuantity,
      Object? metadata,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return InventoryLevelDTO(
        locationId: locationId ?? this.locationId,
        stockedQuantity: stockedQuantity ?? this.stockedQuantity,
        reservedQuantity: reservedQuantity ?? this.reservedQuantity,
        incomingQuantity: incomingQuantity ?? this.incomingQuantity,
        metadata: metadata ?? this.metadata,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  InventoryLevelDTO copyWithWrapped(
      {Wrapped<String>? locationId,
      Wrapped<double>? stockedQuantity,
      Wrapped<double>? reservedQuantity,
      Wrapped<double>? incomingQuantity,
      Wrapped<Object?>? metadata,
      Wrapped<DateTime?>? createdAt,
      Wrapped<DateTime?>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return InventoryLevelDTO(
        locationId: (locationId != null ? locationId.value : this.locationId),
        stockedQuantity: (stockedQuantity != null
            ? stockedQuantity.value
            : this.stockedQuantity),
        reservedQuantity: (reservedQuantity != null
            ? reservedQuantity.value
            : this.reservedQuantity),
        incomingQuantity: (incomingQuantity != null
            ? incomingQuantity.value
            : this.incomingQuantity),
        metadata: (metadata != null ? metadata.value : this.metadata),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class Invite {
  const Invite({
    required this.id,
    required this.userEmail,
    required this.role,
    required this.accepted,
    required this.token,
    required this.expiresAt,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Invite.fromJson(Map<String, dynamic> json) => _$InviteFromJson(json);

  static const toJsonFactory = _$InviteToJson;
  Map<String, dynamic> toJson() => _$InviteToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'user_email', includeIfNull: false, defaultValue: 'default')
  final String userEmail;
  @JsonKey(
    name: 'role',
    includeIfNull: false,
    toJson: inviteRoleNullableToJson,
    fromJson: inviteRoleRoleNullableFromJson,
  )
  final enums.InviteRole? role;
  static enums.InviteRole? inviteRoleRoleNullableFromJson(Object? value) =>
      inviteRoleNullableFromJson(value, enums.InviteRole.member);

  @JsonKey(name: 'accepted', includeIfNull: false, defaultValue: false)
  final bool accepted;
  @JsonKey(name: 'token', includeIfNull: false, defaultValue: 'default')
  final String token;
  @JsonKey(name: 'expires_at', includeIfNull: false)
  final DateTime expiresAt;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$InviteFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $InviteExtension on Invite {
  Invite copyWith(
      {String? id,
      String? userEmail,
      enums.InviteRole? role,
      bool? accepted,
      String? token,
      DateTime? expiresAt,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Invite(
        id: id ?? this.id,
        userEmail: userEmail ?? this.userEmail,
        role: role ?? this.role,
        accepted: accepted ?? this.accepted,
        token: token ?? this.token,
        expiresAt: expiresAt ?? this.expiresAt,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Invite copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? userEmail,
      Wrapped<enums.InviteRole?>? role,
      Wrapped<bool>? accepted,
      Wrapped<String>? token,
      Wrapped<DateTime>? expiresAt,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Invite(
        id: (id != null ? id.value : this.id),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        role: (role != null ? role.value : this.role),
        accepted: (accepted != null ? accepted.value : this.accepted),
        token: (token != null ? token.value : this.token),
        expiresAt: (expiresAt != null ? expiresAt.value : this.expiresAt),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class LineItem {
  const LineItem({
    required this.id,
    required this.cartId,
    this.cart,
    required this.orderId,
    this.order,
    required this.swapId,
    this.swap,
    required this.claimOrderId,
    this.claimOrder,
    this.taxLines,
    this.adjustments,
    required this.originalItemId,
    required this.orderEditId,
    this.orderEdit,
    required this.title,
    required this.description,
    required this.thumbnail,
    required this.isReturn,
    required this.isGiftcard,
    required this.shouldMerge,
    required this.allowDiscounts,
    required this.hasShipping,
    required this.unitPrice,
    required this.variantId,
    this.variant,
    required this.quantity,
    required this.fulfilledQuantity,
    required this.returnedQuantity,
    required this.shippedQuantity,
    this.refundable,
    this.subtotal,
    this.taxTotal,
    this.total,
    this.originalTotal,
    this.originalTaxTotal,
    this.discountTotal,
    this.rawDiscountTotal,
    this.giftCardTotal,
    this.includesTax,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory LineItem.fromJson(Map<String, dynamic> json) =>
      _$LineItemFromJson(json);

  static const toJsonFactory = _$LineItemToJson;
  Map<String, dynamic> toJson() => _$LineItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'cart_id', includeIfNull: false, defaultValue: 'default')
  final String? cartId;
  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart? cart;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String? orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'swap_id', includeIfNull: false, defaultValue: 'default')
  final String? swapId;
  @JsonKey(name: 'swap', includeIfNull: false)
  final Swap? swap;
  @JsonKey(
      name: 'claim_order_id', includeIfNull: false, defaultValue: 'default')
  final String? claimOrderId;
  @JsonKey(name: 'claim_order', includeIfNull: false)
  final ClaimOrder? claimOrder;
  @JsonKey(
      name: 'tax_lines',
      includeIfNull: false,
      defaultValue: <LineItemTaxLine>[])
  final List<LineItemTaxLine>? taxLines;
  @JsonKey(
      name: 'adjustments',
      includeIfNull: false,
      defaultValue: <LineItemAdjustment>[])
  final List<LineItemAdjustment>? adjustments;
  @JsonKey(
      name: 'original_item_id', includeIfNull: false, defaultValue: 'default')
  final String? originalItemId;
  @JsonKey(name: 'order_edit_id', includeIfNull: false, defaultValue: 'default')
  final String? orderEditId;
  @JsonKey(name: 'order_edit', includeIfNull: false)
  final OrderEdit? orderEdit;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(name: 'is_return', includeIfNull: false, defaultValue: false)
  final bool isReturn;
  @JsonKey(name: 'is_giftcard', includeIfNull: false, defaultValue: false)
  final bool isGiftcard;
  @JsonKey(name: 'should_merge', includeIfNull: false, defaultValue: true)
  final bool shouldMerge;
  @JsonKey(name: 'allow_discounts', includeIfNull: false, defaultValue: true)
  final bool allowDiscounts;
  @JsonKey(name: 'has_shipping', includeIfNull: false)
  final bool? hasShipping;
  @JsonKey(name: 'unit_price', includeIfNull: false, defaultValue: 36)
  final int unitPrice;
  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String? variantId;
  @JsonKey(name: 'variant', includeIfNull: false)
  final ProductVariant? variant;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'fulfilled_quantity', includeIfNull: false, defaultValue: 36)
  final int? fulfilledQuantity;
  @JsonKey(name: 'returned_quantity', includeIfNull: false, defaultValue: 36)
  final int? returnedQuantity;
  @JsonKey(name: 'shipped_quantity', includeIfNull: false, defaultValue: 36)
  final int? shippedQuantity;
  @JsonKey(name: 'refundable', includeIfNull: false, defaultValue: 36)
  final int? refundable;
  @JsonKey(name: 'subtotal', includeIfNull: false, defaultValue: 36)
  final int? subtotal;
  @JsonKey(name: 'tax_total', includeIfNull: false, defaultValue: 36)
  final int? taxTotal;
  @JsonKey(name: 'total', includeIfNull: false, defaultValue: 36)
  final int? total;
  @JsonKey(name: 'original_total', includeIfNull: false, defaultValue: 36)
  final int? originalTotal;
  @JsonKey(name: 'original_tax_total', includeIfNull: false, defaultValue: 36)
  final int? originalTaxTotal;
  @JsonKey(name: 'discount_total', includeIfNull: false, defaultValue: 36)
  final int? discountTotal;
  @JsonKey(name: 'raw_discount_total', includeIfNull: false, defaultValue: 36)
  final int? rawDiscountTotal;
  @JsonKey(name: 'gift_card_total', includeIfNull: false, defaultValue: 36)
  final int? giftCardTotal;
  @JsonKey(name: 'includes_tax', includeIfNull: false, defaultValue: false)
  final bool? includesTax;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$LineItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $LineItemExtension on LineItem {
  LineItem copyWith(
      {String? id,
      String? cartId,
      Cart? cart,
      String? orderId,
      Order? order,
      String? swapId,
      Swap? swap,
      String? claimOrderId,
      ClaimOrder? claimOrder,
      List<LineItemTaxLine>? taxLines,
      List<LineItemAdjustment>? adjustments,
      String? originalItemId,
      String? orderEditId,
      OrderEdit? orderEdit,
      String? title,
      String? description,
      String? thumbnail,
      bool? isReturn,
      bool? isGiftcard,
      bool? shouldMerge,
      bool? allowDiscounts,
      bool? hasShipping,
      int? unitPrice,
      String? variantId,
      ProductVariant? variant,
      int? quantity,
      int? fulfilledQuantity,
      int? returnedQuantity,
      int? shippedQuantity,
      int? refundable,
      int? subtotal,
      int? taxTotal,
      int? total,
      int? originalTotal,
      int? originalTaxTotal,
      int? discountTotal,
      int? rawDiscountTotal,
      int? giftCardTotal,
      bool? includesTax,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return LineItem(
        id: id ?? this.id,
        cartId: cartId ?? this.cartId,
        cart: cart ?? this.cart,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        swapId: swapId ?? this.swapId,
        swap: swap ?? this.swap,
        claimOrderId: claimOrderId ?? this.claimOrderId,
        claimOrder: claimOrder ?? this.claimOrder,
        taxLines: taxLines ?? this.taxLines,
        adjustments: adjustments ?? this.adjustments,
        originalItemId: originalItemId ?? this.originalItemId,
        orderEditId: orderEditId ?? this.orderEditId,
        orderEdit: orderEdit ?? this.orderEdit,
        title: title ?? this.title,
        description: description ?? this.description,
        thumbnail: thumbnail ?? this.thumbnail,
        isReturn: isReturn ?? this.isReturn,
        isGiftcard: isGiftcard ?? this.isGiftcard,
        shouldMerge: shouldMerge ?? this.shouldMerge,
        allowDiscounts: allowDiscounts ?? this.allowDiscounts,
        hasShipping: hasShipping ?? this.hasShipping,
        unitPrice: unitPrice ?? this.unitPrice,
        variantId: variantId ?? this.variantId,
        variant: variant ?? this.variant,
        quantity: quantity ?? this.quantity,
        fulfilledQuantity: fulfilledQuantity ?? this.fulfilledQuantity,
        returnedQuantity: returnedQuantity ?? this.returnedQuantity,
        shippedQuantity: shippedQuantity ?? this.shippedQuantity,
        refundable: refundable ?? this.refundable,
        subtotal: subtotal ?? this.subtotal,
        taxTotal: taxTotal ?? this.taxTotal,
        total: total ?? this.total,
        originalTotal: originalTotal ?? this.originalTotal,
        originalTaxTotal: originalTaxTotal ?? this.originalTaxTotal,
        discountTotal: discountTotal ?? this.discountTotal,
        rawDiscountTotal: rawDiscountTotal ?? this.rawDiscountTotal,
        giftCardTotal: giftCardTotal ?? this.giftCardTotal,
        includesTax: includesTax ?? this.includesTax,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  LineItem copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? cartId,
      Wrapped<Cart?>? cart,
      Wrapped<String?>? orderId,
      Wrapped<Order?>? order,
      Wrapped<String?>? swapId,
      Wrapped<Swap?>? swap,
      Wrapped<String?>? claimOrderId,
      Wrapped<ClaimOrder?>? claimOrder,
      Wrapped<List<LineItemTaxLine>?>? taxLines,
      Wrapped<List<LineItemAdjustment>?>? adjustments,
      Wrapped<String?>? originalItemId,
      Wrapped<String?>? orderEditId,
      Wrapped<OrderEdit?>? orderEdit,
      Wrapped<String>? title,
      Wrapped<String?>? description,
      Wrapped<String?>? thumbnail,
      Wrapped<bool>? isReturn,
      Wrapped<bool>? isGiftcard,
      Wrapped<bool>? shouldMerge,
      Wrapped<bool>? allowDiscounts,
      Wrapped<bool?>? hasShipping,
      Wrapped<int>? unitPrice,
      Wrapped<String?>? variantId,
      Wrapped<ProductVariant?>? variant,
      Wrapped<int>? quantity,
      Wrapped<int?>? fulfilledQuantity,
      Wrapped<int?>? returnedQuantity,
      Wrapped<int?>? shippedQuantity,
      Wrapped<int?>? refundable,
      Wrapped<int?>? subtotal,
      Wrapped<int?>? taxTotal,
      Wrapped<int?>? total,
      Wrapped<int?>? originalTotal,
      Wrapped<int?>? originalTaxTotal,
      Wrapped<int?>? discountTotal,
      Wrapped<int?>? rawDiscountTotal,
      Wrapped<int?>? giftCardTotal,
      Wrapped<bool?>? includesTax,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return LineItem(
        id: (id != null ? id.value : this.id),
        cartId: (cartId != null ? cartId.value : this.cartId),
        cart: (cart != null ? cart.value : this.cart),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        swapId: (swapId != null ? swapId.value : this.swapId),
        swap: (swap != null ? swap.value : this.swap),
        claimOrderId:
            (claimOrderId != null ? claimOrderId.value : this.claimOrderId),
        claimOrder: (claimOrder != null ? claimOrder.value : this.claimOrder),
        taxLines: (taxLines != null ? taxLines.value : this.taxLines),
        adjustments:
            (adjustments != null ? adjustments.value : this.adjustments),
        originalItemId: (originalItemId != null
            ? originalItemId.value
            : this.originalItemId),
        orderEditId:
            (orderEditId != null ? orderEditId.value : this.orderEditId),
        orderEdit: (orderEdit != null ? orderEdit.value : this.orderEdit),
        title: (title != null ? title.value : this.title),
        description:
            (description != null ? description.value : this.description),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        isReturn: (isReturn != null ? isReturn.value : this.isReturn),
        isGiftcard: (isGiftcard != null ? isGiftcard.value : this.isGiftcard),
        shouldMerge:
            (shouldMerge != null ? shouldMerge.value : this.shouldMerge),
        allowDiscounts: (allowDiscounts != null
            ? allowDiscounts.value
            : this.allowDiscounts),
        hasShipping:
            (hasShipping != null ? hasShipping.value : this.hasShipping),
        unitPrice: (unitPrice != null ? unitPrice.value : this.unitPrice),
        variantId: (variantId != null ? variantId.value : this.variantId),
        variant: (variant != null ? variant.value : this.variant),
        quantity: (quantity != null ? quantity.value : this.quantity),
        fulfilledQuantity: (fulfilledQuantity != null
            ? fulfilledQuantity.value
            : this.fulfilledQuantity),
        returnedQuantity: (returnedQuantity != null
            ? returnedQuantity.value
            : this.returnedQuantity),
        shippedQuantity: (shippedQuantity != null
            ? shippedQuantity.value
            : this.shippedQuantity),
        refundable: (refundable != null ? refundable.value : this.refundable),
        subtotal: (subtotal != null ? subtotal.value : this.subtotal),
        taxTotal: (taxTotal != null ? taxTotal.value : this.taxTotal),
        total: (total != null ? total.value : this.total),
        originalTotal:
            (originalTotal != null ? originalTotal.value : this.originalTotal),
        originalTaxTotal: (originalTaxTotal != null
            ? originalTaxTotal.value
            : this.originalTaxTotal),
        discountTotal:
            (discountTotal != null ? discountTotal.value : this.discountTotal),
        rawDiscountTotal: (rawDiscountTotal != null
            ? rawDiscountTotal.value
            : this.rawDiscountTotal),
        giftCardTotal:
            (giftCardTotal != null ? giftCardTotal.value : this.giftCardTotal),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class LineItemAdjustment {
  const LineItemAdjustment({
    required this.id,
    required this.itemId,
    this.item,
    required this.description,
    required this.discountId,
    this.discount,
    required this.amount,
    required this.metadata,
  });

  factory LineItemAdjustment.fromJson(Map<String, dynamic> json) =>
      _$LineItemAdjustmentFromJson(json);

  static const toJsonFactory = _$LineItemAdjustmentToJson;
  Map<String, dynamic> toJson() => _$LineItemAdjustmentToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'item', includeIfNull: false)
  final LineItem? item;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String description;
  @JsonKey(name: 'discount_id', includeIfNull: false, defaultValue: 'default')
  final String? discountId;
  @JsonKey(name: 'discount', includeIfNull: false)
  final Discount? discount;
  @JsonKey(name: 'amount', includeIfNull: false)
  final double amount;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$LineItemAdjustmentFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $LineItemAdjustmentExtension on LineItemAdjustment {
  LineItemAdjustment copyWith(
      {String? id,
      String? itemId,
      LineItem? item,
      String? description,
      String? discountId,
      Discount? discount,
      double? amount,
      Object? metadata}) {
    return LineItemAdjustment(
        id: id ?? this.id,
        itemId: itemId ?? this.itemId,
        item: item ?? this.item,
        description: description ?? this.description,
        discountId: discountId ?? this.discountId,
        discount: discount ?? this.discount,
        amount: amount ?? this.amount,
        metadata: metadata ?? this.metadata);
  }

  LineItemAdjustment copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? itemId,
      Wrapped<LineItem?>? item,
      Wrapped<String>? description,
      Wrapped<String?>? discountId,
      Wrapped<Discount?>? discount,
      Wrapped<double>? amount,
      Wrapped<Object?>? metadata}) {
    return LineItemAdjustment(
        id: (id != null ? id.value : this.id),
        itemId: (itemId != null ? itemId.value : this.itemId),
        item: (item != null ? item.value : this.item),
        description:
            (description != null ? description.value : this.description),
        discountId: (discountId != null ? discountId.value : this.discountId),
        discount: (discount != null ? discount.value : this.discount),
        amount: (amount != null ? amount.value : this.amount),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class LineItemTaxLine {
  const LineItemTaxLine({
    required this.id,
    required this.code,
    required this.name,
    required this.rate,
    required this.itemId,
    this.item,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory LineItemTaxLine.fromJson(Map<String, dynamic> json) =>
      _$LineItemTaxLineFromJson(json);

  static const toJsonFactory = _$LineItemTaxLineToJson;
  Map<String, dynamic> toJson() => _$LineItemTaxLineToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String? code;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'rate', includeIfNull: false)
  final double rate;
  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'item', includeIfNull: false)
  final LineItem? item;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$LineItemTaxLineFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $LineItemTaxLineExtension on LineItemTaxLine {
  LineItemTaxLine copyWith(
      {String? id,
      String? code,
      String? name,
      double? rate,
      String? itemId,
      LineItem? item,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return LineItemTaxLine(
        id: id ?? this.id,
        code: code ?? this.code,
        name: name ?? this.name,
        rate: rate ?? this.rate,
        itemId: itemId ?? this.itemId,
        item: item ?? this.item,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  LineItemTaxLine copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? code,
      Wrapped<String>? name,
      Wrapped<double>? rate,
      Wrapped<String>? itemId,
      Wrapped<LineItem?>? item,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return LineItemTaxLine(
        id: (id != null ? id.value : this.id),
        code: (code != null ? code.value : this.code),
        name: (name != null ? name.value : this.name),
        rate: (rate != null ? rate.value : this.rate),
        itemId: (itemId != null ? itemId.value : this.itemId),
        item: (item != null ? item.value : this.item),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

typedef ModulesResponse = List<ModulesResponse$Item>;

@JsonSerializable(explicitToJson: true)
class ModulesResponse$Item {
  const ModulesResponse$Item({
    required this.module,
    required this.resolution,
  });

  factory ModulesResponse$Item.fromJson(Map<String, dynamic> json) =>
      _$ModulesResponse$ItemFromJson(json);

  static const toJsonFactory = _$ModulesResponse$ItemToJson;
  Map<String, dynamic> toJson() => _$ModulesResponse$ItemToJson(this);

  @JsonKey(name: 'module', includeIfNull: false, defaultValue: 'default')
  final String module;
  @JsonKey(name: 'resolution', includeIfNull: false, defaultValue: 'default')
  final String resolution;
  static const fromJsonFactory = _$ModulesResponse$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ModulesResponse$ItemExtension on ModulesResponse$Item {
  ModulesResponse$Item copyWith({String? module, String? resolution}) {
    return ModulesResponse$Item(
        module: module ?? this.module,
        resolution: resolution ?? this.resolution);
  }

  ModulesResponse$Item copyWithWrapped(
      {Wrapped<String>? module, Wrapped<String>? resolution}) {
    return ModulesResponse$Item(
        module: (module != null ? module.value : this.module),
        resolution: (resolution != null ? resolution.value : this.resolution));
  }
}

@JsonSerializable(explicitToJson: true)
class MoneyAmount {
  const MoneyAmount({
    required this.id,
    required this.currencyCode,
    this.currency,
    required this.amount,
    required this.minQuantity,
    required this.maxQuantity,
    required this.priceListId,
    this.priceList,
    required this.variantId,
    this.variant,
    required this.regionId,
    this.region,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
  });

  factory MoneyAmount.fromJson(Map<String, dynamic> json) =>
      _$MoneyAmountFromJson(json);

  static const toJsonFactory = _$MoneyAmountToJson;
  Map<String, dynamic> toJson() => _$MoneyAmountToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String currencyCode;
  @JsonKey(name: 'currency', includeIfNull: false)
  final Currency? currency;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'min_quantity', includeIfNull: false, defaultValue: 36)
  final int? minQuantity;
  @JsonKey(name: 'max_quantity', includeIfNull: false, defaultValue: 36)
  final int? maxQuantity;
  @JsonKey(name: 'price_list_id', includeIfNull: false, defaultValue: 'default')
  final String? priceListId;
  @JsonKey(name: 'price_list', includeIfNull: false)
  final PriceList? priceList;
  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String? variantId;
  @JsonKey(name: 'variant', includeIfNull: false)
  final ProductVariant? variant;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$MoneyAmountFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $MoneyAmountExtension on MoneyAmount {
  MoneyAmount copyWith(
      {String? id,
      String? currencyCode,
      Currency? currency,
      int? amount,
      int? minQuantity,
      int? maxQuantity,
      String? priceListId,
      PriceList? priceList,
      String? variantId,
      ProductVariant? variant,
      String? regionId,
      Region? region,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return MoneyAmount(
        id: id ?? this.id,
        currencyCode: currencyCode ?? this.currencyCode,
        currency: currency ?? this.currency,
        amount: amount ?? this.amount,
        minQuantity: minQuantity ?? this.minQuantity,
        maxQuantity: maxQuantity ?? this.maxQuantity,
        priceListId: priceListId ?? this.priceListId,
        priceList: priceList ?? this.priceList,
        variantId: variantId ?? this.variantId,
        variant: variant ?? this.variant,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  MoneyAmount copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? currencyCode,
      Wrapped<Currency?>? currency,
      Wrapped<int>? amount,
      Wrapped<int?>? minQuantity,
      Wrapped<int?>? maxQuantity,
      Wrapped<String?>? priceListId,
      Wrapped<PriceList?>? priceList,
      Wrapped<String?>? variantId,
      Wrapped<ProductVariant?>? variant,
      Wrapped<String?>? regionId,
      Wrapped<Region?>? region,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return MoneyAmount(
        id: (id != null ? id.value : this.id),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        currency: (currency != null ? currency.value : this.currency),
        amount: (amount != null ? amount.value : this.amount),
        minQuantity:
            (minQuantity != null ? minQuantity.value : this.minQuantity),
        maxQuantity:
            (maxQuantity != null ? maxQuantity.value : this.maxQuantity),
        priceListId:
            (priceListId != null ? priceListId.value : this.priceListId),
        priceList: (priceList != null ? priceList.value : this.priceList),
        variantId: (variantId != null ? variantId.value : this.variantId),
        variant: (variant != null ? variant.value : this.variant),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class MultipleErrors {
  const MultipleErrors({
    this.errors,
    this.message,
  });

  factory MultipleErrors.fromJson(Map<String, dynamic> json) =>
      _$MultipleErrorsFromJson(json);

  static const toJsonFactory = _$MultipleErrorsToJson;
  Map<String, dynamic> toJson() => _$MultipleErrorsToJson(this);

  @JsonKey(name: 'errors', includeIfNull: false, defaultValue: <Error>[])
  final List<Error>? errors;
  @JsonKey(name: 'message', includeIfNull: false, defaultValue: 'default')
  final String? message;
  static const fromJsonFactory = _$MultipleErrorsFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $MultipleErrorsExtension on MultipleErrors {
  MultipleErrors copyWith({List<Error>? errors, String? message}) {
    return MultipleErrors(
        errors: errors ?? this.errors, message: message ?? this.message);
  }

  MultipleErrors copyWithWrapped(
      {Wrapped<List<Error>?>? errors, Wrapped<String?>? message}) {
    return MultipleErrors(
        errors: (errors != null ? errors.value : this.errors),
        message: (message != null ? message.value : this.message));
  }
}

@JsonSerializable(explicitToJson: true)
class Note {
  const Note({
    required this.id,
    required this.resourceType,
    required this.resourceId,
    required this.value,
    required this.authorId,
    this.author,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Note.fromJson(Map<String, dynamic> json) => _$NoteFromJson(json);

  static const toJsonFactory = _$NoteToJson;
  Map<String, dynamic> toJson() => _$NoteToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'resource_type', includeIfNull: false, defaultValue: 'default')
  final String resourceType;
  @JsonKey(name: 'resource_id', includeIfNull: false, defaultValue: 'default')
  final String resourceId;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  @JsonKey(name: 'author_id', includeIfNull: false, defaultValue: 'default')
  final String? authorId;
  @JsonKey(name: 'author', includeIfNull: false)
  final User? author;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$NoteFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $NoteExtension on Note {
  Note copyWith(
      {String? id,
      String? resourceType,
      String? resourceId,
      String? value,
      String? authorId,
      User? author,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Note(
        id: id ?? this.id,
        resourceType: resourceType ?? this.resourceType,
        resourceId: resourceId ?? this.resourceId,
        value: value ?? this.value,
        authorId: authorId ?? this.authorId,
        author: author ?? this.author,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Note copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? resourceType,
      Wrapped<String>? resourceId,
      Wrapped<String>? value,
      Wrapped<String?>? authorId,
      Wrapped<User?>? author,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Note(
        id: (id != null ? id.value : this.id),
        resourceType:
            (resourceType != null ? resourceType.value : this.resourceType),
        resourceId: (resourceId != null ? resourceId.value : this.resourceId),
        value: (value != null ? value.value : this.value),
        authorId: (authorId != null ? authorId.value : this.authorId),
        author: (author != null ? author.value : this.author),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class Notification {
  const Notification({
    required this.id,
    required this.eventName,
    required this.resourceType,
    required this.resourceId,
    required this.customerId,
    this.customer,
    required this.to,
    required this.data,
    required this.parentId,
    this.parentNotification,
    this.resends,
    required this.providerId,
    this.provider,
    required this.createdAt,
    required this.updatedAt,
  });

  factory Notification.fromJson(Map<String, dynamic> json) =>
      _$NotificationFromJson(json);

  static const toJsonFactory = _$NotificationToJson;
  Map<String, dynamic> toJson() => _$NotificationToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'event_name', includeIfNull: false, defaultValue: 'default')
  final String? eventName;
  @JsonKey(name: 'resource_type', includeIfNull: false, defaultValue: 'default')
  final String resourceType;
  @JsonKey(name: 'resource_id', includeIfNull: false, defaultValue: 'default')
  final String resourceId;
  @JsonKey(name: 'customer_id', includeIfNull: false, defaultValue: 'default')
  final String? customerId;
  @JsonKey(name: 'customer', includeIfNull: false)
  final Customer? customer;
  @JsonKey(name: 'to', includeIfNull: false, defaultValue: 'default')
  final String to;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(name: 'parent_id', includeIfNull: false, defaultValue: 'default')
  final String? parentId;
  @JsonKey(name: 'parent_notification', includeIfNull: false)
  final Notification? parentNotification;
  @JsonKey(
      name: 'resends', includeIfNull: false, defaultValue: <Notification>[])
  final List<Notification>? resends;
  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String? providerId;
  @JsonKey(name: 'provider', includeIfNull: false)
  final NotificationProvider? provider;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  static const fromJsonFactory = _$NotificationFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $NotificationExtension on Notification {
  Notification copyWith(
      {String? id,
      String? eventName,
      String? resourceType,
      String? resourceId,
      String? customerId,
      Customer? customer,
      String? to,
      Object? data,
      String? parentId,
      Notification? parentNotification,
      List<Notification>? resends,
      String? providerId,
      NotificationProvider? provider,
      DateTime? createdAt,
      DateTime? updatedAt}) {
    return Notification(
        id: id ?? this.id,
        eventName: eventName ?? this.eventName,
        resourceType: resourceType ?? this.resourceType,
        resourceId: resourceId ?? this.resourceId,
        customerId: customerId ?? this.customerId,
        customer: customer ?? this.customer,
        to: to ?? this.to,
        data: data ?? this.data,
        parentId: parentId ?? this.parentId,
        parentNotification: parentNotification ?? this.parentNotification,
        resends: resends ?? this.resends,
        providerId: providerId ?? this.providerId,
        provider: provider ?? this.provider,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  Notification copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? eventName,
      Wrapped<String>? resourceType,
      Wrapped<String>? resourceId,
      Wrapped<String?>? customerId,
      Wrapped<Customer?>? customer,
      Wrapped<String>? to,
      Wrapped<Object>? data,
      Wrapped<String?>? parentId,
      Wrapped<Notification?>? parentNotification,
      Wrapped<List<Notification>?>? resends,
      Wrapped<String?>? providerId,
      Wrapped<NotificationProvider?>? provider,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt}) {
    return Notification(
        id: (id != null ? id.value : this.id),
        eventName: (eventName != null ? eventName.value : this.eventName),
        resourceType:
            (resourceType != null ? resourceType.value : this.resourceType),
        resourceId: (resourceId != null ? resourceId.value : this.resourceId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        customer: (customer != null ? customer.value : this.customer),
        to: (to != null ? to.value : this.to),
        data: (data != null ? data.value : this.data),
        parentId: (parentId != null ? parentId.value : this.parentId),
        parentNotification: (parentNotification != null
            ? parentNotification.value
            : this.parentNotification),
        resends: (resends != null ? resends.value : this.resends),
        providerId: (providerId != null ? providerId.value : this.providerId),
        provider: (provider != null ? provider.value : this.provider),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class NotificationProvider {
  const NotificationProvider({
    required this.id,
    required this.isInstalled,
  });

  factory NotificationProvider.fromJson(Map<String, dynamic> json) =>
      _$NotificationProviderFromJson(json);

  static const toJsonFactory = _$NotificationProviderToJson;
  Map<String, dynamic> toJson() => _$NotificationProviderToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'is_installed', includeIfNull: false, defaultValue: true)
  final bool isInstalled;
  static const fromJsonFactory = _$NotificationProviderFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $NotificationProviderExtension on NotificationProvider {
  NotificationProvider copyWith({String? id, bool? isInstalled}) {
    return NotificationProvider(
        id: id ?? this.id, isInstalled: isInstalled ?? this.isInstalled);
  }

  NotificationProvider copyWithWrapped(
      {Wrapped<String>? id, Wrapped<bool>? isInstalled}) {
    return NotificationProvider(
        id: (id != null ? id.value : this.id),
        isInstalled:
            (isInstalled != null ? isInstalled.value : this.isInstalled));
  }
}

@JsonSerializable(explicitToJson: true)
class OAuth {
  const OAuth({
    required this.id,
    required this.displayName,
    required this.applicationName,
    required this.installUrl,
    required this.uninstallUrl,
    required this.data,
  });

  factory OAuth.fromJson(Map<String, dynamic> json) => _$OAuthFromJson(json);

  static const toJsonFactory = _$OAuthToJson;
  Map<String, dynamic> toJson() => _$OAuthToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'display_name', includeIfNull: false, defaultValue: 'default')
  final String displayName;
  @JsonKey(
      name: 'application_name', includeIfNull: false, defaultValue: 'default')
  final String applicationName;
  @JsonKey(name: 'install_url', includeIfNull: false, defaultValue: 'default')
  final String? installUrl;
  @JsonKey(name: 'uninstall_url', includeIfNull: false, defaultValue: 'default')
  final String? uninstallUrl;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object? data;
  static const fromJsonFactory = _$OAuthFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $OAuthExtension on OAuth {
  OAuth copyWith(
      {String? id,
      String? displayName,
      String? applicationName,
      String? installUrl,
      String? uninstallUrl,
      Object? data}) {
    return OAuth(
        id: id ?? this.id,
        displayName: displayName ?? this.displayName,
        applicationName: applicationName ?? this.applicationName,
        installUrl: installUrl ?? this.installUrl,
        uninstallUrl: uninstallUrl ?? this.uninstallUrl,
        data: data ?? this.data);
  }

  OAuth copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? displayName,
      Wrapped<String>? applicationName,
      Wrapped<String?>? installUrl,
      Wrapped<String?>? uninstallUrl,
      Wrapped<Object?>? data}) {
    return OAuth(
        id: (id != null ? id.value : this.id),
        displayName:
            (displayName != null ? displayName.value : this.displayName),
        applicationName: (applicationName != null
            ? applicationName.value
            : this.applicationName),
        installUrl: (installUrl != null ? installUrl.value : this.installUrl),
        uninstallUrl:
            (uninstallUrl != null ? uninstallUrl.value : this.uninstallUrl),
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class Order {
  const Order({
    required this.id,
    required this.status,
    required this.fulfillmentStatus,
    required this.paymentStatus,
    required this.displayId,
    required this.cartId,
    this.cart,
    required this.customerId,
    this.customer,
    required this.email,
    required this.billingAddressId,
    this.billingAddress,
    required this.shippingAddressId,
    this.shippingAddress,
    required this.regionId,
    this.region,
    required this.currencyCode,
    this.currency,
    required this.taxRate,
    this.discounts,
    this.giftCards,
    this.shippingMethods,
    this.payments,
    this.fulfillments,
    this.returns,
    this.claims,
    this.refunds,
    this.swaps,
    required this.draftOrderId,
    this.draftOrder,
    this.items,
    this.edits,
    this.giftCardTransactions,
    required this.canceledAt,
    required this.noNotification,
    required this.idempotencyKey,
    required this.externalId,
    this.salesChannelId,
    this.salesChannel,
    this.shippingTotal,
    this.shippingTaxTotal,
    this.rawDiscountTotal,
    this.discountTotal,
    this.taxTotal,
    this.itemTaxTotal,
    this.refundedTotal,
    this.total,
    this.subtotal,
    this.paidTotal,
    this.refundableAmount,
    this.giftCardTotal,
    this.giftCardTaxTotal,
    this.returnableItems,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory Order.fromJson(Map<String, dynamic> json) => _$OrderFromJson(json);

  static const toJsonFactory = _$OrderToJson;
  Map<String, dynamic> toJson() => _$OrderToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: orderStatusToJson,
    fromJson: orderStatusStatusFromJson,
  )
  final enums.OrderStatus status;
  static enums.OrderStatus orderStatusStatusFromJson(Object? value) =>
      orderStatusFromJson(value, enums.OrderStatus.pending);

  @JsonKey(
    name: 'fulfillment_status',
    includeIfNull: false,
    toJson: orderFulfillmentStatusToJson,
    fromJson: orderFulfillmentStatusFulfillmentStatusFromJson,
  )
  final enums.OrderFulfillmentStatus fulfillmentStatus;
  static enums.OrderFulfillmentStatus
      orderFulfillmentStatusFulfillmentStatusFromJson(Object? value) =>
          orderFulfillmentStatusFromJson(
              value, enums.OrderFulfillmentStatus.notFulfilled);

  @JsonKey(
    name: 'payment_status',
    includeIfNull: false,
    toJson: orderPaymentStatusToJson,
    fromJson: orderPaymentStatusPaymentStatusFromJson,
  )
  final enums.OrderPaymentStatus paymentStatus;
  static enums.OrderPaymentStatus orderPaymentStatusPaymentStatusFromJson(
          Object? value) =>
      orderPaymentStatusFromJson(value, enums.OrderPaymentStatus.notPaid);

  @JsonKey(name: 'display_id', includeIfNull: false, defaultValue: 36)
  final int displayId;
  @JsonKey(name: 'cart_id', includeIfNull: false, defaultValue: 'default')
  final String? cartId;
  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart? cart;
  @JsonKey(name: 'customer_id', includeIfNull: false, defaultValue: 'default')
  final String customerId;
  @JsonKey(name: 'customer', includeIfNull: false)
  final Customer? customer;
  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(
      name: 'billing_address_id', includeIfNull: false, defaultValue: 'default')
  final String? billingAddressId;
  @JsonKey(name: 'billing_address', includeIfNull: false)
  final Address? billingAddress;
  @JsonKey(
      name: 'shipping_address_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? shippingAddressId;
  @JsonKey(name: 'shipping_address', includeIfNull: false)
  final Address? shippingAddress;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String currencyCode;
  @JsonKey(name: 'currency', includeIfNull: false)
  final Currency? currency;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final double? taxRate;
  @JsonKey(name: 'discounts', includeIfNull: false, defaultValue: <Discount>[])
  final List<Discount>? discounts;
  @JsonKey(name: 'gift_cards', includeIfNull: false, defaultValue: <GiftCard>[])
  final List<GiftCard>? giftCards;
  @JsonKey(
      name: 'shipping_methods',
      includeIfNull: false,
      defaultValue: <ShippingMethod>[])
  final List<ShippingMethod>? shippingMethods;
  @JsonKey(name: 'payments', includeIfNull: false, defaultValue: <Payment>[])
  final List<Payment>? payments;
  @JsonKey(
      name: 'fulfillments', includeIfNull: false, defaultValue: <Fulfillment>[])
  final List<Fulfillment>? fulfillments;
  @JsonKey(name: 'returns', includeIfNull: false, defaultValue: <Return>[])
  final List<Return>? returns;
  @JsonKey(name: 'claims', includeIfNull: false, defaultValue: <ClaimOrder>[])
  final List<ClaimOrder>? claims;
  @JsonKey(name: 'refunds', includeIfNull: false, defaultValue: <Refund>[])
  final List<Refund>? refunds;
  @JsonKey(name: 'swaps', includeIfNull: false, defaultValue: <Swap>[])
  final List<Swap>? swaps;
  @JsonKey(
      name: 'draft_order_id', includeIfNull: false, defaultValue: 'default')
  final String? draftOrderId;
  @JsonKey(name: 'draft_order', includeIfNull: false)
  final DraftOrder? draftOrder;
  @JsonKey(name: 'items', includeIfNull: false, defaultValue: <LineItem>[])
  final List<LineItem>? items;
  @JsonKey(name: 'edits', includeIfNull: false, defaultValue: <OrderEdit>[])
  final List<OrderEdit>? edits;
  @JsonKey(
      name: 'gift_card_transactions',
      includeIfNull: false,
      defaultValue: <GiftCardTransaction>[])
  final List<GiftCardTransaction>? giftCardTransactions;
  @JsonKey(name: 'canceled_at', includeIfNull: false)
  final DateTime? canceledAt;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'external_id', includeIfNull: false, defaultValue: 'default')
  final String? externalId;
  @JsonKey(
      name: 'sales_channel_id', includeIfNull: false, defaultValue: 'default')
  final String? salesChannelId;
  @JsonKey(name: 'sales_channel', includeIfNull: false)
  final SalesChannel? salesChannel;
  @JsonKey(name: 'shipping_total', includeIfNull: false, defaultValue: 36)
  final int? shippingTotal;
  @JsonKey(name: 'shipping_tax_total', includeIfNull: false, defaultValue: 36)
  final int? shippingTaxTotal;
  @JsonKey(name: 'raw_discount_total', includeIfNull: false, defaultValue: 36)
  final int? rawDiscountTotal;
  @JsonKey(name: 'discount_total', includeIfNull: false, defaultValue: 36)
  final int? discountTotal;
  @JsonKey(name: 'tax_total', includeIfNull: false, defaultValue: 36)
  final int? taxTotal;
  @JsonKey(name: 'item_tax_total', includeIfNull: false, defaultValue: 36)
  final int? itemTaxTotal;
  @JsonKey(name: 'refunded_total', includeIfNull: false, defaultValue: 36)
  final int? refundedTotal;
  @JsonKey(name: 'total', includeIfNull: false, defaultValue: 36)
  final int? total;
  @JsonKey(name: 'subtotal', includeIfNull: false, defaultValue: 36)
  final int? subtotal;
  @JsonKey(name: 'paid_total', includeIfNull: false, defaultValue: 36)
  final int? paidTotal;
  @JsonKey(name: 'refundable_amount', includeIfNull: false, defaultValue: 36)
  final int? refundableAmount;
  @JsonKey(name: 'gift_card_total', includeIfNull: false, defaultValue: 36)
  final int? giftCardTotal;
  @JsonKey(name: 'gift_card_tax_total', includeIfNull: false, defaultValue: 36)
  final int? giftCardTaxTotal;
  @JsonKey(
      name: 'returnable_items',
      includeIfNull: false,
      defaultValue: <LineItem>[])
  final List<LineItem>? returnableItems;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$OrderFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $OrderExtension on Order {
  Order copyWith(
      {String? id,
      enums.OrderStatus? status,
      enums.OrderFulfillmentStatus? fulfillmentStatus,
      enums.OrderPaymentStatus? paymentStatus,
      int? displayId,
      String? cartId,
      Cart? cart,
      String? customerId,
      Customer? customer,
      String? email,
      String? billingAddressId,
      Address? billingAddress,
      String? shippingAddressId,
      Address? shippingAddress,
      String? regionId,
      Region? region,
      String? currencyCode,
      Currency? currency,
      double? taxRate,
      List<Discount>? discounts,
      List<GiftCard>? giftCards,
      List<ShippingMethod>? shippingMethods,
      List<Payment>? payments,
      List<Fulfillment>? fulfillments,
      List<Return>? returns,
      List<ClaimOrder>? claims,
      List<Refund>? refunds,
      List<Swap>? swaps,
      String? draftOrderId,
      DraftOrder? draftOrder,
      List<LineItem>? items,
      List<OrderEdit>? edits,
      List<GiftCardTransaction>? giftCardTransactions,
      DateTime? canceledAt,
      bool? noNotification,
      String? idempotencyKey,
      String? externalId,
      String? salesChannelId,
      SalesChannel? salesChannel,
      int? shippingTotal,
      int? shippingTaxTotal,
      int? rawDiscountTotal,
      int? discountTotal,
      int? taxTotal,
      int? itemTaxTotal,
      int? refundedTotal,
      int? total,
      int? subtotal,
      int? paidTotal,
      int? refundableAmount,
      int? giftCardTotal,
      int? giftCardTaxTotal,
      List<LineItem>? returnableItems,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return Order(
        id: id ?? this.id,
        status: status ?? this.status,
        fulfillmentStatus: fulfillmentStatus ?? this.fulfillmentStatus,
        paymentStatus: paymentStatus ?? this.paymentStatus,
        displayId: displayId ?? this.displayId,
        cartId: cartId ?? this.cartId,
        cart: cart ?? this.cart,
        customerId: customerId ?? this.customerId,
        customer: customer ?? this.customer,
        email: email ?? this.email,
        billingAddressId: billingAddressId ?? this.billingAddressId,
        billingAddress: billingAddress ?? this.billingAddress,
        shippingAddressId: shippingAddressId ?? this.shippingAddressId,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        currencyCode: currencyCode ?? this.currencyCode,
        currency: currency ?? this.currency,
        taxRate: taxRate ?? this.taxRate,
        discounts: discounts ?? this.discounts,
        giftCards: giftCards ?? this.giftCards,
        shippingMethods: shippingMethods ?? this.shippingMethods,
        payments: payments ?? this.payments,
        fulfillments: fulfillments ?? this.fulfillments,
        returns: returns ?? this.returns,
        claims: claims ?? this.claims,
        refunds: refunds ?? this.refunds,
        swaps: swaps ?? this.swaps,
        draftOrderId: draftOrderId ?? this.draftOrderId,
        draftOrder: draftOrder ?? this.draftOrder,
        items: items ?? this.items,
        edits: edits ?? this.edits,
        giftCardTransactions: giftCardTransactions ?? this.giftCardTransactions,
        canceledAt: canceledAt ?? this.canceledAt,
        noNotification: noNotification ?? this.noNotification,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        externalId: externalId ?? this.externalId,
        salesChannelId: salesChannelId ?? this.salesChannelId,
        salesChannel: salesChannel ?? this.salesChannel,
        shippingTotal: shippingTotal ?? this.shippingTotal,
        shippingTaxTotal: shippingTaxTotal ?? this.shippingTaxTotal,
        rawDiscountTotal: rawDiscountTotal ?? this.rawDiscountTotal,
        discountTotal: discountTotal ?? this.discountTotal,
        taxTotal: taxTotal ?? this.taxTotal,
        itemTaxTotal: itemTaxTotal ?? this.itemTaxTotal,
        refundedTotal: refundedTotal ?? this.refundedTotal,
        total: total ?? this.total,
        subtotal: subtotal ?? this.subtotal,
        paidTotal: paidTotal ?? this.paidTotal,
        refundableAmount: refundableAmount ?? this.refundableAmount,
        giftCardTotal: giftCardTotal ?? this.giftCardTotal,
        giftCardTaxTotal: giftCardTaxTotal ?? this.giftCardTaxTotal,
        returnableItems: returnableItems ?? this.returnableItems,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  Order copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.OrderStatus>? status,
      Wrapped<enums.OrderFulfillmentStatus>? fulfillmentStatus,
      Wrapped<enums.OrderPaymentStatus>? paymentStatus,
      Wrapped<int>? displayId,
      Wrapped<String?>? cartId,
      Wrapped<Cart?>? cart,
      Wrapped<String>? customerId,
      Wrapped<Customer?>? customer,
      Wrapped<String>? email,
      Wrapped<String?>? billingAddressId,
      Wrapped<Address?>? billingAddress,
      Wrapped<String?>? shippingAddressId,
      Wrapped<Address?>? shippingAddress,
      Wrapped<String>? regionId,
      Wrapped<Region?>? region,
      Wrapped<String>? currencyCode,
      Wrapped<Currency?>? currency,
      Wrapped<double?>? taxRate,
      Wrapped<List<Discount>?>? discounts,
      Wrapped<List<GiftCard>?>? giftCards,
      Wrapped<List<ShippingMethod>?>? shippingMethods,
      Wrapped<List<Payment>?>? payments,
      Wrapped<List<Fulfillment>?>? fulfillments,
      Wrapped<List<Return>?>? returns,
      Wrapped<List<ClaimOrder>?>? claims,
      Wrapped<List<Refund>?>? refunds,
      Wrapped<List<Swap>?>? swaps,
      Wrapped<String?>? draftOrderId,
      Wrapped<DraftOrder?>? draftOrder,
      Wrapped<List<LineItem>?>? items,
      Wrapped<List<OrderEdit>?>? edits,
      Wrapped<List<GiftCardTransaction>?>? giftCardTransactions,
      Wrapped<DateTime?>? canceledAt,
      Wrapped<bool?>? noNotification,
      Wrapped<String?>? idempotencyKey,
      Wrapped<String?>? externalId,
      Wrapped<String?>? salesChannelId,
      Wrapped<SalesChannel?>? salesChannel,
      Wrapped<int?>? shippingTotal,
      Wrapped<int?>? shippingTaxTotal,
      Wrapped<int?>? rawDiscountTotal,
      Wrapped<int?>? discountTotal,
      Wrapped<int?>? taxTotal,
      Wrapped<int?>? itemTaxTotal,
      Wrapped<int?>? refundedTotal,
      Wrapped<int?>? total,
      Wrapped<int?>? subtotal,
      Wrapped<int?>? paidTotal,
      Wrapped<int?>? refundableAmount,
      Wrapped<int?>? giftCardTotal,
      Wrapped<int?>? giftCardTaxTotal,
      Wrapped<List<LineItem>?>? returnableItems,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return Order(
        id: (id != null ? id.value : this.id),
        status: (status != null ? status.value : this.status),
        fulfillmentStatus: (fulfillmentStatus != null
            ? fulfillmentStatus.value
            : this.fulfillmentStatus),
        paymentStatus:
            (paymentStatus != null ? paymentStatus.value : this.paymentStatus),
        displayId: (displayId != null ? displayId.value : this.displayId),
        cartId: (cartId != null ? cartId.value : this.cartId),
        cart: (cart != null ? cart.value : this.cart),
        customerId: (customerId != null ? customerId.value : this.customerId),
        customer: (customer != null ? customer.value : this.customer),
        email: (email != null ? email.value : this.email),
        billingAddressId: (billingAddressId != null
            ? billingAddressId.value
            : this.billingAddressId),
        billingAddress: (billingAddress != null
            ? billingAddress.value
            : this.billingAddress),
        shippingAddressId: (shippingAddressId != null
            ? shippingAddressId.value
            : this.shippingAddressId),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        currency: (currency != null ? currency.value : this.currency),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate),
        discounts: (discounts != null ? discounts.value : this.discounts),
        giftCards: (giftCards != null ? giftCards.value : this.giftCards),
        shippingMethods: (shippingMethods != null
            ? shippingMethods.value
            : this.shippingMethods),
        payments: (payments != null ? payments.value : this.payments),
        fulfillments:
            (fulfillments != null ? fulfillments.value : this.fulfillments),
        returns: (returns != null ? returns.value : this.returns),
        claims: (claims != null ? claims.value : this.claims),
        refunds: (refunds != null ? refunds.value : this.refunds),
        swaps: (swaps != null ? swaps.value : this.swaps),
        draftOrderId:
            (draftOrderId != null ? draftOrderId.value : this.draftOrderId),
        draftOrder: (draftOrder != null ? draftOrder.value : this.draftOrder),
        items: (items != null ? items.value : this.items),
        edits: (edits != null ? edits.value : this.edits),
        giftCardTransactions: (giftCardTransactions != null
            ? giftCardTransactions.value
            : this.giftCardTransactions),
        canceledAt: (canceledAt != null ? canceledAt.value : this.canceledAt),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        externalId: (externalId != null ? externalId.value : this.externalId),
        salesChannelId: (salesChannelId != null
            ? salesChannelId.value
            : this.salesChannelId),
        salesChannel:
            (salesChannel != null ? salesChannel.value : this.salesChannel),
        shippingTotal:
            (shippingTotal != null ? shippingTotal.value : this.shippingTotal),
        shippingTaxTotal: (shippingTaxTotal != null
            ? shippingTaxTotal.value
            : this.shippingTaxTotal),
        rawDiscountTotal: (rawDiscountTotal != null
            ? rawDiscountTotal.value
            : this.rawDiscountTotal),
        discountTotal:
            (discountTotal != null ? discountTotal.value : this.discountTotal),
        taxTotal: (taxTotal != null ? taxTotal.value : this.taxTotal),
        itemTaxTotal:
            (itemTaxTotal != null ? itemTaxTotal.value : this.itemTaxTotal),
        refundedTotal:
            (refundedTotal != null ? refundedTotal.value : this.refundedTotal),
        total: (total != null ? total.value : this.total),
        subtotal: (subtotal != null ? subtotal.value : this.subtotal),
        paidTotal: (paidTotal != null ? paidTotal.value : this.paidTotal),
        refundableAmount: (refundableAmount != null
            ? refundableAmount.value
            : this.refundableAmount),
        giftCardTotal:
            (giftCardTotal != null ? giftCardTotal.value : this.giftCardTotal),
        giftCardTaxTotal: (giftCardTaxTotal != null
            ? giftCardTaxTotal.value
            : this.giftCardTaxTotal),
        returnableItems: (returnableItems != null
            ? returnableItems.value
            : this.returnableItems),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class OrderEdit {
  const OrderEdit({
    required this.id,
    required this.orderId,
    this.order,
    this.changes,
    required this.internalNote,
    required this.createdBy,
    required this.requestedBy,
    required this.requestedAt,
    required this.confirmedBy,
    required this.confirmedAt,
    required this.declinedBy,
    required this.declinedAt,
    required this.declinedReason,
    required this.canceledBy,
    required this.canceledAt,
    this.subtotal,
    this.discountTotal,
    this.shippingTotal,
    this.giftCardTotal,
    this.giftCardTaxTotal,
    this.taxTotal,
    this.total,
    this.differenceDue,
    required this.status,
    this.items,
    required this.paymentCollectionId,
    this.paymentCollection,
    required this.createdAt,
    required this.updatedAt,
  });

  factory OrderEdit.fromJson(Map<String, dynamic> json) =>
      _$OrderEditFromJson(json);

  static const toJsonFactory = _$OrderEditToJson;
  Map<String, dynamic> toJson() => _$OrderEditToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(
      name: 'changes', includeIfNull: false, defaultValue: <OrderItemChange>[])
  final List<OrderItemChange>? changes;
  @JsonKey(name: 'internal_note', includeIfNull: false, defaultValue: 'default')
  final String? internalNote;
  @JsonKey(name: 'created_by', includeIfNull: false, defaultValue: 'default')
  final String createdBy;
  @JsonKey(name: 'requested_by', includeIfNull: false, defaultValue: 'default')
  final String? requestedBy;
  @JsonKey(name: 'requested_at', includeIfNull: false)
  final DateTime? requestedAt;
  @JsonKey(name: 'confirmed_by', includeIfNull: false, defaultValue: 'default')
  final String? confirmedBy;
  @JsonKey(name: 'confirmed_at', includeIfNull: false)
  final DateTime? confirmedAt;
  @JsonKey(name: 'declined_by', includeIfNull: false, defaultValue: 'default')
  final String? declinedBy;
  @JsonKey(name: 'declined_at', includeIfNull: false)
  final DateTime? declinedAt;
  @JsonKey(
      name: 'declined_reason', includeIfNull: false, defaultValue: 'default')
  final String? declinedReason;
  @JsonKey(name: 'canceled_by', includeIfNull: false, defaultValue: 'default')
  final String? canceledBy;
  @JsonKey(name: 'canceled_at', includeIfNull: false)
  final DateTime? canceledAt;
  @JsonKey(name: 'subtotal', includeIfNull: false, defaultValue: 36)
  final int? subtotal;
  @JsonKey(name: 'discount_total', includeIfNull: false, defaultValue: 36)
  final int? discountTotal;
  @JsonKey(name: 'shipping_total', includeIfNull: false, defaultValue: 36)
  final int? shippingTotal;
  @JsonKey(name: 'gift_card_total', includeIfNull: false, defaultValue: 36)
  final int? giftCardTotal;
  @JsonKey(name: 'gift_card_tax_total', includeIfNull: false, defaultValue: 36)
  final int? giftCardTaxTotal;
  @JsonKey(name: 'tax_total', includeIfNull: false, defaultValue: 36)
  final int? taxTotal;
  @JsonKey(name: 'total', includeIfNull: false, defaultValue: 36)
  final int? total;
  @JsonKey(name: 'difference_due', includeIfNull: false, defaultValue: 36)
  final int? differenceDue;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: orderEditStatusToJson,
    fromJson: orderEditStatusFromJson,
  )
  final enums.OrderEditStatus status;
  @JsonKey(name: 'items', includeIfNull: false, defaultValue: <LineItem>[])
  final List<LineItem>? items;
  @JsonKey(
      name: 'payment_collection_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? paymentCollectionId;
  @JsonKey(name: 'payment_collection', includeIfNull: false)
  final PaymentCollection? paymentCollection;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  static const fromJsonFactory = _$OrderEditFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $OrderEditExtension on OrderEdit {
  OrderEdit copyWith(
      {String? id,
      String? orderId,
      Order? order,
      List<OrderItemChange>? changes,
      String? internalNote,
      String? createdBy,
      String? requestedBy,
      DateTime? requestedAt,
      String? confirmedBy,
      DateTime? confirmedAt,
      String? declinedBy,
      DateTime? declinedAt,
      String? declinedReason,
      String? canceledBy,
      DateTime? canceledAt,
      int? subtotal,
      int? discountTotal,
      int? shippingTotal,
      int? giftCardTotal,
      int? giftCardTaxTotal,
      int? taxTotal,
      int? total,
      int? differenceDue,
      enums.OrderEditStatus? status,
      List<LineItem>? items,
      String? paymentCollectionId,
      PaymentCollection? paymentCollection,
      DateTime? createdAt,
      DateTime? updatedAt}) {
    return OrderEdit(
        id: id ?? this.id,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        changes: changes ?? this.changes,
        internalNote: internalNote ?? this.internalNote,
        createdBy: createdBy ?? this.createdBy,
        requestedBy: requestedBy ?? this.requestedBy,
        requestedAt: requestedAt ?? this.requestedAt,
        confirmedBy: confirmedBy ?? this.confirmedBy,
        confirmedAt: confirmedAt ?? this.confirmedAt,
        declinedBy: declinedBy ?? this.declinedBy,
        declinedAt: declinedAt ?? this.declinedAt,
        declinedReason: declinedReason ?? this.declinedReason,
        canceledBy: canceledBy ?? this.canceledBy,
        canceledAt: canceledAt ?? this.canceledAt,
        subtotal: subtotal ?? this.subtotal,
        discountTotal: discountTotal ?? this.discountTotal,
        shippingTotal: shippingTotal ?? this.shippingTotal,
        giftCardTotal: giftCardTotal ?? this.giftCardTotal,
        giftCardTaxTotal: giftCardTaxTotal ?? this.giftCardTaxTotal,
        taxTotal: taxTotal ?? this.taxTotal,
        total: total ?? this.total,
        differenceDue: differenceDue ?? this.differenceDue,
        status: status ?? this.status,
        items: items ?? this.items,
        paymentCollectionId: paymentCollectionId ?? this.paymentCollectionId,
        paymentCollection: paymentCollection ?? this.paymentCollection,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  OrderEdit copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? orderId,
      Wrapped<Order?>? order,
      Wrapped<List<OrderItemChange>?>? changes,
      Wrapped<String?>? internalNote,
      Wrapped<String>? createdBy,
      Wrapped<String?>? requestedBy,
      Wrapped<DateTime?>? requestedAt,
      Wrapped<String?>? confirmedBy,
      Wrapped<DateTime?>? confirmedAt,
      Wrapped<String?>? declinedBy,
      Wrapped<DateTime?>? declinedAt,
      Wrapped<String?>? declinedReason,
      Wrapped<String?>? canceledBy,
      Wrapped<DateTime?>? canceledAt,
      Wrapped<int?>? subtotal,
      Wrapped<int?>? discountTotal,
      Wrapped<int?>? shippingTotal,
      Wrapped<int?>? giftCardTotal,
      Wrapped<int?>? giftCardTaxTotal,
      Wrapped<int?>? taxTotal,
      Wrapped<int?>? total,
      Wrapped<int?>? differenceDue,
      Wrapped<enums.OrderEditStatus>? status,
      Wrapped<List<LineItem>?>? items,
      Wrapped<String?>? paymentCollectionId,
      Wrapped<PaymentCollection?>? paymentCollection,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt}) {
    return OrderEdit(
        id: (id != null ? id.value : this.id),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        changes: (changes != null ? changes.value : this.changes),
        internalNote:
            (internalNote != null ? internalNote.value : this.internalNote),
        createdBy: (createdBy != null ? createdBy.value : this.createdBy),
        requestedBy:
            (requestedBy != null ? requestedBy.value : this.requestedBy),
        requestedAt:
            (requestedAt != null ? requestedAt.value : this.requestedAt),
        confirmedBy:
            (confirmedBy != null ? confirmedBy.value : this.confirmedBy),
        confirmedAt:
            (confirmedAt != null ? confirmedAt.value : this.confirmedAt),
        declinedBy: (declinedBy != null ? declinedBy.value : this.declinedBy),
        declinedAt: (declinedAt != null ? declinedAt.value : this.declinedAt),
        declinedReason: (declinedReason != null
            ? declinedReason.value
            : this.declinedReason),
        canceledBy: (canceledBy != null ? canceledBy.value : this.canceledBy),
        canceledAt: (canceledAt != null ? canceledAt.value : this.canceledAt),
        subtotal: (subtotal != null ? subtotal.value : this.subtotal),
        discountTotal:
            (discountTotal != null ? discountTotal.value : this.discountTotal),
        shippingTotal:
            (shippingTotal != null ? shippingTotal.value : this.shippingTotal),
        giftCardTotal:
            (giftCardTotal != null ? giftCardTotal.value : this.giftCardTotal),
        giftCardTaxTotal: (giftCardTaxTotal != null
            ? giftCardTaxTotal.value
            : this.giftCardTaxTotal),
        taxTotal: (taxTotal != null ? taxTotal.value : this.taxTotal),
        total: (total != null ? total.value : this.total),
        differenceDue:
            (differenceDue != null ? differenceDue.value : this.differenceDue),
        status: (status != null ? status.value : this.status),
        items: (items != null ? items.value : this.items),
        paymentCollectionId: (paymentCollectionId != null
            ? paymentCollectionId.value
            : this.paymentCollectionId),
        paymentCollection: (paymentCollection != null
            ? paymentCollection.value
            : this.paymentCollection),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class OrderItemChange {
  const OrderItemChange({
    required this.id,
    required this.type,
    required this.orderEditId,
    this.orderEdit,
    required this.originalLineItemId,
    this.originalLineItem,
    required this.lineItemId,
    this.lineItem,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
  });

  factory OrderItemChange.fromJson(Map<String, dynamic> json) =>
      _$OrderItemChangeFromJson(json);

  static const toJsonFactory = _$OrderItemChangeToJson;
  Map<String, dynamic> toJson() => _$OrderItemChangeToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: orderItemChangeTypeToJson,
    fromJson: orderItemChangeTypeFromJson,
  )
  final enums.OrderItemChangeType type;
  @JsonKey(name: 'order_edit_id', includeIfNull: false, defaultValue: 'default')
  final String orderEditId;
  @JsonKey(name: 'order_edit', includeIfNull: false)
  final OrderEdit? orderEdit;
  @JsonKey(
      name: 'original_line_item_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? originalLineItemId;
  @JsonKey(name: 'original_line_item', includeIfNull: false)
  final LineItem? originalLineItem;
  @JsonKey(name: 'line_item_id', includeIfNull: false, defaultValue: 'default')
  final String? lineItemId;
  @JsonKey(name: 'line_item', includeIfNull: false)
  final LineItem? lineItem;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$OrderItemChangeFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $OrderItemChangeExtension on OrderItemChange {
  OrderItemChange copyWith(
      {String? id,
      enums.OrderItemChangeType? type,
      String? orderEditId,
      OrderEdit? orderEdit,
      String? originalLineItemId,
      LineItem? originalLineItem,
      String? lineItemId,
      LineItem? lineItem,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return OrderItemChange(
        id: id ?? this.id,
        type: type ?? this.type,
        orderEditId: orderEditId ?? this.orderEditId,
        orderEdit: orderEdit ?? this.orderEdit,
        originalLineItemId: originalLineItemId ?? this.originalLineItemId,
        originalLineItem: originalLineItem ?? this.originalLineItem,
        lineItemId: lineItemId ?? this.lineItemId,
        lineItem: lineItem ?? this.lineItem,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  OrderItemChange copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.OrderItemChangeType>? type,
      Wrapped<String>? orderEditId,
      Wrapped<OrderEdit?>? orderEdit,
      Wrapped<String?>? originalLineItemId,
      Wrapped<LineItem?>? originalLineItem,
      Wrapped<String?>? lineItemId,
      Wrapped<LineItem?>? lineItem,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return OrderItemChange(
        id: (id != null ? id.value : this.id),
        type: (type != null ? type.value : this.type),
        orderEditId:
            (orderEditId != null ? orderEditId.value : this.orderEditId),
        orderEdit: (orderEdit != null ? orderEdit.value : this.orderEdit),
        originalLineItemId: (originalLineItemId != null
            ? originalLineItemId.value
            : this.originalLineItemId),
        originalLineItem: (originalLineItem != null
            ? originalLineItem.value
            : this.originalLineItem),
        lineItemId: (lineItemId != null ? lineItemId.value : this.lineItemId),
        lineItem: (lineItem != null ? lineItem.value : this.lineItem),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class Payment {
  const Payment({
    required this.id,
    required this.swapId,
    this.swap,
    required this.cartId,
    this.cart,
    required this.orderId,
    this.order,
    required this.amount,
    required this.currencyCode,
    this.currency,
    required this.amountRefunded,
    required this.providerId,
    required this.data,
    required this.capturedAt,
    required this.canceledAt,
    required this.idempotencyKey,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory Payment.fromJson(Map<String, dynamic> json) =>
      _$PaymentFromJson(json);

  static const toJsonFactory = _$PaymentToJson;
  Map<String, dynamic> toJson() => _$PaymentToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'swap_id', includeIfNull: false, defaultValue: 'default')
  final String? swapId;
  @JsonKey(name: 'swap', includeIfNull: false)
  final Swap? swap;
  @JsonKey(name: 'cart_id', includeIfNull: false, defaultValue: 'default')
  final String? cartId;
  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart? cart;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String? orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String currencyCode;
  @JsonKey(name: 'currency', includeIfNull: false)
  final Currency? currency;
  @JsonKey(name: 'amount_refunded', includeIfNull: false, defaultValue: 36)
  final int amountRefunded;
  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(name: 'captured_at', includeIfNull: false)
  final DateTime? capturedAt;
  @JsonKey(name: 'canceled_at', includeIfNull: false)
  final DateTime? canceledAt;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$PaymentFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PaymentExtension on Payment {
  Payment copyWith(
      {String? id,
      String? swapId,
      Swap? swap,
      String? cartId,
      Cart? cart,
      String? orderId,
      Order? order,
      int? amount,
      String? currencyCode,
      Currency? currency,
      int? amountRefunded,
      String? providerId,
      Object? data,
      DateTime? capturedAt,
      DateTime? canceledAt,
      String? idempotencyKey,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return Payment(
        id: id ?? this.id,
        swapId: swapId ?? this.swapId,
        swap: swap ?? this.swap,
        cartId: cartId ?? this.cartId,
        cart: cart ?? this.cart,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        amount: amount ?? this.amount,
        currencyCode: currencyCode ?? this.currencyCode,
        currency: currency ?? this.currency,
        amountRefunded: amountRefunded ?? this.amountRefunded,
        providerId: providerId ?? this.providerId,
        data: data ?? this.data,
        capturedAt: capturedAt ?? this.capturedAt,
        canceledAt: canceledAt ?? this.canceledAt,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  Payment copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? swapId,
      Wrapped<Swap?>? swap,
      Wrapped<String?>? cartId,
      Wrapped<Cart?>? cart,
      Wrapped<String?>? orderId,
      Wrapped<Order?>? order,
      Wrapped<int>? amount,
      Wrapped<String>? currencyCode,
      Wrapped<Currency?>? currency,
      Wrapped<int>? amountRefunded,
      Wrapped<String>? providerId,
      Wrapped<Object>? data,
      Wrapped<DateTime?>? capturedAt,
      Wrapped<DateTime?>? canceledAt,
      Wrapped<String?>? idempotencyKey,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return Payment(
        id: (id != null ? id.value : this.id),
        swapId: (swapId != null ? swapId.value : this.swapId),
        swap: (swap != null ? swap.value : this.swap),
        cartId: (cartId != null ? cartId.value : this.cartId),
        cart: (cart != null ? cart.value : this.cart),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        amount: (amount != null ? amount.value : this.amount),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        currency: (currency != null ? currency.value : this.currency),
        amountRefunded: (amountRefunded != null
            ? amountRefunded.value
            : this.amountRefunded),
        providerId: (providerId != null ? providerId.value : this.providerId),
        data: (data != null ? data.value : this.data),
        capturedAt: (capturedAt != null ? capturedAt.value : this.capturedAt),
        canceledAt: (canceledAt != null ? canceledAt.value : this.canceledAt),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class PaymentCollection {
  const PaymentCollection({
    required this.id,
    required this.type,
    required this.status,
    required this.description,
    required this.amount,
    required this.authorizedAmount,
    required this.regionId,
    this.region,
    required this.currencyCode,
    this.currency,
    this.paymentSessions,
    this.payments,
    required this.createdBy,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory PaymentCollection.fromJson(Map<String, dynamic> json) =>
      _$PaymentCollectionFromJson(json);

  static const toJsonFactory = _$PaymentCollectionToJson;
  Map<String, dynamic> toJson() => _$PaymentCollectionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: paymentCollectionTypeToJson,
    fromJson: paymentCollectionTypeFromJson,
  )
  final enums.PaymentCollectionType type;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: paymentCollectionStatusToJson,
    fromJson: paymentCollectionStatusFromJson,
  )
  final enums.PaymentCollectionStatus status;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'authorized_amount', includeIfNull: false, defaultValue: 36)
  final int? authorizedAmount;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String currencyCode;
  @JsonKey(name: 'currency', includeIfNull: false)
  final Currency? currency;
  @JsonKey(
      name: 'payment_sessions',
      includeIfNull: false,
      defaultValue: <PaymentSession>[])
  final List<PaymentSession>? paymentSessions;
  @JsonKey(name: 'payments', includeIfNull: false, defaultValue: <Payment>[])
  final List<Payment>? payments;
  @JsonKey(name: 'created_by', includeIfNull: false, defaultValue: 'default')
  final String createdBy;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$PaymentCollectionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PaymentCollectionExtension on PaymentCollection {
  PaymentCollection copyWith(
      {String? id,
      enums.PaymentCollectionType? type,
      enums.PaymentCollectionStatus? status,
      String? description,
      int? amount,
      int? authorizedAmount,
      String? regionId,
      Region? region,
      String? currencyCode,
      Currency? currency,
      List<PaymentSession>? paymentSessions,
      List<Payment>? payments,
      String? createdBy,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return PaymentCollection(
        id: id ?? this.id,
        type: type ?? this.type,
        status: status ?? this.status,
        description: description ?? this.description,
        amount: amount ?? this.amount,
        authorizedAmount: authorizedAmount ?? this.authorizedAmount,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        currencyCode: currencyCode ?? this.currencyCode,
        currency: currency ?? this.currency,
        paymentSessions: paymentSessions ?? this.paymentSessions,
        payments: payments ?? this.payments,
        createdBy: createdBy ?? this.createdBy,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  PaymentCollection copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.PaymentCollectionType>? type,
      Wrapped<enums.PaymentCollectionStatus>? status,
      Wrapped<String?>? description,
      Wrapped<int>? amount,
      Wrapped<int?>? authorizedAmount,
      Wrapped<String>? regionId,
      Wrapped<Region?>? region,
      Wrapped<String>? currencyCode,
      Wrapped<Currency?>? currency,
      Wrapped<List<PaymentSession>?>? paymentSessions,
      Wrapped<List<Payment>?>? payments,
      Wrapped<String>? createdBy,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return PaymentCollection(
        id: (id != null ? id.value : this.id),
        type: (type != null ? type.value : this.type),
        status: (status != null ? status.value : this.status),
        description:
            (description != null ? description.value : this.description),
        amount: (amount != null ? amount.value : this.amount),
        authorizedAmount: (authorizedAmount != null
            ? authorizedAmount.value
            : this.authorizedAmount),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        currency: (currency != null ? currency.value : this.currency),
        paymentSessions: (paymentSessions != null
            ? paymentSessions.value
            : this.paymentSessions),
        payments: (payments != null ? payments.value : this.payments),
        createdBy: (createdBy != null ? createdBy.value : this.createdBy),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class PaymentProvider {
  const PaymentProvider({
    required this.id,
    required this.isInstalled,
  });

  factory PaymentProvider.fromJson(Map<String, dynamic> json) =>
      _$PaymentProviderFromJson(json);

  static const toJsonFactory = _$PaymentProviderToJson;
  Map<String, dynamic> toJson() => _$PaymentProviderToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'is_installed', includeIfNull: false, defaultValue: true)
  final bool isInstalled;
  static const fromJsonFactory = _$PaymentProviderFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PaymentProviderExtension on PaymentProvider {
  PaymentProvider copyWith({String? id, bool? isInstalled}) {
    return PaymentProvider(
        id: id ?? this.id, isInstalled: isInstalled ?? this.isInstalled);
  }

  PaymentProvider copyWithWrapped(
      {Wrapped<String>? id, Wrapped<bool>? isInstalled}) {
    return PaymentProvider(
        id: (id != null ? id.value : this.id),
        isInstalled:
            (isInstalled != null ? isInstalled.value : this.isInstalled));
  }
}

@JsonSerializable(explicitToJson: true)
class PaymentSession {
  const PaymentSession({
    required this.id,
    required this.cartId,
    this.cart,
    required this.providerId,
    required this.isSelected,
    required this.isInitiated,
    required this.status,
    required this.data,
    required this.idempotencyKey,
    required this.amount,
    required this.paymentAuthorizedAt,
    required this.createdAt,
    required this.updatedAt,
  });

  factory PaymentSession.fromJson(Map<String, dynamic> json) =>
      _$PaymentSessionFromJson(json);

  static const toJsonFactory = _$PaymentSessionToJson;
  Map<String, dynamic> toJson() => _$PaymentSessionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'cart_id', includeIfNull: false, defaultValue: 'default')
  final String? cartId;
  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart? cart;
  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'is_selected', includeIfNull: false)
  final bool? isSelected;
  @JsonKey(name: 'is_initiated', includeIfNull: false, defaultValue: false)
  final bool isInitiated;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: paymentSessionStatusToJson,
    fromJson: paymentSessionStatusFromJson,
  )
  final enums.PaymentSessionStatus status;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int? amount;
  @JsonKey(name: 'payment_authorized_at', includeIfNull: false)
  final DateTime? paymentAuthorizedAt;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  static const fromJsonFactory = _$PaymentSessionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PaymentSessionExtension on PaymentSession {
  PaymentSession copyWith(
      {String? id,
      String? cartId,
      Cart? cart,
      String? providerId,
      bool? isSelected,
      bool? isInitiated,
      enums.PaymentSessionStatus? status,
      Object? data,
      String? idempotencyKey,
      int? amount,
      DateTime? paymentAuthorizedAt,
      DateTime? createdAt,
      DateTime? updatedAt}) {
    return PaymentSession(
        id: id ?? this.id,
        cartId: cartId ?? this.cartId,
        cart: cart ?? this.cart,
        providerId: providerId ?? this.providerId,
        isSelected: isSelected ?? this.isSelected,
        isInitiated: isInitiated ?? this.isInitiated,
        status: status ?? this.status,
        data: data ?? this.data,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        amount: amount ?? this.amount,
        paymentAuthorizedAt: paymentAuthorizedAt ?? this.paymentAuthorizedAt,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  PaymentSession copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? cartId,
      Wrapped<Cart?>? cart,
      Wrapped<String>? providerId,
      Wrapped<bool?>? isSelected,
      Wrapped<bool>? isInitiated,
      Wrapped<enums.PaymentSessionStatus>? status,
      Wrapped<Object>? data,
      Wrapped<String?>? idempotencyKey,
      Wrapped<int?>? amount,
      Wrapped<DateTime?>? paymentAuthorizedAt,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt}) {
    return PaymentSession(
        id: (id != null ? id.value : this.id),
        cartId: (cartId != null ? cartId.value : this.cartId),
        cart: (cart != null ? cart.value : this.cart),
        providerId: (providerId != null ? providerId.value : this.providerId),
        isSelected: (isSelected != null ? isSelected.value : this.isSelected),
        isInitiated:
            (isInitiated != null ? isInitiated.value : this.isInitiated),
        status: (status != null ? status.value : this.status),
        data: (data != null ? data.value : this.data),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        amount: (amount != null ? amount.value : this.amount),
        paymentAuthorizedAt: (paymentAuthorizedAt != null
            ? paymentAuthorizedAt.value
            : this.paymentAuthorizedAt),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class PriceList {
  const PriceList({
    required this.id,
    required this.name,
    required this.description,
    required this.type,
    required this.status,
    required this.startsAt,
    required this.endsAt,
    this.customerGroups,
    this.prices,
    this.includesTax,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
  });

  factory PriceList.fromJson(Map<String, dynamic> json) =>
      _$PriceListFromJson(json);

  static const toJsonFactory = _$PriceListToJson;
  Map<String, dynamic> toJson() => _$PriceListToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String description;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: priceListTypeToJson,
    fromJson: priceListTypeTypeFromJson,
  )
  final enums.PriceListType type;
  static enums.PriceListType priceListTypeTypeFromJson(Object? value) =>
      priceListTypeFromJson(value, enums.PriceListType.sale);

  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: priceListStatusToJson,
    fromJson: priceListStatusStatusFromJson,
  )
  final enums.PriceListStatus status;
  static enums.PriceListStatus priceListStatusStatusFromJson(Object? value) =>
      priceListStatusFromJson(value, enums.PriceListStatus.draft);

  @JsonKey(name: 'starts_at', includeIfNull: false)
  final DateTime? startsAt;
  @JsonKey(name: 'ends_at', includeIfNull: false)
  final DateTime? endsAt;
  @JsonKey(
      name: 'customer_groups',
      includeIfNull: false,
      defaultValue: <CustomerGroup>[])
  final List<CustomerGroup>? customerGroups;
  @JsonKey(name: 'prices', includeIfNull: false, defaultValue: <MoneyAmount>[])
  final List<MoneyAmount>? prices;
  @JsonKey(name: 'includes_tax', includeIfNull: false, defaultValue: false)
  final bool? includesTax;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$PriceListFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PriceListExtension on PriceList {
  PriceList copyWith(
      {String? id,
      String? name,
      String? description,
      enums.PriceListType? type,
      enums.PriceListStatus? status,
      DateTime? startsAt,
      DateTime? endsAt,
      List<CustomerGroup>? customerGroups,
      List<MoneyAmount>? prices,
      bool? includesTax,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return PriceList(
        id: id ?? this.id,
        name: name ?? this.name,
        description: description ?? this.description,
        type: type ?? this.type,
        status: status ?? this.status,
        startsAt: startsAt ?? this.startsAt,
        endsAt: endsAt ?? this.endsAt,
        customerGroups: customerGroups ?? this.customerGroups,
        prices: prices ?? this.prices,
        includesTax: includesTax ?? this.includesTax,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  PriceList copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<String>? description,
      Wrapped<enums.PriceListType>? type,
      Wrapped<enums.PriceListStatus>? status,
      Wrapped<DateTime?>? startsAt,
      Wrapped<DateTime?>? endsAt,
      Wrapped<List<CustomerGroup>?>? customerGroups,
      Wrapped<List<MoneyAmount>?>? prices,
      Wrapped<bool?>? includesTax,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return PriceList(
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        type: (type != null ? type.value : this.type),
        status: (status != null ? status.value : this.status),
        startsAt: (startsAt != null ? startsAt.value : this.startsAt),
        endsAt: (endsAt != null ? endsAt.value : this.endsAt),
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups),
        prices: (prices != null ? prices.value : this.prices),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class PricedProduct {
  const PricedProduct({
    this.variants,
    required this.id,
    required this.title,
    required this.subtitle,
    required this.description,
    required this.handle,
    required this.isGiftcard,
    required this.status,
    this.images,
    required this.thumbnail,
    this.options,
    this.categories,
    required this.profileId,
    this.profile,
    this.profiles,
    required this.weight,
    required this.length,
    required this.height,
    required this.width,
    required this.hsCode,
    required this.originCountry,
    required this.midCode,
    required this.material,
    required this.collectionId,
    this.collection,
    required this.typeId,
    this.type,
    this.tags,
    required this.discountable,
    required this.externalId,
    this.salesChannels,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory PricedProduct.fromJson(Map<String, dynamic> json) =>
      _$PricedProductFromJson(json);

  static const toJsonFactory = _$PricedProductToJson;
  Map<String, dynamic> toJson() => _$PricedProductToJson(this);

  @JsonKey(
      name: 'variants', includeIfNull: false, defaultValue: <ProductVariant>[])
  final List<ProductVariant>? variants;
  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'subtitle', includeIfNull: false, defaultValue: 'default')
  final String? subtitle;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(name: 'is_giftcard', includeIfNull: false, defaultValue: false)
  final bool isGiftcard;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: pricedProductStatusToJson,
    fromJson: pricedProductStatusStatusFromJson,
  )
  final enums.PricedProductStatus status;
  static enums.PricedProductStatus pricedProductStatusStatusFromJson(
          Object? value) =>
      pricedProductStatusFromJson(value, enums.PricedProductStatus.draft);

  @JsonKey(name: 'images', includeIfNull: false, defaultValue: <Image>[])
  final List<Image>? images;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(
      name: 'options', includeIfNull: false, defaultValue: <ProductOption>[])
  final List<ProductOption>? options;
  @JsonKey(
      name: 'categories',
      includeIfNull: false,
      defaultValue: <ProductCategory>[])
  final List<ProductCategory>? categories;
  @JsonKey(name: 'profile_id', includeIfNull: false, defaultValue: 'default')
  final String profileId;
  @JsonKey(name: 'profile', includeIfNull: false)
  final ShippingProfile? profile;
  @JsonKey(
      name: 'profiles', includeIfNull: false, defaultValue: <ShippingProfile>[])
  final List<ShippingProfile>? profiles;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'collection_id', includeIfNull: false, defaultValue: 'default')
  final String? collectionId;
  @JsonKey(name: 'collection', includeIfNull: false)
  final ProductCollection? collection;
  @JsonKey(name: 'type_id', includeIfNull: false, defaultValue: 'default')
  final String? typeId;
  @JsonKey(name: 'type', includeIfNull: false)
  final ProductType? type;
  @JsonKey(name: 'tags', includeIfNull: false, defaultValue: <ProductTag>[])
  final List<ProductTag>? tags;
  @JsonKey(name: 'discountable', includeIfNull: false, defaultValue: true)
  final bool discountable;
  @JsonKey(name: 'external_id', includeIfNull: false, defaultValue: 'default')
  final String? externalId;
  @JsonKey(
      name: 'sales_channels',
      includeIfNull: false,
      defaultValue: <SalesChannel>[])
  final List<SalesChannel>? salesChannels;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$PricedProductFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PricedProductExtension on PricedProduct {
  PricedProduct copyWith(
      {List<ProductVariant>? variants,
      String? id,
      String? title,
      String? subtitle,
      String? description,
      String? handle,
      bool? isGiftcard,
      enums.PricedProductStatus? status,
      List<Image>? images,
      String? thumbnail,
      List<ProductOption>? options,
      List<ProductCategory>? categories,
      String? profileId,
      ShippingProfile? profile,
      List<ShippingProfile>? profiles,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? material,
      String? collectionId,
      ProductCollection? collection,
      String? typeId,
      ProductType? type,
      List<ProductTag>? tags,
      bool? discountable,
      String? externalId,
      List<SalesChannel>? salesChannels,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return PricedProduct(
        variants: variants ?? this.variants,
        id: id ?? this.id,
        title: title ?? this.title,
        subtitle: subtitle ?? this.subtitle,
        description: description ?? this.description,
        handle: handle ?? this.handle,
        isGiftcard: isGiftcard ?? this.isGiftcard,
        status: status ?? this.status,
        images: images ?? this.images,
        thumbnail: thumbnail ?? this.thumbnail,
        options: options ?? this.options,
        categories: categories ?? this.categories,
        profileId: profileId ?? this.profileId,
        profile: profile ?? this.profile,
        profiles: profiles ?? this.profiles,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        collectionId: collectionId ?? this.collectionId,
        collection: collection ?? this.collection,
        typeId: typeId ?? this.typeId,
        type: type ?? this.type,
        tags: tags ?? this.tags,
        discountable: discountable ?? this.discountable,
        externalId: externalId ?? this.externalId,
        salesChannels: salesChannels ?? this.salesChannels,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  PricedProduct copyWithWrapped(
      {Wrapped<List<ProductVariant>?>? variants,
      Wrapped<String>? id,
      Wrapped<String>? title,
      Wrapped<String?>? subtitle,
      Wrapped<String?>? description,
      Wrapped<String?>? handle,
      Wrapped<bool>? isGiftcard,
      Wrapped<enums.PricedProductStatus>? status,
      Wrapped<List<Image>?>? images,
      Wrapped<String?>? thumbnail,
      Wrapped<List<ProductOption>?>? options,
      Wrapped<List<ProductCategory>?>? categories,
      Wrapped<String>? profileId,
      Wrapped<ShippingProfile?>? profile,
      Wrapped<List<ShippingProfile>?>? profiles,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<String?>? collectionId,
      Wrapped<ProductCollection?>? collection,
      Wrapped<String?>? typeId,
      Wrapped<ProductType?>? type,
      Wrapped<List<ProductTag>?>? tags,
      Wrapped<bool>? discountable,
      Wrapped<String?>? externalId,
      Wrapped<List<SalesChannel>?>? salesChannels,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return PricedProduct(
        variants: (variants != null ? variants.value : this.variants),
        id: (id != null ? id.value : this.id),
        title: (title != null ? title.value : this.title),
        subtitle: (subtitle != null ? subtitle.value : this.subtitle),
        description:
            (description != null ? description.value : this.description),
        handle: (handle != null ? handle.value : this.handle),
        isGiftcard: (isGiftcard != null ? isGiftcard.value : this.isGiftcard),
        status: (status != null ? status.value : this.status),
        images: (images != null ? images.value : this.images),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        options: (options != null ? options.value : this.options),
        categories: (categories != null ? categories.value : this.categories),
        profileId: (profileId != null ? profileId.value : this.profileId),
        profile: (profile != null ? profile.value : this.profile),
        profiles: (profiles != null ? profiles.value : this.profiles),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        collectionId:
            (collectionId != null ? collectionId.value : this.collectionId),
        collection: (collection != null ? collection.value : this.collection),
        typeId: (typeId != null ? typeId.value : this.typeId),
        type: (type != null ? type.value : this.type),
        tags: (tags != null ? tags.value : this.tags),
        discountable:
            (discountable != null ? discountable.value : this.discountable),
        externalId: (externalId != null ? externalId.value : this.externalId),
        salesChannels:
            (salesChannels != null ? salesChannels.value : this.salesChannels),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class PricedShippingOption {
  const PricedShippingOption({
    this.priceInclTax,
    this.taxRates,
    this.taxAmount,
    required this.id,
    required this.name,
    required this.regionId,
    this.region,
    required this.profileId,
    this.profile,
    required this.providerId,
    this.provider,
    required this.priceType,
    required this.amount,
    required this.isReturn,
    required this.adminOnly,
    this.requirements,
    required this.data,
    this.includesTax,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory PricedShippingOption.fromJson(Map<String, dynamic> json) =>
      _$PricedShippingOptionFromJson(json);

  static const toJsonFactory = _$PricedShippingOptionToJson;
  Map<String, dynamic> toJson() => _$PricedShippingOptionToJson(this);

  @JsonKey(name: 'price_incl_tax', includeIfNull: false)
  final double? priceInclTax;
  @JsonKey(name: 'tax_rates', includeIfNull: false)
  final List<PricedShippingOption$TaxRates$Item>? taxRates;
  @JsonKey(name: 'tax_amount', includeIfNull: false)
  final double? taxAmount;
  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  @JsonKey(name: 'profile_id', includeIfNull: false, defaultValue: 'default')
  final String profileId;
  @JsonKey(name: 'profile', includeIfNull: false)
  final ShippingProfile? profile;
  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'provider', includeIfNull: false)
  final FulfillmentProvider? provider;
  @JsonKey(
    name: 'price_type',
    includeIfNull: false,
    toJson: pricedShippingOptionPriceTypeToJson,
    fromJson: pricedShippingOptionPriceTypeFromJson,
  )
  final enums.PricedShippingOptionPriceType priceType;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int? amount;
  @JsonKey(name: 'is_return', includeIfNull: false, defaultValue: false)
  final bool isReturn;
  @JsonKey(name: 'admin_only', includeIfNull: false, defaultValue: false)
  final bool adminOnly;
  @JsonKey(
      name: 'requirements',
      includeIfNull: false,
      defaultValue: <ShippingOptionRequirement>[])
  final List<ShippingOptionRequirement>? requirements;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(name: 'includes_tax', includeIfNull: false, defaultValue: false)
  final bool? includesTax;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$PricedShippingOptionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PricedShippingOptionExtension on PricedShippingOption {
  PricedShippingOption copyWith(
      {double? priceInclTax,
      List<PricedShippingOption$TaxRates$Item>? taxRates,
      double? taxAmount,
      String? id,
      String? name,
      String? regionId,
      Region? region,
      String? profileId,
      ShippingProfile? profile,
      String? providerId,
      FulfillmentProvider? provider,
      enums.PricedShippingOptionPriceType? priceType,
      int? amount,
      bool? isReturn,
      bool? adminOnly,
      List<ShippingOptionRequirement>? requirements,
      Object? data,
      bool? includesTax,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return PricedShippingOption(
        priceInclTax: priceInclTax ?? this.priceInclTax,
        taxRates: taxRates ?? this.taxRates,
        taxAmount: taxAmount ?? this.taxAmount,
        id: id ?? this.id,
        name: name ?? this.name,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        profileId: profileId ?? this.profileId,
        profile: profile ?? this.profile,
        providerId: providerId ?? this.providerId,
        provider: provider ?? this.provider,
        priceType: priceType ?? this.priceType,
        amount: amount ?? this.amount,
        isReturn: isReturn ?? this.isReturn,
        adminOnly: adminOnly ?? this.adminOnly,
        requirements: requirements ?? this.requirements,
        data: data ?? this.data,
        includesTax: includesTax ?? this.includesTax,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  PricedShippingOption copyWithWrapped(
      {Wrapped<double?>? priceInclTax,
      Wrapped<List<PricedShippingOption$TaxRates$Item>?>? taxRates,
      Wrapped<double?>? taxAmount,
      Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<String>? regionId,
      Wrapped<Region?>? region,
      Wrapped<String>? profileId,
      Wrapped<ShippingProfile?>? profile,
      Wrapped<String>? providerId,
      Wrapped<FulfillmentProvider?>? provider,
      Wrapped<enums.PricedShippingOptionPriceType>? priceType,
      Wrapped<int?>? amount,
      Wrapped<bool>? isReturn,
      Wrapped<bool>? adminOnly,
      Wrapped<List<ShippingOptionRequirement>?>? requirements,
      Wrapped<Object>? data,
      Wrapped<bool?>? includesTax,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return PricedShippingOption(
        priceInclTax:
            (priceInclTax != null ? priceInclTax.value : this.priceInclTax),
        taxRates: (taxRates != null ? taxRates.value : this.taxRates),
        taxAmount: (taxAmount != null ? taxAmount.value : this.taxAmount),
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        profileId: (profileId != null ? profileId.value : this.profileId),
        profile: (profile != null ? profile.value : this.profile),
        providerId: (providerId != null ? providerId.value : this.providerId),
        provider: (provider != null ? provider.value : this.provider),
        priceType: (priceType != null ? priceType.value : this.priceType),
        amount: (amount != null ? amount.value : this.amount),
        isReturn: (isReturn != null ? isReturn.value : this.isReturn),
        adminOnly: (adminOnly != null ? adminOnly.value : this.adminOnly),
        requirements:
            (requirements != null ? requirements.value : this.requirements),
        data: (data != null ? data.value : this.data),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class PricedVariant {
  const PricedVariant({
    this.originalPrice,
    this.calculatedPrice,
    this.originalPriceInclTax,
    this.calculatedPriceInclTax,
    this.originalTax,
    this.calculatedTax,
    this.taxRates,
    required this.id,
    required this.title,
    required this.productId,
    this.product,
    this.prices,
    required this.sku,
    required this.barcode,
    required this.ean,
    required this.upc,
    this.variantRank,
    required this.inventoryQuantity,
    required this.allowBackorder,
    required this.manageInventory,
    required this.hsCode,
    required this.originCountry,
    required this.midCode,
    required this.material,
    required this.weight,
    required this.length,
    required this.height,
    required this.width,
    this.options,
    this.inventoryItems,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
    this.purchasable,
  });

  factory PricedVariant.fromJson(Map<String, dynamic> json) =>
      _$PricedVariantFromJson(json);

  static const toJsonFactory = _$PricedVariantToJson;
  Map<String, dynamic> toJson() => _$PricedVariantToJson(this);

  @JsonKey(name: 'original_price', includeIfNull: false)
  final double? originalPrice;
  @JsonKey(name: 'calculated_price', includeIfNull: false)
  final double? calculatedPrice;
  @JsonKey(name: 'original_price_incl_tax', includeIfNull: false)
  final double? originalPriceInclTax;
  @JsonKey(name: 'calculated_price_incl_tax', includeIfNull: false)
  final double? calculatedPriceInclTax;
  @JsonKey(name: 'original_tax', includeIfNull: false)
  final double? originalTax;
  @JsonKey(name: 'calculated_tax', includeIfNull: false)
  final double? calculatedTax;
  @JsonKey(name: 'tax_rates', includeIfNull: false)
  final List<PricedVariant$TaxRates$Item>? taxRates;
  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'product_id', includeIfNull: false, defaultValue: 'default')
  final String productId;
  @JsonKey(name: 'product', includeIfNull: false)
  final Product? product;
  @JsonKey(name: 'prices', includeIfNull: false, defaultValue: <MoneyAmount>[])
  final List<MoneyAmount>? prices;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String? sku;
  @JsonKey(name: 'barcode', includeIfNull: false, defaultValue: 'default')
  final String? barcode;
  @JsonKey(name: 'ean', includeIfNull: false, defaultValue: 'default')
  final String? ean;
  @JsonKey(name: 'upc', includeIfNull: false, defaultValue: 'default')
  final String? upc;
  @JsonKey(name: 'variant_rank', includeIfNull: false)
  final double? variantRank;
  @JsonKey(name: 'inventory_quantity', includeIfNull: false, defaultValue: 36)
  final int inventoryQuantity;
  @JsonKey(name: 'allow_backorder', includeIfNull: false, defaultValue: false)
  final bool allowBackorder;
  @JsonKey(name: 'manage_inventory', includeIfNull: false, defaultValue: true)
  final bool manageInventory;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(
      name: 'options',
      includeIfNull: false,
      defaultValue: <ProductOptionValue>[])
  final List<ProductOptionValue>? options;
  @JsonKey(
      name: 'inventory_items',
      includeIfNull: false,
      defaultValue: <ProductVariantInventoryItem>[])
  final List<ProductVariantInventoryItem>? inventoryItems;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'purchasable', includeIfNull: false)
  final bool? purchasable;
  static const fromJsonFactory = _$PricedVariantFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PricedVariantExtension on PricedVariant {
  PricedVariant copyWith(
      {double? originalPrice,
      double? calculatedPrice,
      double? originalPriceInclTax,
      double? calculatedPriceInclTax,
      double? originalTax,
      double? calculatedTax,
      List<PricedVariant$TaxRates$Item>? taxRates,
      String? id,
      String? title,
      String? productId,
      Product? product,
      List<MoneyAmount>? prices,
      String? sku,
      String? barcode,
      String? ean,
      String? upc,
      double? variantRank,
      int? inventoryQuantity,
      bool? allowBackorder,
      bool? manageInventory,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? material,
      double? weight,
      double? length,
      double? height,
      double? width,
      List<ProductOptionValue>? options,
      List<ProductVariantInventoryItem>? inventoryItems,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata,
      bool? purchasable}) {
    return PricedVariant(
        originalPrice: originalPrice ?? this.originalPrice,
        calculatedPrice: calculatedPrice ?? this.calculatedPrice,
        originalPriceInclTax: originalPriceInclTax ?? this.originalPriceInclTax,
        calculatedPriceInclTax:
            calculatedPriceInclTax ?? this.calculatedPriceInclTax,
        originalTax: originalTax ?? this.originalTax,
        calculatedTax: calculatedTax ?? this.calculatedTax,
        taxRates: taxRates ?? this.taxRates,
        id: id ?? this.id,
        title: title ?? this.title,
        productId: productId ?? this.productId,
        product: product ?? this.product,
        prices: prices ?? this.prices,
        sku: sku ?? this.sku,
        barcode: barcode ?? this.barcode,
        ean: ean ?? this.ean,
        upc: upc ?? this.upc,
        variantRank: variantRank ?? this.variantRank,
        inventoryQuantity: inventoryQuantity ?? this.inventoryQuantity,
        allowBackorder: allowBackorder ?? this.allowBackorder,
        manageInventory: manageInventory ?? this.manageInventory,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        options: options ?? this.options,
        inventoryItems: inventoryItems ?? this.inventoryItems,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata,
        purchasable: purchasable ?? this.purchasable);
  }

  PricedVariant copyWithWrapped(
      {Wrapped<double?>? originalPrice,
      Wrapped<double?>? calculatedPrice,
      Wrapped<double?>? originalPriceInclTax,
      Wrapped<double?>? calculatedPriceInclTax,
      Wrapped<double?>? originalTax,
      Wrapped<double?>? calculatedTax,
      Wrapped<List<PricedVariant$TaxRates$Item>?>? taxRates,
      Wrapped<String>? id,
      Wrapped<String>? title,
      Wrapped<String>? productId,
      Wrapped<Product?>? product,
      Wrapped<List<MoneyAmount>?>? prices,
      Wrapped<String?>? sku,
      Wrapped<String?>? barcode,
      Wrapped<String?>? ean,
      Wrapped<String?>? upc,
      Wrapped<double?>? variantRank,
      Wrapped<int>? inventoryQuantity,
      Wrapped<bool>? allowBackorder,
      Wrapped<bool>? manageInventory,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<List<ProductOptionValue>?>? options,
      Wrapped<List<ProductVariantInventoryItem>?>? inventoryItems,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata,
      Wrapped<bool?>? purchasable}) {
    return PricedVariant(
        originalPrice:
            (originalPrice != null ? originalPrice.value : this.originalPrice),
        calculatedPrice: (calculatedPrice != null
            ? calculatedPrice.value
            : this.calculatedPrice),
        originalPriceInclTax: (originalPriceInclTax != null
            ? originalPriceInclTax.value
            : this.originalPriceInclTax),
        calculatedPriceInclTax: (calculatedPriceInclTax != null
            ? calculatedPriceInclTax.value
            : this.calculatedPriceInclTax),
        originalTax:
            (originalTax != null ? originalTax.value : this.originalTax),
        calculatedTax:
            (calculatedTax != null ? calculatedTax.value : this.calculatedTax),
        taxRates: (taxRates != null ? taxRates.value : this.taxRates),
        id: (id != null ? id.value : this.id),
        title: (title != null ? title.value : this.title),
        productId: (productId != null ? productId.value : this.productId),
        product: (product != null ? product.value : this.product),
        prices: (prices != null ? prices.value : this.prices),
        sku: (sku != null ? sku.value : this.sku),
        barcode: (barcode != null ? barcode.value : this.barcode),
        ean: (ean != null ? ean.value : this.ean),
        upc: (upc != null ? upc.value : this.upc),
        variantRank:
            (variantRank != null ? variantRank.value : this.variantRank),
        inventoryQuantity: (inventoryQuantity != null
            ? inventoryQuantity.value
            : this.inventoryQuantity),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder),
        manageInventory: (manageInventory != null
            ? manageInventory.value
            : this.manageInventory),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        options: (options != null ? options.value : this.options),
        inventoryItems: (inventoryItems != null
            ? inventoryItems.value
            : this.inventoryItems),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata),
        purchasable:
            (purchasable != null ? purchasable.value : this.purchasable));
  }
}

@JsonSerializable(explicitToJson: true)
class Product {
  const Product({
    required this.id,
    required this.title,
    required this.subtitle,
    required this.description,
    required this.handle,
    required this.isGiftcard,
    required this.status,
    this.images,
    required this.thumbnail,
    this.options,
    this.variants,
    this.categories,
    required this.profileId,
    this.profile,
    this.profiles,
    required this.weight,
    required this.length,
    required this.height,
    required this.width,
    required this.hsCode,
    required this.originCountry,
    required this.midCode,
    required this.material,
    required this.collectionId,
    this.collection,
    required this.typeId,
    this.type,
    this.tags,
    required this.discountable,
    required this.externalId,
    this.salesChannels,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Product.fromJson(Map<String, dynamic> json) =>
      _$ProductFromJson(json);

  static const toJsonFactory = _$ProductToJson;
  Map<String, dynamic> toJson() => _$ProductToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'subtitle', includeIfNull: false, defaultValue: 'default')
  final String? subtitle;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(name: 'is_giftcard', includeIfNull: false, defaultValue: false)
  final bool isGiftcard;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: productStatusToJson,
    fromJson: productStatusStatusFromJson,
  )
  final enums.ProductStatus status;
  static enums.ProductStatus productStatusStatusFromJson(Object? value) =>
      productStatusFromJson(value, enums.ProductStatus.draft);

  @JsonKey(name: 'images', includeIfNull: false, defaultValue: <Image>[])
  final List<Image>? images;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(
      name: 'options', includeIfNull: false, defaultValue: <ProductOption>[])
  final List<ProductOption>? options;
  @JsonKey(
      name: 'variants', includeIfNull: false, defaultValue: <ProductVariant>[])
  final List<ProductVariant>? variants;
  @JsonKey(
      name: 'categories',
      includeIfNull: false,
      defaultValue: <ProductCategory>[])
  final List<ProductCategory>? categories;
  @JsonKey(name: 'profile_id', includeIfNull: false, defaultValue: 'default')
  final String profileId;
  @JsonKey(name: 'profile', includeIfNull: false)
  final ShippingProfile? profile;
  @JsonKey(
      name: 'profiles', includeIfNull: false, defaultValue: <ShippingProfile>[])
  final List<ShippingProfile>? profiles;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'collection_id', includeIfNull: false, defaultValue: 'default')
  final String? collectionId;
  @JsonKey(name: 'collection', includeIfNull: false)
  final ProductCollection? collection;
  @JsonKey(name: 'type_id', includeIfNull: false, defaultValue: 'default')
  final String? typeId;
  @JsonKey(name: 'type', includeIfNull: false)
  final ProductType? type;
  @JsonKey(name: 'tags', includeIfNull: false, defaultValue: <ProductTag>[])
  final List<ProductTag>? tags;
  @JsonKey(name: 'discountable', includeIfNull: false, defaultValue: true)
  final bool discountable;
  @JsonKey(name: 'external_id', includeIfNull: false, defaultValue: 'default')
  final String? externalId;
  @JsonKey(
      name: 'sales_channels',
      includeIfNull: false,
      defaultValue: <SalesChannel>[])
  final List<SalesChannel>? salesChannels;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductExtension on Product {
  Product copyWith(
      {String? id,
      String? title,
      String? subtitle,
      String? description,
      String? handle,
      bool? isGiftcard,
      enums.ProductStatus? status,
      List<Image>? images,
      String? thumbnail,
      List<ProductOption>? options,
      List<ProductVariant>? variants,
      List<ProductCategory>? categories,
      String? profileId,
      ShippingProfile? profile,
      List<ShippingProfile>? profiles,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? material,
      String? collectionId,
      ProductCollection? collection,
      String? typeId,
      ProductType? type,
      List<ProductTag>? tags,
      bool? discountable,
      String? externalId,
      List<SalesChannel>? salesChannels,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Product(
        id: id ?? this.id,
        title: title ?? this.title,
        subtitle: subtitle ?? this.subtitle,
        description: description ?? this.description,
        handle: handle ?? this.handle,
        isGiftcard: isGiftcard ?? this.isGiftcard,
        status: status ?? this.status,
        images: images ?? this.images,
        thumbnail: thumbnail ?? this.thumbnail,
        options: options ?? this.options,
        variants: variants ?? this.variants,
        categories: categories ?? this.categories,
        profileId: profileId ?? this.profileId,
        profile: profile ?? this.profile,
        profiles: profiles ?? this.profiles,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        collectionId: collectionId ?? this.collectionId,
        collection: collection ?? this.collection,
        typeId: typeId ?? this.typeId,
        type: type ?? this.type,
        tags: tags ?? this.tags,
        discountable: discountable ?? this.discountable,
        externalId: externalId ?? this.externalId,
        salesChannels: salesChannels ?? this.salesChannels,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Product copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? title,
      Wrapped<String?>? subtitle,
      Wrapped<String?>? description,
      Wrapped<String?>? handle,
      Wrapped<bool>? isGiftcard,
      Wrapped<enums.ProductStatus>? status,
      Wrapped<List<Image>?>? images,
      Wrapped<String?>? thumbnail,
      Wrapped<List<ProductOption>?>? options,
      Wrapped<List<ProductVariant>?>? variants,
      Wrapped<List<ProductCategory>?>? categories,
      Wrapped<String>? profileId,
      Wrapped<ShippingProfile?>? profile,
      Wrapped<List<ShippingProfile>?>? profiles,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<String?>? collectionId,
      Wrapped<ProductCollection?>? collection,
      Wrapped<String?>? typeId,
      Wrapped<ProductType?>? type,
      Wrapped<List<ProductTag>?>? tags,
      Wrapped<bool>? discountable,
      Wrapped<String?>? externalId,
      Wrapped<List<SalesChannel>?>? salesChannels,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Product(
        id: (id != null ? id.value : this.id),
        title: (title != null ? title.value : this.title),
        subtitle: (subtitle != null ? subtitle.value : this.subtitle),
        description:
            (description != null ? description.value : this.description),
        handle: (handle != null ? handle.value : this.handle),
        isGiftcard: (isGiftcard != null ? isGiftcard.value : this.isGiftcard),
        status: (status != null ? status.value : this.status),
        images: (images != null ? images.value : this.images),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        options: (options != null ? options.value : this.options),
        variants: (variants != null ? variants.value : this.variants),
        categories: (categories != null ? categories.value : this.categories),
        profileId: (profileId != null ? profileId.value : this.profileId),
        profile: (profile != null ? profile.value : this.profile),
        profiles: (profiles != null ? profiles.value : this.profiles),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        collectionId:
            (collectionId != null ? collectionId.value : this.collectionId),
        collection: (collection != null ? collection.value : this.collection),
        typeId: (typeId != null ? typeId.value : this.typeId),
        type: (type != null ? type.value : this.type),
        tags: (tags != null ? tags.value : this.tags),
        discountable:
            (discountable != null ? discountable.value : this.discountable),
        externalId: (externalId != null ? externalId.value : this.externalId),
        salesChannels:
            (salesChannels != null ? salesChannels.value : this.salesChannels),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductCategory {
  const ProductCategory({
    required this.id,
    required this.name,
    this.description,
    required this.handle,
    required this.mpath,
    required this.isInternal,
    required this.isActive,
    this.rank,
    required this.categoryChildren,
    required this.parentCategoryId,
    this.parentCategory,
    this.products,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory ProductCategory.fromJson(Map<String, dynamic> json) =>
      _$ProductCategoryFromJson(json);

  static const toJsonFactory = _$ProductCategoryToJson;
  Map<String, dynamic> toJson() => _$ProductCategoryToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String handle;
  @JsonKey(name: 'mpath', includeIfNull: false, defaultValue: 'default')
  final String? mpath;
  @JsonKey(name: 'is_internal', includeIfNull: false, defaultValue: false)
  final bool isInternal;
  @JsonKey(name: 'is_active', includeIfNull: false, defaultValue: false)
  final bool isActive;
  @JsonKey(name: 'rank', includeIfNull: false, defaultValue: 36)
  final int? rank;
  @JsonKey(
      name: 'category_children',
      includeIfNull: false,
      defaultValue: <ProductCategory>[])
  final List<ProductCategory> categoryChildren;
  @JsonKey(
      name: 'parent_category_id', includeIfNull: false, defaultValue: 'default')
  final String? parentCategoryId;
  @JsonKey(name: 'parent_category', includeIfNull: false)
  final ProductCategory? parentCategory;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Product>[])
  final List<Product>? products;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductCategoryFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductCategoryExtension on ProductCategory {
  ProductCategory copyWith(
      {String? id,
      String? name,
      String? description,
      String? handle,
      String? mpath,
      bool? isInternal,
      bool? isActive,
      int? rank,
      List<ProductCategory>? categoryChildren,
      String? parentCategoryId,
      ProductCategory? parentCategory,
      List<Product>? products,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return ProductCategory(
        id: id ?? this.id,
        name: name ?? this.name,
        description: description ?? this.description,
        handle: handle ?? this.handle,
        mpath: mpath ?? this.mpath,
        isInternal: isInternal ?? this.isInternal,
        isActive: isActive ?? this.isActive,
        rank: rank ?? this.rank,
        categoryChildren: categoryChildren ?? this.categoryChildren,
        parentCategoryId: parentCategoryId ?? this.parentCategoryId,
        parentCategory: parentCategory ?? this.parentCategory,
        products: products ?? this.products,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  ProductCategory copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<String?>? description,
      Wrapped<String>? handle,
      Wrapped<String?>? mpath,
      Wrapped<bool>? isInternal,
      Wrapped<bool>? isActive,
      Wrapped<int?>? rank,
      Wrapped<List<ProductCategory>>? categoryChildren,
      Wrapped<String?>? parentCategoryId,
      Wrapped<ProductCategory?>? parentCategory,
      Wrapped<List<Product>?>? products,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return ProductCategory(
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        handle: (handle != null ? handle.value : this.handle),
        mpath: (mpath != null ? mpath.value : this.mpath),
        isInternal: (isInternal != null ? isInternal.value : this.isInternal),
        isActive: (isActive != null ? isActive.value : this.isActive),
        rank: (rank != null ? rank.value : this.rank),
        categoryChildren: (categoryChildren != null
            ? categoryChildren.value
            : this.categoryChildren),
        parentCategoryId: (parentCategoryId != null
            ? parentCategoryId.value
            : this.parentCategoryId),
        parentCategory: (parentCategory != null
            ? parentCategory.value
            : this.parentCategory),
        products: (products != null ? products.value : this.products),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductCollection {
  const ProductCollection({
    required this.id,
    required this.title,
    required this.handle,
    this.products,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ProductCollection.fromJson(Map<String, dynamic> json) =>
      _$ProductCollectionFromJson(json);

  static const toJsonFactory = _$ProductCollectionToJson;
  Map<String, dynamic> toJson() => _$ProductCollectionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'handle', includeIfNull: false, defaultValue: 'default')
  final String? handle;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Product>[])
  final List<Product>? products;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductCollectionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductCollectionExtension on ProductCollection {
  ProductCollection copyWith(
      {String? id,
      String? title,
      String? handle,
      List<Product>? products,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ProductCollection(
        id: id ?? this.id,
        title: title ?? this.title,
        handle: handle ?? this.handle,
        products: products ?? this.products,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ProductCollection copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? title,
      Wrapped<String?>? handle,
      Wrapped<List<Product>?>? products,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ProductCollection(
        id: (id != null ? id.value : this.id),
        title: (title != null ? title.value : this.title),
        handle: (handle != null ? handle.value : this.handle),
        products: (products != null ? products.value : this.products),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductOption {
  const ProductOption({
    required this.id,
    required this.title,
    this.values,
    required this.productId,
    this.product,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ProductOption.fromJson(Map<String, dynamic> json) =>
      _$ProductOptionFromJson(json);

  static const toJsonFactory = _$ProductOptionToJson;
  Map<String, dynamic> toJson() => _$ProductOptionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(
      name: 'values',
      includeIfNull: false,
      defaultValue: <ProductOptionValue>[])
  final List<ProductOptionValue>? values;
  @JsonKey(name: 'product_id', includeIfNull: false, defaultValue: 'default')
  final String productId;
  @JsonKey(name: 'product', includeIfNull: false)
  final Product? product;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductOptionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductOptionExtension on ProductOption {
  ProductOption copyWith(
      {String? id,
      String? title,
      List<ProductOptionValue>? values,
      String? productId,
      Product? product,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ProductOption(
        id: id ?? this.id,
        title: title ?? this.title,
        values: values ?? this.values,
        productId: productId ?? this.productId,
        product: product ?? this.product,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ProductOption copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? title,
      Wrapped<List<ProductOptionValue>?>? values,
      Wrapped<String>? productId,
      Wrapped<Product?>? product,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ProductOption(
        id: (id != null ? id.value : this.id),
        title: (title != null ? title.value : this.title),
        values: (values != null ? values.value : this.values),
        productId: (productId != null ? productId.value : this.productId),
        product: (product != null ? product.value : this.product),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductOptionValue {
  const ProductOptionValue({
    required this.id,
    required this.value,
    required this.optionId,
    this.option,
    required this.variantId,
    this.variant,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ProductOptionValue.fromJson(Map<String, dynamic> json) =>
      _$ProductOptionValueFromJson(json);

  static const toJsonFactory = _$ProductOptionValueToJson;
  Map<String, dynamic> toJson() => _$ProductOptionValueToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'option', includeIfNull: false)
  final ProductOption? option;
  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'variant', includeIfNull: false)
  final ProductVariant? variant;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductOptionValueFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductOptionValueExtension on ProductOptionValue {
  ProductOptionValue copyWith(
      {String? id,
      String? value,
      String? optionId,
      ProductOption? option,
      String? variantId,
      ProductVariant? variant,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ProductOptionValue(
        id: id ?? this.id,
        value: value ?? this.value,
        optionId: optionId ?? this.optionId,
        option: option ?? this.option,
        variantId: variantId ?? this.variantId,
        variant: variant ?? this.variant,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ProductOptionValue copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? value,
      Wrapped<String>? optionId,
      Wrapped<ProductOption?>? option,
      Wrapped<String>? variantId,
      Wrapped<ProductVariant?>? variant,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ProductOptionValue(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value),
        optionId: (optionId != null ? optionId.value : this.optionId),
        option: (option != null ? option.value : this.option),
        variantId: (variantId != null ? variantId.value : this.variantId),
        variant: (variant != null ? variant.value : this.variant),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductTag {
  const ProductTag({
    required this.id,
    required this.value,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ProductTag.fromJson(Map<String, dynamic> json) =>
      _$ProductTagFromJson(json);

  static const toJsonFactory = _$ProductTagToJson;
  Map<String, dynamic> toJson() => _$ProductTagToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductTagFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductTagExtension on ProductTag {
  ProductTag copyWith(
      {String? id,
      String? value,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ProductTag(
        id: id ?? this.id,
        value: value ?? this.value,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ProductTag copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? value,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ProductTag(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductTaxRate {
  const ProductTaxRate({
    required this.productId,
    this.product,
    required this.rateId,
    this.taxRate,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory ProductTaxRate.fromJson(Map<String, dynamic> json) =>
      _$ProductTaxRateFromJson(json);

  static const toJsonFactory = _$ProductTaxRateToJson;
  Map<String, dynamic> toJson() => _$ProductTaxRateToJson(this);

  @JsonKey(name: 'product_id', includeIfNull: false, defaultValue: 'default')
  final String productId;
  @JsonKey(name: 'product', includeIfNull: false)
  final Product? product;
  @JsonKey(name: 'rate_id', includeIfNull: false, defaultValue: 'default')
  final String rateId;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final TaxRate? taxRate;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductTaxRateFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductTaxRateExtension on ProductTaxRate {
  ProductTaxRate copyWith(
      {String? productId,
      Product? product,
      String? rateId,
      TaxRate? taxRate,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return ProductTaxRate(
        productId: productId ?? this.productId,
        product: product ?? this.product,
        rateId: rateId ?? this.rateId,
        taxRate: taxRate ?? this.taxRate,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  ProductTaxRate copyWithWrapped(
      {Wrapped<String>? productId,
      Wrapped<Product?>? product,
      Wrapped<String>? rateId,
      Wrapped<TaxRate?>? taxRate,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return ProductTaxRate(
        productId: (productId != null ? productId.value : this.productId),
        product: (product != null ? product.value : this.product),
        rateId: (rateId != null ? rateId.value : this.rateId),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductType {
  const ProductType({
    required this.id,
    required this.value,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ProductType.fromJson(Map<String, dynamic> json) =>
      _$ProductTypeFromJson(json);

  static const toJsonFactory = _$ProductTypeToJson;
  Map<String, dynamic> toJson() => _$ProductTypeToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductTypeFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductTypeExtension on ProductType {
  ProductType copyWith(
      {String? id,
      String? value,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ProductType(
        id: id ?? this.id,
        value: value ?? this.value,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ProductType copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? value,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ProductType(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductTypeTaxRate {
  const ProductTypeTaxRate({
    required this.productTypeId,
    this.productType,
    required this.rateId,
    this.taxRate,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory ProductTypeTaxRate.fromJson(Map<String, dynamic> json) =>
      _$ProductTypeTaxRateFromJson(json);

  static const toJsonFactory = _$ProductTypeTaxRateToJson;
  Map<String, dynamic> toJson() => _$ProductTypeTaxRateToJson(this);

  @JsonKey(
      name: 'product_type_id', includeIfNull: false, defaultValue: 'default')
  final String productTypeId;
  @JsonKey(name: 'product_type', includeIfNull: false)
  final ProductType? productType;
  @JsonKey(name: 'rate_id', includeIfNull: false, defaultValue: 'default')
  final String rateId;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final TaxRate? taxRate;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ProductTypeTaxRateFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductTypeTaxRateExtension on ProductTypeTaxRate {
  ProductTypeTaxRate copyWith(
      {String? productTypeId,
      ProductType? productType,
      String? rateId,
      TaxRate? taxRate,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return ProductTypeTaxRate(
        productTypeId: productTypeId ?? this.productTypeId,
        productType: productType ?? this.productType,
        rateId: rateId ?? this.rateId,
        taxRate: taxRate ?? this.taxRate,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  ProductTypeTaxRate copyWithWrapped(
      {Wrapped<String>? productTypeId,
      Wrapped<ProductType?>? productType,
      Wrapped<String>? rateId,
      Wrapped<TaxRate?>? taxRate,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return ProductTypeTaxRate(
        productTypeId:
            (productTypeId != null ? productTypeId.value : this.productTypeId),
        productType:
            (productType != null ? productType.value : this.productType),
        rateId: (rateId != null ? rateId.value : this.rateId),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductVariant {
  const ProductVariant({
    required this.id,
    required this.title,
    required this.productId,
    this.product,
    this.prices,
    required this.sku,
    required this.barcode,
    required this.ean,
    required this.upc,
    this.variantRank,
    required this.inventoryQuantity,
    required this.allowBackorder,
    required this.manageInventory,
    required this.hsCode,
    required this.originCountry,
    required this.midCode,
    required this.material,
    required this.weight,
    required this.length,
    required this.height,
    required this.width,
    this.options,
    this.inventoryItems,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
    this.purchasable,
  });

  factory ProductVariant.fromJson(Map<String, dynamic> json) =>
      _$ProductVariantFromJson(json);

  static const toJsonFactory = _$ProductVariantToJson;
  Map<String, dynamic> toJson() => _$ProductVariantToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'product_id', includeIfNull: false, defaultValue: 'default')
  final String productId;
  @JsonKey(name: 'product', includeIfNull: false)
  final Product? product;
  @JsonKey(name: 'prices', includeIfNull: false, defaultValue: <MoneyAmount>[])
  final List<MoneyAmount>? prices;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String? sku;
  @JsonKey(name: 'barcode', includeIfNull: false, defaultValue: 'default')
  final String? barcode;
  @JsonKey(name: 'ean', includeIfNull: false, defaultValue: 'default')
  final String? ean;
  @JsonKey(name: 'upc', includeIfNull: false, defaultValue: 'default')
  final String? upc;
  @JsonKey(name: 'variant_rank', includeIfNull: false)
  final double? variantRank;
  @JsonKey(name: 'inventory_quantity', includeIfNull: false, defaultValue: 36)
  final int inventoryQuantity;
  @JsonKey(name: 'allow_backorder', includeIfNull: false, defaultValue: false)
  final bool allowBackorder;
  @JsonKey(name: 'manage_inventory', includeIfNull: false, defaultValue: true)
  final bool manageInventory;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(
      name: 'options',
      includeIfNull: false,
      defaultValue: <ProductOptionValue>[])
  final List<ProductOptionValue>? options;
  @JsonKey(
      name: 'inventory_items',
      includeIfNull: false,
      defaultValue: <ProductVariantInventoryItem>[])
  final List<ProductVariantInventoryItem>? inventoryItems;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'purchasable', includeIfNull: false)
  final bool? purchasable;
  static const fromJsonFactory = _$ProductVariantFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductVariantExtension on ProductVariant {
  ProductVariant copyWith(
      {String? id,
      String? title,
      String? productId,
      Product? product,
      List<MoneyAmount>? prices,
      String? sku,
      String? barcode,
      String? ean,
      String? upc,
      double? variantRank,
      int? inventoryQuantity,
      bool? allowBackorder,
      bool? manageInventory,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? material,
      double? weight,
      double? length,
      double? height,
      double? width,
      List<ProductOptionValue>? options,
      List<ProductVariantInventoryItem>? inventoryItems,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata,
      bool? purchasable}) {
    return ProductVariant(
        id: id ?? this.id,
        title: title ?? this.title,
        productId: productId ?? this.productId,
        product: product ?? this.product,
        prices: prices ?? this.prices,
        sku: sku ?? this.sku,
        barcode: barcode ?? this.barcode,
        ean: ean ?? this.ean,
        upc: upc ?? this.upc,
        variantRank: variantRank ?? this.variantRank,
        inventoryQuantity: inventoryQuantity ?? this.inventoryQuantity,
        allowBackorder: allowBackorder ?? this.allowBackorder,
        manageInventory: manageInventory ?? this.manageInventory,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        options: options ?? this.options,
        inventoryItems: inventoryItems ?? this.inventoryItems,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata,
        purchasable: purchasable ?? this.purchasable);
  }

  ProductVariant copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? title,
      Wrapped<String>? productId,
      Wrapped<Product?>? product,
      Wrapped<List<MoneyAmount>?>? prices,
      Wrapped<String?>? sku,
      Wrapped<String?>? barcode,
      Wrapped<String?>? ean,
      Wrapped<String?>? upc,
      Wrapped<double?>? variantRank,
      Wrapped<int>? inventoryQuantity,
      Wrapped<bool>? allowBackorder,
      Wrapped<bool>? manageInventory,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<List<ProductOptionValue>?>? options,
      Wrapped<List<ProductVariantInventoryItem>?>? inventoryItems,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata,
      Wrapped<bool?>? purchasable}) {
    return ProductVariant(
        id: (id != null ? id.value : this.id),
        title: (title != null ? title.value : this.title),
        productId: (productId != null ? productId.value : this.productId),
        product: (product != null ? product.value : this.product),
        prices: (prices != null ? prices.value : this.prices),
        sku: (sku != null ? sku.value : this.sku),
        barcode: (barcode != null ? barcode.value : this.barcode),
        ean: (ean != null ? ean.value : this.ean),
        upc: (upc != null ? upc.value : this.upc),
        variantRank:
            (variantRank != null ? variantRank.value : this.variantRank),
        inventoryQuantity: (inventoryQuantity != null
            ? inventoryQuantity.value
            : this.inventoryQuantity),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder),
        manageInventory: (manageInventory != null
            ? manageInventory.value
            : this.manageInventory),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        options: (options != null ? options.value : this.options),
        inventoryItems: (inventoryItems != null
            ? inventoryItems.value
            : this.inventoryItems),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata),
        purchasable:
            (purchasable != null ? purchasable.value : this.purchasable));
  }
}

@JsonSerializable(explicitToJson: true)
class ProductVariantInventoryItem {
  const ProductVariantInventoryItem({
    required this.id,
    required this.inventoryItemId,
    required this.variantId,
    this.variant,
    required this.requiredQuantity,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
  });

  factory ProductVariantInventoryItem.fromJson(Map<String, dynamic> json) =>
      _$ProductVariantInventoryItemFromJson(json);

  static const toJsonFactory = _$ProductVariantInventoryItemToJson;
  Map<String, dynamic> toJson() => _$ProductVariantInventoryItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
      name: 'inventory_item_id', includeIfNull: false, defaultValue: 'default')
  final String inventoryItemId;
  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'variant', includeIfNull: false)
  final ProductVariant? variant;
  @JsonKey(name: 'required_quantity', includeIfNull: false, defaultValue: 36)
  final int requiredQuantity;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$ProductVariantInventoryItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ProductVariantInventoryItemExtension on ProductVariantInventoryItem {
  ProductVariantInventoryItem copyWith(
      {String? id,
      String? inventoryItemId,
      String? variantId,
      ProductVariant? variant,
      int? requiredQuantity,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return ProductVariantInventoryItem(
        id: id ?? this.id,
        inventoryItemId: inventoryItemId ?? this.inventoryItemId,
        variantId: variantId ?? this.variantId,
        variant: variant ?? this.variant,
        requiredQuantity: requiredQuantity ?? this.requiredQuantity,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  ProductVariantInventoryItem copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? inventoryItemId,
      Wrapped<String>? variantId,
      Wrapped<ProductVariant?>? variant,
      Wrapped<int>? requiredQuantity,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return ProductVariantInventoryItem(
        id: (id != null ? id.value : this.id),
        inventoryItemId: (inventoryItemId != null
            ? inventoryItemId.value
            : this.inventoryItemId),
        variantId: (variantId != null ? variantId.value : this.variantId),
        variant: (variant != null ? variant.value : this.variant),
        requiredQuantity: (requiredQuantity != null
            ? requiredQuantity.value
            : this.requiredQuantity),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class PublishableApiKey {
  const PublishableApiKey({
    required this.id,
    required this.createdBy,
    required this.revokedBy,
    required this.revokedAt,
    required this.title,
    required this.createdAt,
    required this.updatedAt,
  });

  factory PublishableApiKey.fromJson(Map<String, dynamic> json) =>
      _$PublishableApiKeyFromJson(json);

  static const toJsonFactory = _$PublishableApiKeyToJson;
  Map<String, dynamic> toJson() => _$PublishableApiKeyToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'created_by', includeIfNull: false, defaultValue: 'default')
  final String? createdBy;
  @JsonKey(name: 'revoked_by', includeIfNull: false, defaultValue: 'default')
  final String? revokedBy;
  @JsonKey(name: 'revoked_at', includeIfNull: false)
  final DateTime? revokedAt;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  static const fromJsonFactory = _$PublishableApiKeyFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PublishableApiKeyExtension on PublishableApiKey {
  PublishableApiKey copyWith(
      {String? id,
      String? createdBy,
      String? revokedBy,
      DateTime? revokedAt,
      String? title,
      DateTime? createdAt,
      DateTime? updatedAt}) {
    return PublishableApiKey(
        id: id ?? this.id,
        createdBy: createdBy ?? this.createdBy,
        revokedBy: revokedBy ?? this.revokedBy,
        revokedAt: revokedAt ?? this.revokedAt,
        title: title ?? this.title,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  PublishableApiKey copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? createdBy,
      Wrapped<String?>? revokedBy,
      Wrapped<DateTime?>? revokedAt,
      Wrapped<String>? title,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt}) {
    return PublishableApiKey(
        id: (id != null ? id.value : this.id),
        createdBy: (createdBy != null ? createdBy.value : this.createdBy),
        revokedBy: (revokedBy != null ? revokedBy.value : this.revokedBy),
        revokedAt: (revokedAt != null ? revokedAt.value : this.revokedAt),
        title: (title != null ? title.value : this.title),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class PublishableApiKeySalesChannel {
  const PublishableApiKeySalesChannel({
    required this.salesChannelId,
    required this.publishableKeyId,
  });

  factory PublishableApiKeySalesChannel.fromJson(Map<String, dynamic> json) =>
      _$PublishableApiKeySalesChannelFromJson(json);

  static const toJsonFactory = _$PublishableApiKeySalesChannelToJson;
  Map<String, dynamic> toJson() => _$PublishableApiKeySalesChannelToJson(this);

  @JsonKey(
      name: 'sales_channel_id', includeIfNull: false, defaultValue: 'default')
  final String salesChannelId;
  @JsonKey(
      name: 'publishable_key_id', includeIfNull: false, defaultValue: 'default')
  final String publishableKeyId;
  static const fromJsonFactory = _$PublishableApiKeySalesChannelFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PublishableApiKeySalesChannelExtension
    on PublishableApiKeySalesChannel {
  PublishableApiKeySalesChannel copyWith(
      {String? salesChannelId, String? publishableKeyId}) {
    return PublishableApiKeySalesChannel(
        salesChannelId: salesChannelId ?? this.salesChannelId,
        publishableKeyId: publishableKeyId ?? this.publishableKeyId);
  }

  PublishableApiKeySalesChannel copyWithWrapped(
      {Wrapped<String>? salesChannelId, Wrapped<String>? publishableKeyId}) {
    return PublishableApiKeySalesChannel(
        salesChannelId: (salesChannelId != null
            ? salesChannelId.value
            : this.salesChannelId),
        publishableKeyId: (publishableKeyId != null
            ? publishableKeyId.value
            : this.publishableKeyId));
  }
}

@JsonSerializable(explicitToJson: true)
class Refund {
  const Refund({
    required this.id,
    required this.orderId,
    this.order,
    required this.paymentId,
    this.payment,
    required this.amount,
    required this.note,
    required this.reason,
    required this.idempotencyKey,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory Refund.fromJson(Map<String, dynamic> json) => _$RefundFromJson(json);

  static const toJsonFactory = _$RefundToJson;
  Map<String, dynamic> toJson() => _$RefundToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String? orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'payment_id', includeIfNull: false, defaultValue: 'default')
  final String? paymentId;
  @JsonKey(name: 'payment', includeIfNull: false)
  final Payment? payment;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  @JsonKey(
    name: 'reason',
    includeIfNull: false,
    toJson: refundReasonToJson,
    fromJson: refundReasonFromJson,
  )
  final enums.RefundReason reason;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$RefundFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $RefundExtension on Refund {
  Refund copyWith(
      {String? id,
      String? orderId,
      Order? order,
      String? paymentId,
      Payment? payment,
      int? amount,
      String? note,
      enums.RefundReason? reason,
      String? idempotencyKey,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return Refund(
        id: id ?? this.id,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        paymentId: paymentId ?? this.paymentId,
        payment: payment ?? this.payment,
        amount: amount ?? this.amount,
        note: note ?? this.note,
        reason: reason ?? this.reason,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  Refund copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? orderId,
      Wrapped<Order?>? order,
      Wrapped<String?>? paymentId,
      Wrapped<Payment?>? payment,
      Wrapped<int>? amount,
      Wrapped<String?>? note,
      Wrapped<enums.RefundReason>? reason,
      Wrapped<String?>? idempotencyKey,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return Refund(
        id: (id != null ? id.value : this.id),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        paymentId: (paymentId != null ? paymentId.value : this.paymentId),
        payment: (payment != null ? payment.value : this.payment),
        amount: (amount != null ? amount.value : this.amount),
        note: (note != null ? note.value : this.note),
        reason: (reason != null ? reason.value : this.reason),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class Region {
  const Region({
    required this.id,
    required this.name,
    required this.currencyCode,
    this.currency,
    required this.taxRate,
    this.taxRates,
    required this.taxCode,
    required this.giftCardsTaxable,
    required this.automaticTaxes,
    this.countries,
    required this.taxProviderId,
    this.taxProvider,
    this.paymentProviders,
    this.fulfillmentProviders,
    this.includesTax,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Region.fromJson(Map<String, dynamic> json) => _$RegionFromJson(json);

  static const toJsonFactory = _$RegionToJson;
  Map<String, dynamic> toJson() => _$RegionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String currencyCode;
  @JsonKey(name: 'currency', includeIfNull: false)
  final Currency? currency;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final double taxRate;
  @JsonKey(name: 'tax_rates', includeIfNull: false, defaultValue: <TaxRate>[])
  final List<TaxRate>? taxRates;
  @JsonKey(name: 'tax_code', includeIfNull: false, defaultValue: 'default')
  final String? taxCode;
  @JsonKey(name: 'gift_cards_taxable', includeIfNull: false, defaultValue: true)
  final bool giftCardsTaxable;
  @JsonKey(name: 'automatic_taxes', includeIfNull: false, defaultValue: true)
  final bool automaticTaxes;
  @JsonKey(name: 'countries', includeIfNull: false, defaultValue: <Country>[])
  final List<Country>? countries;
  @JsonKey(
      name: 'tax_provider_id', includeIfNull: false, defaultValue: 'default')
  final String? taxProviderId;
  @JsonKey(name: 'tax_provider', includeIfNull: false)
  final TaxProvider? taxProvider;
  @JsonKey(
      name: 'payment_providers',
      includeIfNull: false,
      defaultValue: <PaymentProvider>[])
  final List<PaymentProvider>? paymentProviders;
  @JsonKey(
      name: 'fulfillment_providers',
      includeIfNull: false,
      defaultValue: <FulfillmentProvider>[])
  final List<FulfillmentProvider>? fulfillmentProviders;
  @JsonKey(name: 'includes_tax', includeIfNull: false, defaultValue: false)
  final bool? includesTax;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$RegionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $RegionExtension on Region {
  Region copyWith(
      {String? id,
      String? name,
      String? currencyCode,
      Currency? currency,
      double? taxRate,
      List<TaxRate>? taxRates,
      String? taxCode,
      bool? giftCardsTaxable,
      bool? automaticTaxes,
      List<Country>? countries,
      String? taxProviderId,
      TaxProvider? taxProvider,
      List<PaymentProvider>? paymentProviders,
      List<FulfillmentProvider>? fulfillmentProviders,
      bool? includesTax,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Region(
        id: id ?? this.id,
        name: name ?? this.name,
        currencyCode: currencyCode ?? this.currencyCode,
        currency: currency ?? this.currency,
        taxRate: taxRate ?? this.taxRate,
        taxRates: taxRates ?? this.taxRates,
        taxCode: taxCode ?? this.taxCode,
        giftCardsTaxable: giftCardsTaxable ?? this.giftCardsTaxable,
        automaticTaxes: automaticTaxes ?? this.automaticTaxes,
        countries: countries ?? this.countries,
        taxProviderId: taxProviderId ?? this.taxProviderId,
        taxProvider: taxProvider ?? this.taxProvider,
        paymentProviders: paymentProviders ?? this.paymentProviders,
        fulfillmentProviders: fulfillmentProviders ?? this.fulfillmentProviders,
        includesTax: includesTax ?? this.includesTax,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Region copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<String>? currencyCode,
      Wrapped<Currency?>? currency,
      Wrapped<double>? taxRate,
      Wrapped<List<TaxRate>?>? taxRates,
      Wrapped<String?>? taxCode,
      Wrapped<bool>? giftCardsTaxable,
      Wrapped<bool>? automaticTaxes,
      Wrapped<List<Country>?>? countries,
      Wrapped<String?>? taxProviderId,
      Wrapped<TaxProvider?>? taxProvider,
      Wrapped<List<PaymentProvider>?>? paymentProviders,
      Wrapped<List<FulfillmentProvider>?>? fulfillmentProviders,
      Wrapped<bool?>? includesTax,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Region(
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        currency: (currency != null ? currency.value : this.currency),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate),
        taxRates: (taxRates != null ? taxRates.value : this.taxRates),
        taxCode: (taxCode != null ? taxCode.value : this.taxCode),
        giftCardsTaxable: (giftCardsTaxable != null
            ? giftCardsTaxable.value
            : this.giftCardsTaxable),
        automaticTaxes: (automaticTaxes != null
            ? automaticTaxes.value
            : this.automaticTaxes),
        countries: (countries != null ? countries.value : this.countries),
        taxProviderId:
            (taxProviderId != null ? taxProviderId.value : this.taxProviderId),
        taxProvider:
            (taxProvider != null ? taxProvider.value : this.taxProvider),
        paymentProviders: (paymentProviders != null
            ? paymentProviders.value
            : this.paymentProviders),
        fulfillmentProviders: (fulfillmentProviders != null
            ? fulfillmentProviders.value
            : this.fulfillmentProviders),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ReservationItemDTO {
  const ReservationItemDTO({
    required this.id,
    required this.locationId,
    required this.inventoryItemId,
    this.description,
    this.createdBy,
    required this.quantity,
    this.metadata,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
  });

  factory ReservationItemDTO.fromJson(Map<String, dynamic> json) =>
      _$ReservationItemDTOFromJson(json);

  static const toJsonFactory = _$ReservationItemDTOToJson;
  Map<String, dynamic> toJson() => _$ReservationItemDTOToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  @JsonKey(
      name: 'inventory_item_id', includeIfNull: false, defaultValue: 'default')
  final String inventoryItemId;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'created_by', includeIfNull: false, defaultValue: 'default')
  final String? createdBy;
  @JsonKey(name: 'quantity', includeIfNull: false)
  final double quantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime? createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime? updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$ReservationItemDTOFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ReservationItemDTOExtension on ReservationItemDTO {
  ReservationItemDTO copyWith(
      {String? id,
      String? locationId,
      String? inventoryItemId,
      String? description,
      String? createdBy,
      double? quantity,
      Object? metadata,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return ReservationItemDTO(
        id: id ?? this.id,
        locationId: locationId ?? this.locationId,
        inventoryItemId: inventoryItemId ?? this.inventoryItemId,
        description: description ?? this.description,
        createdBy: createdBy ?? this.createdBy,
        quantity: quantity ?? this.quantity,
        metadata: metadata ?? this.metadata,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  ReservationItemDTO copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? locationId,
      Wrapped<String>? inventoryItemId,
      Wrapped<String?>? description,
      Wrapped<String?>? createdBy,
      Wrapped<double>? quantity,
      Wrapped<Object?>? metadata,
      Wrapped<DateTime?>? createdAt,
      Wrapped<DateTime?>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return ReservationItemDTO(
        id: (id != null ? id.value : this.id),
        locationId: (locationId != null ? locationId.value : this.locationId),
        inventoryItemId: (inventoryItemId != null
            ? inventoryItemId.value
            : this.inventoryItemId),
        description:
            (description != null ? description.value : this.description),
        createdBy: (createdBy != null ? createdBy.value : this.createdBy),
        quantity: (quantity != null ? quantity.value : this.quantity),
        metadata: (metadata != null ? metadata.value : this.metadata),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class ResponseInventoryItem {
  const ResponseInventoryItem({
    this.locationLevels,
    this.id,
    required this.sku,
    this.hsCode,
    this.originCountry,
    this.midCode,
    this.title,
    this.description,
    this.thumbnail,
    this.material,
    this.weight,
    this.height,
    this.width,
    this.length,
    this.requiresShipping,
    this.metadata,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
  });

  factory ResponseInventoryItem.fromJson(Map<String, dynamic> json) =>
      _$ResponseInventoryItemFromJson(json);

  static const toJsonFactory = _$ResponseInventoryItemToJson;
  Map<String, dynamic> toJson() => _$ResponseInventoryItemToJson(this);

  @JsonKey(
      name: 'location_levels', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? locationLevels;
  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String sku;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'thumbnail', includeIfNull: false, defaultValue: 'default')
  final String? thumbnail;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'requires_shipping', includeIfNull: false)
  final bool? requiresShipping;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime? createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime? updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$ResponseInventoryItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ResponseInventoryItemExtension on ResponseInventoryItem {
  ResponseInventoryItem copyWith(
      {List<Object>? locationLevels,
      String? id,
      String? sku,
      String? hsCode,
      String? originCountry,
      String? midCode,
      String? title,
      String? description,
      String? thumbnail,
      String? material,
      double? weight,
      double? height,
      double? width,
      double? length,
      bool? requiresShipping,
      Object? metadata,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return ResponseInventoryItem(
        locationLevels: locationLevels ?? this.locationLevels,
        id: id ?? this.id,
        sku: sku ?? this.sku,
        hsCode: hsCode ?? this.hsCode,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        title: title ?? this.title,
        description: description ?? this.description,
        thumbnail: thumbnail ?? this.thumbnail,
        material: material ?? this.material,
        weight: weight ?? this.weight,
        height: height ?? this.height,
        width: width ?? this.width,
        length: length ?? this.length,
        requiresShipping: requiresShipping ?? this.requiresShipping,
        metadata: metadata ?? this.metadata,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  ResponseInventoryItem copyWithWrapped(
      {Wrapped<List<Object>?>? locationLevels,
      Wrapped<String?>? id,
      Wrapped<String>? sku,
      Wrapped<String?>? hsCode,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? title,
      Wrapped<String?>? description,
      Wrapped<String?>? thumbnail,
      Wrapped<String?>? material,
      Wrapped<double?>? weight,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<double?>? length,
      Wrapped<bool?>? requiresShipping,
      Wrapped<Object?>? metadata,
      Wrapped<DateTime?>? createdAt,
      Wrapped<DateTime?>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return ResponseInventoryItem(
        locationLevels: (locationLevels != null
            ? locationLevels.value
            : this.locationLevels),
        id: (id != null ? id.value : this.id),
        sku: (sku != null ? sku.value : this.sku),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        title: (title != null ? title.value : this.title),
        description:
            (description != null ? description.value : this.description),
        thumbnail: (thumbnail != null ? thumbnail.value : this.thumbnail),
        material: (material != null ? material.value : this.material),
        weight: (weight != null ? weight.value : this.weight),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        length: (length != null ? length.value : this.length),
        requiresShipping: (requiresShipping != null
            ? requiresShipping.value
            : this.requiresShipping),
        metadata: (metadata != null ? metadata.value : this.metadata),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class Return {
  const Return({
    required this.id,
    required this.status,
    this.items,
    required this.swapId,
    this.swap,
    required this.claimOrderId,
    this.claimOrder,
    required this.orderId,
    this.order,
    this.shippingMethod,
    required this.shippingData,
    required this.locationId,
    required this.refundAmount,
    required this.noNotification,
    required this.idempotencyKey,
    required this.receivedAt,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory Return.fromJson(Map<String, dynamic> json) => _$ReturnFromJson(json);

  static const toJsonFactory = _$ReturnToJson;
  Map<String, dynamic> toJson() => _$ReturnToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'status',
    includeIfNull: false,
    toJson: returnStatusToJson,
    fromJson: returnStatusStatusFromJson,
  )
  final enums.ReturnStatus status;
  static enums.ReturnStatus returnStatusStatusFromJson(Object? value) =>
      returnStatusFromJson(value, enums.ReturnStatus.requested);

  @JsonKey(name: 'items', includeIfNull: false, defaultValue: <ReturnItem>[])
  final List<ReturnItem>? items;
  @JsonKey(name: 'swap_id', includeIfNull: false, defaultValue: 'default')
  final String? swapId;
  @JsonKey(name: 'swap', includeIfNull: false)
  final Swap? swap;
  @JsonKey(
      name: 'claim_order_id', includeIfNull: false, defaultValue: 'default')
  final String? claimOrderId;
  @JsonKey(name: 'claim_order', includeIfNull: false)
  final ClaimOrder? claimOrder;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String? orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(name: 'shipping_method', includeIfNull: false)
  final ShippingMethod? shippingMethod;
  @JsonKey(name: 'shipping_data', includeIfNull: false)
  final Object? shippingData;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String? locationId;
  @JsonKey(name: 'refund_amount', includeIfNull: false, defaultValue: 36)
  final int refundAmount;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'received_at', includeIfNull: false)
  final DateTime? receivedAt;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ReturnFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ReturnExtension on Return {
  Return copyWith(
      {String? id,
      enums.ReturnStatus? status,
      List<ReturnItem>? items,
      String? swapId,
      Swap? swap,
      String? claimOrderId,
      ClaimOrder? claimOrder,
      String? orderId,
      Order? order,
      ShippingMethod? shippingMethod,
      Object? shippingData,
      String? locationId,
      int? refundAmount,
      bool? noNotification,
      String? idempotencyKey,
      DateTime? receivedAt,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return Return(
        id: id ?? this.id,
        status: status ?? this.status,
        items: items ?? this.items,
        swapId: swapId ?? this.swapId,
        swap: swap ?? this.swap,
        claimOrderId: claimOrderId ?? this.claimOrderId,
        claimOrder: claimOrder ?? this.claimOrder,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        shippingMethod: shippingMethod ?? this.shippingMethod,
        shippingData: shippingData ?? this.shippingData,
        locationId: locationId ?? this.locationId,
        refundAmount: refundAmount ?? this.refundAmount,
        noNotification: noNotification ?? this.noNotification,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        receivedAt: receivedAt ?? this.receivedAt,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  Return copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.ReturnStatus>? status,
      Wrapped<List<ReturnItem>?>? items,
      Wrapped<String?>? swapId,
      Wrapped<Swap?>? swap,
      Wrapped<String?>? claimOrderId,
      Wrapped<ClaimOrder?>? claimOrder,
      Wrapped<String?>? orderId,
      Wrapped<Order?>? order,
      Wrapped<ShippingMethod?>? shippingMethod,
      Wrapped<Object?>? shippingData,
      Wrapped<String?>? locationId,
      Wrapped<int>? refundAmount,
      Wrapped<bool?>? noNotification,
      Wrapped<String?>? idempotencyKey,
      Wrapped<DateTime?>? receivedAt,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return Return(
        id: (id != null ? id.value : this.id),
        status: (status != null ? status.value : this.status),
        items: (items != null ? items.value : this.items),
        swapId: (swapId != null ? swapId.value : this.swapId),
        swap: (swap != null ? swap.value : this.swap),
        claimOrderId:
            (claimOrderId != null ? claimOrderId.value : this.claimOrderId),
        claimOrder: (claimOrder != null ? claimOrder.value : this.claimOrder),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        shippingMethod: (shippingMethod != null
            ? shippingMethod.value
            : this.shippingMethod),
        shippingData:
            (shippingData != null ? shippingData.value : this.shippingData),
        locationId: (locationId != null ? locationId.value : this.locationId),
        refundAmount:
            (refundAmount != null ? refundAmount.value : this.refundAmount),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        receivedAt: (receivedAt != null ? receivedAt.value : this.receivedAt),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ReturnItem {
  const ReturnItem({
    required this.returnId,
    required this.itemId,
    this.returnOrder,
    this.item,
    required this.quantity,
    required this.isRequested,
    required this.requestedQuantity,
    required this.receivedQuantity,
    required this.reasonId,
    this.reason,
    required this.note,
    required this.metadata,
  });

  factory ReturnItem.fromJson(Map<String, dynamic> json) =>
      _$ReturnItemFromJson(json);

  static const toJsonFactory = _$ReturnItemToJson;
  Map<String, dynamic> toJson() => _$ReturnItemToJson(this);

  @JsonKey(name: 'return_id', includeIfNull: false, defaultValue: 'default')
  final String returnId;
  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'return_order', includeIfNull: false)
  final Return? returnOrder;
  @JsonKey(name: 'item', includeIfNull: false)
  final LineItem? item;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'is_requested', includeIfNull: false, defaultValue: true)
  final bool isRequested;
  @JsonKey(name: 'requested_quantity', includeIfNull: false, defaultValue: 36)
  final int? requestedQuantity;
  @JsonKey(name: 'received_quantity', includeIfNull: false, defaultValue: 36)
  final int? receivedQuantity;
  @JsonKey(name: 'reason_id', includeIfNull: false, defaultValue: 'default')
  final String? reasonId;
  @JsonKey(name: 'reason', includeIfNull: false)
  final ReturnReason? reason;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ReturnItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ReturnItemExtension on ReturnItem {
  ReturnItem copyWith(
      {String? returnId,
      String? itemId,
      Return? returnOrder,
      LineItem? item,
      int? quantity,
      bool? isRequested,
      int? requestedQuantity,
      int? receivedQuantity,
      String? reasonId,
      ReturnReason? reason,
      String? note,
      Object? metadata}) {
    return ReturnItem(
        returnId: returnId ?? this.returnId,
        itemId: itemId ?? this.itemId,
        returnOrder: returnOrder ?? this.returnOrder,
        item: item ?? this.item,
        quantity: quantity ?? this.quantity,
        isRequested: isRequested ?? this.isRequested,
        requestedQuantity: requestedQuantity ?? this.requestedQuantity,
        receivedQuantity: receivedQuantity ?? this.receivedQuantity,
        reasonId: reasonId ?? this.reasonId,
        reason: reason ?? this.reason,
        note: note ?? this.note,
        metadata: metadata ?? this.metadata);
  }

  ReturnItem copyWithWrapped(
      {Wrapped<String>? returnId,
      Wrapped<String>? itemId,
      Wrapped<Return?>? returnOrder,
      Wrapped<LineItem?>? item,
      Wrapped<int>? quantity,
      Wrapped<bool>? isRequested,
      Wrapped<int?>? requestedQuantity,
      Wrapped<int?>? receivedQuantity,
      Wrapped<String?>? reasonId,
      Wrapped<ReturnReason?>? reason,
      Wrapped<String?>? note,
      Wrapped<Object?>? metadata}) {
    return ReturnItem(
        returnId: (returnId != null ? returnId.value : this.returnId),
        itemId: (itemId != null ? itemId.value : this.itemId),
        returnOrder:
            (returnOrder != null ? returnOrder.value : this.returnOrder),
        item: (item != null ? item.value : this.item),
        quantity: (quantity != null ? quantity.value : this.quantity),
        isRequested:
            (isRequested != null ? isRequested.value : this.isRequested),
        requestedQuantity: (requestedQuantity != null
            ? requestedQuantity.value
            : this.requestedQuantity),
        receivedQuantity: (receivedQuantity != null
            ? receivedQuantity.value
            : this.receivedQuantity),
        reasonId: (reasonId != null ? reasonId.value : this.reasonId),
        reason: (reason != null ? reason.value : this.reason),
        note: (note != null ? note.value : this.note),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ReturnReason {
  const ReturnReason({
    required this.id,
    required this.value,
    required this.label,
    required this.description,
    required this.parentReturnReasonId,
    this.parentReturnReason,
    this.returnReasonChildren,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ReturnReason.fromJson(Map<String, dynamic> json) =>
      _$ReturnReasonFromJson(json);

  static const toJsonFactory = _$ReturnReasonToJson;
  Map<String, dynamic> toJson() => _$ReturnReasonToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  @JsonKey(name: 'label', includeIfNull: false, defaultValue: 'default')
  final String label;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(
      name: 'parent_return_reason_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? parentReturnReasonId;
  @JsonKey(name: 'parent_return_reason', includeIfNull: false)
  final ReturnReason? parentReturnReason;
  @JsonKey(name: 'return_reason_children', includeIfNull: false)
  final ReturnReason? returnReasonChildren;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ReturnReasonFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ReturnReasonExtension on ReturnReason {
  ReturnReason copyWith(
      {String? id,
      String? value,
      String? label,
      String? description,
      String? parentReturnReasonId,
      ReturnReason? parentReturnReason,
      ReturnReason? returnReasonChildren,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ReturnReason(
        id: id ?? this.id,
        value: value ?? this.value,
        label: label ?? this.label,
        description: description ?? this.description,
        parentReturnReasonId: parentReturnReasonId ?? this.parentReturnReasonId,
        parentReturnReason: parentReturnReason ?? this.parentReturnReason,
        returnReasonChildren: returnReasonChildren ?? this.returnReasonChildren,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ReturnReason copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? value,
      Wrapped<String>? label,
      Wrapped<String?>? description,
      Wrapped<String?>? parentReturnReasonId,
      Wrapped<ReturnReason?>? parentReturnReason,
      Wrapped<ReturnReason?>? returnReasonChildren,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ReturnReason(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value),
        label: (label != null ? label.value : this.label),
        description:
            (description != null ? description.value : this.description),
        parentReturnReasonId: (parentReturnReasonId != null
            ? parentReturnReasonId.value
            : this.parentReturnReasonId),
        parentReturnReason: (parentReturnReason != null
            ? parentReturnReason.value
            : this.parentReturnReason),
        returnReasonChildren: (returnReasonChildren != null
            ? returnReasonChildren.value
            : this.returnReasonChildren),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class SalesChannel {
  const SalesChannel({
    required this.id,
    required this.name,
    required this.description,
    required this.isDisabled,
    this.locations,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    this.metadata,
  });

  factory SalesChannel.fromJson(Map<String, dynamic> json) =>
      _$SalesChannelFromJson(json);

  static const toJsonFactory = _$SalesChannelToJson;
  Map<String, dynamic> toJson() => _$SalesChannelToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'is_disabled', includeIfNull: false, defaultValue: false)
  final bool isDisabled;
  @JsonKey(
      name: 'locations',
      includeIfNull: false,
      defaultValue: <SalesChannelLocation>[])
  final List<SalesChannelLocation>? locations;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$SalesChannelFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $SalesChannelExtension on SalesChannel {
  SalesChannel copyWith(
      {String? id,
      String? name,
      String? description,
      bool? isDisabled,
      List<SalesChannelLocation>? locations,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return SalesChannel(
        id: id ?? this.id,
        name: name ?? this.name,
        description: description ?? this.description,
        isDisabled: isDisabled ?? this.isDisabled,
        locations: locations ?? this.locations,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  SalesChannel copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<String?>? description,
      Wrapped<bool>? isDisabled,
      Wrapped<List<SalesChannelLocation>?>? locations,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return SalesChannel(
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        description:
            (description != null ? description.value : this.description),
        isDisabled: (isDisabled != null ? isDisabled.value : this.isDisabled),
        locations: (locations != null ? locations.value : this.locations),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class SalesChannelLocation {
  const SalesChannelLocation({
    required this.id,
    required this.salesChannelId,
    required this.locationId,
    this.salesChannel,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
  });

  factory SalesChannelLocation.fromJson(Map<String, dynamic> json) =>
      _$SalesChannelLocationFromJson(json);

  static const toJsonFactory = _$SalesChannelLocationToJson;
  Map<String, dynamic> toJson() => _$SalesChannelLocationToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
      name: 'sales_channel_id', includeIfNull: false, defaultValue: 'default')
  final String salesChannelId;
  @JsonKey(name: 'location_id', includeIfNull: false, defaultValue: 'default')
  final String locationId;
  @JsonKey(name: 'sales_channel', includeIfNull: false)
  final SalesChannel? salesChannel;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$SalesChannelLocationFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $SalesChannelLocationExtension on SalesChannelLocation {
  SalesChannelLocation copyWith(
      {String? id,
      String? salesChannelId,
      String? locationId,
      SalesChannel? salesChannel,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return SalesChannelLocation(
        id: id ?? this.id,
        salesChannelId: salesChannelId ?? this.salesChannelId,
        locationId: locationId ?? this.locationId,
        salesChannel: salesChannel ?? this.salesChannel,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  SalesChannelLocation copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? salesChannelId,
      Wrapped<String>? locationId,
      Wrapped<SalesChannel?>? salesChannel,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return SalesChannelLocation(
        id: (id != null ? id.value : this.id),
        salesChannelId: (salesChannelId != null
            ? salesChannelId.value
            : this.salesChannelId),
        locationId: (locationId != null ? locationId.value : this.locationId),
        salesChannel:
            (salesChannel != null ? salesChannel.value : this.salesChannel),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class ShippingMethod {
  const ShippingMethod({
    required this.id,
    required this.shippingOptionId,
    required this.orderId,
    this.order,
    required this.claimOrderId,
    this.claimOrder,
    required this.cartId,
    this.cart,
    required this.swapId,
    this.swap,
    required this.returnId,
    this.returnOrder,
    this.shippingOption,
    this.taxLines,
    required this.price,
    required this.data,
    this.includesTax,
    this.subtotal,
    this.total,
    this.taxTotal,
  });

  factory ShippingMethod.fromJson(Map<String, dynamic> json) =>
      _$ShippingMethodFromJson(json);

  static const toJsonFactory = _$ShippingMethodToJson;
  Map<String, dynamic> toJson() => _$ShippingMethodToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
      name: 'shipping_option_id', includeIfNull: false, defaultValue: 'default')
  final String shippingOptionId;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String? orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(
      name: 'claim_order_id', includeIfNull: false, defaultValue: 'default')
  final String? claimOrderId;
  @JsonKey(name: 'claim_order', includeIfNull: false)
  final ClaimOrder? claimOrder;
  @JsonKey(name: 'cart_id', includeIfNull: false, defaultValue: 'default')
  final String? cartId;
  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart? cart;
  @JsonKey(name: 'swap_id', includeIfNull: false, defaultValue: 'default')
  final String? swapId;
  @JsonKey(name: 'swap', includeIfNull: false)
  final Swap? swap;
  @JsonKey(name: 'return_id', includeIfNull: false, defaultValue: 'default')
  final String? returnId;
  @JsonKey(name: 'return_order', includeIfNull: false)
  final Return? returnOrder;
  @JsonKey(name: 'shipping_option', includeIfNull: false)
  final ShippingOption? shippingOption;
  @JsonKey(
      name: 'tax_lines',
      includeIfNull: false,
      defaultValue: <ShippingMethodTaxLine>[])
  final List<ShippingMethodTaxLine>? taxLines;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int price;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(name: 'includes_tax', includeIfNull: false, defaultValue: false)
  final bool? includesTax;
  @JsonKey(name: 'subtotal', includeIfNull: false, defaultValue: 36)
  final int? subtotal;
  @JsonKey(name: 'total', includeIfNull: false, defaultValue: 36)
  final int? total;
  @JsonKey(name: 'tax_total', includeIfNull: false, defaultValue: 36)
  final int? taxTotal;
  static const fromJsonFactory = _$ShippingMethodFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ShippingMethodExtension on ShippingMethod {
  ShippingMethod copyWith(
      {String? id,
      String? shippingOptionId,
      String? orderId,
      Order? order,
      String? claimOrderId,
      ClaimOrder? claimOrder,
      String? cartId,
      Cart? cart,
      String? swapId,
      Swap? swap,
      String? returnId,
      Return? returnOrder,
      ShippingOption? shippingOption,
      List<ShippingMethodTaxLine>? taxLines,
      int? price,
      Object? data,
      bool? includesTax,
      int? subtotal,
      int? total,
      int? taxTotal}) {
    return ShippingMethod(
        id: id ?? this.id,
        shippingOptionId: shippingOptionId ?? this.shippingOptionId,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        claimOrderId: claimOrderId ?? this.claimOrderId,
        claimOrder: claimOrder ?? this.claimOrder,
        cartId: cartId ?? this.cartId,
        cart: cart ?? this.cart,
        swapId: swapId ?? this.swapId,
        swap: swap ?? this.swap,
        returnId: returnId ?? this.returnId,
        returnOrder: returnOrder ?? this.returnOrder,
        shippingOption: shippingOption ?? this.shippingOption,
        taxLines: taxLines ?? this.taxLines,
        price: price ?? this.price,
        data: data ?? this.data,
        includesTax: includesTax ?? this.includesTax,
        subtotal: subtotal ?? this.subtotal,
        total: total ?? this.total,
        taxTotal: taxTotal ?? this.taxTotal);
  }

  ShippingMethod copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? shippingOptionId,
      Wrapped<String?>? orderId,
      Wrapped<Order?>? order,
      Wrapped<String?>? claimOrderId,
      Wrapped<ClaimOrder?>? claimOrder,
      Wrapped<String?>? cartId,
      Wrapped<Cart?>? cart,
      Wrapped<String?>? swapId,
      Wrapped<Swap?>? swap,
      Wrapped<String?>? returnId,
      Wrapped<Return?>? returnOrder,
      Wrapped<ShippingOption?>? shippingOption,
      Wrapped<List<ShippingMethodTaxLine>?>? taxLines,
      Wrapped<int>? price,
      Wrapped<Object>? data,
      Wrapped<bool?>? includesTax,
      Wrapped<int?>? subtotal,
      Wrapped<int?>? total,
      Wrapped<int?>? taxTotal}) {
    return ShippingMethod(
        id: (id != null ? id.value : this.id),
        shippingOptionId: (shippingOptionId != null
            ? shippingOptionId.value
            : this.shippingOptionId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        claimOrderId:
            (claimOrderId != null ? claimOrderId.value : this.claimOrderId),
        claimOrder: (claimOrder != null ? claimOrder.value : this.claimOrder),
        cartId: (cartId != null ? cartId.value : this.cartId),
        cart: (cart != null ? cart.value : this.cart),
        swapId: (swapId != null ? swapId.value : this.swapId),
        swap: (swap != null ? swap.value : this.swap),
        returnId: (returnId != null ? returnId.value : this.returnId),
        returnOrder:
            (returnOrder != null ? returnOrder.value : this.returnOrder),
        shippingOption: (shippingOption != null
            ? shippingOption.value
            : this.shippingOption),
        taxLines: (taxLines != null ? taxLines.value : this.taxLines),
        price: (price != null ? price.value : this.price),
        data: (data != null ? data.value : this.data),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax),
        subtotal: (subtotal != null ? subtotal.value : this.subtotal),
        total: (total != null ? total.value : this.total),
        taxTotal: (taxTotal != null ? taxTotal.value : this.taxTotal));
  }
}

@JsonSerializable(explicitToJson: true)
class ShippingMethodTaxLine {
  const ShippingMethodTaxLine({
    required this.id,
    required this.code,
    required this.name,
    required this.rate,
    required this.shippingMethodId,
    this.shippingMethod,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory ShippingMethodTaxLine.fromJson(Map<String, dynamic> json) =>
      _$ShippingMethodTaxLineFromJson(json);

  static const toJsonFactory = _$ShippingMethodTaxLineToJson;
  Map<String, dynamic> toJson() => _$ShippingMethodTaxLineToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String? code;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'rate', includeIfNull: false)
  final double rate;
  @JsonKey(
      name: 'shipping_method_id', includeIfNull: false, defaultValue: 'default')
  final String shippingMethodId;
  @JsonKey(name: 'shipping_method', includeIfNull: false)
  final ShippingMethod? shippingMethod;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ShippingMethodTaxLineFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ShippingMethodTaxLineExtension on ShippingMethodTaxLine {
  ShippingMethodTaxLine copyWith(
      {String? id,
      String? code,
      String? name,
      double? rate,
      String? shippingMethodId,
      ShippingMethod? shippingMethod,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return ShippingMethodTaxLine(
        id: id ?? this.id,
        code: code ?? this.code,
        name: name ?? this.name,
        rate: rate ?? this.rate,
        shippingMethodId: shippingMethodId ?? this.shippingMethodId,
        shippingMethod: shippingMethod ?? this.shippingMethod,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  ShippingMethodTaxLine copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? code,
      Wrapped<String>? name,
      Wrapped<double>? rate,
      Wrapped<String>? shippingMethodId,
      Wrapped<ShippingMethod?>? shippingMethod,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return ShippingMethodTaxLine(
        id: (id != null ? id.value : this.id),
        code: (code != null ? code.value : this.code),
        name: (name != null ? name.value : this.name),
        rate: (rate != null ? rate.value : this.rate),
        shippingMethodId: (shippingMethodId != null
            ? shippingMethodId.value
            : this.shippingMethodId),
        shippingMethod: (shippingMethod != null
            ? shippingMethod.value
            : this.shippingMethod),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ShippingOption {
  const ShippingOption({
    required this.id,
    required this.name,
    required this.regionId,
    this.region,
    required this.profileId,
    this.profile,
    required this.providerId,
    this.provider,
    required this.priceType,
    required this.amount,
    required this.isReturn,
    required this.adminOnly,
    this.requirements,
    required this.data,
    this.includesTax,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ShippingOption.fromJson(Map<String, dynamic> json) =>
      _$ShippingOptionFromJson(json);

  static const toJsonFactory = _$ShippingOptionToJson;
  Map<String, dynamic> toJson() => _$ShippingOptionToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  @JsonKey(name: 'profile_id', includeIfNull: false, defaultValue: 'default')
  final String profileId;
  @JsonKey(name: 'profile', includeIfNull: false)
  final ShippingProfile? profile;
  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'provider', includeIfNull: false)
  final FulfillmentProvider? provider;
  @JsonKey(
    name: 'price_type',
    includeIfNull: false,
    toJson: shippingOptionPriceTypeToJson,
    fromJson: shippingOptionPriceTypeFromJson,
  )
  final enums.ShippingOptionPriceType priceType;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int? amount;
  @JsonKey(name: 'is_return', includeIfNull: false, defaultValue: false)
  final bool isReturn;
  @JsonKey(name: 'admin_only', includeIfNull: false, defaultValue: false)
  final bool adminOnly;
  @JsonKey(
      name: 'requirements',
      includeIfNull: false,
      defaultValue: <ShippingOptionRequirement>[])
  final List<ShippingOptionRequirement>? requirements;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(name: 'includes_tax', includeIfNull: false, defaultValue: false)
  final bool? includesTax;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ShippingOptionFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ShippingOptionExtension on ShippingOption {
  ShippingOption copyWith(
      {String? id,
      String? name,
      String? regionId,
      Region? region,
      String? profileId,
      ShippingProfile? profile,
      String? providerId,
      FulfillmentProvider? provider,
      enums.ShippingOptionPriceType? priceType,
      int? amount,
      bool? isReturn,
      bool? adminOnly,
      List<ShippingOptionRequirement>? requirements,
      Object? data,
      bool? includesTax,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ShippingOption(
        id: id ?? this.id,
        name: name ?? this.name,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        profileId: profileId ?? this.profileId,
        profile: profile ?? this.profile,
        providerId: providerId ?? this.providerId,
        provider: provider ?? this.provider,
        priceType: priceType ?? this.priceType,
        amount: amount ?? this.amount,
        isReturn: isReturn ?? this.isReturn,
        adminOnly: adminOnly ?? this.adminOnly,
        requirements: requirements ?? this.requirements,
        data: data ?? this.data,
        includesTax: includesTax ?? this.includesTax,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ShippingOption copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<String>? regionId,
      Wrapped<Region?>? region,
      Wrapped<String>? profileId,
      Wrapped<ShippingProfile?>? profile,
      Wrapped<String>? providerId,
      Wrapped<FulfillmentProvider?>? provider,
      Wrapped<enums.ShippingOptionPriceType>? priceType,
      Wrapped<int?>? amount,
      Wrapped<bool>? isReturn,
      Wrapped<bool>? adminOnly,
      Wrapped<List<ShippingOptionRequirement>?>? requirements,
      Wrapped<Object>? data,
      Wrapped<bool?>? includesTax,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ShippingOption(
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        profileId: (profileId != null ? profileId.value : this.profileId),
        profile: (profile != null ? profile.value : this.profile),
        providerId: (providerId != null ? providerId.value : this.providerId),
        provider: (provider != null ? provider.value : this.provider),
        priceType: (priceType != null ? priceType.value : this.priceType),
        amount: (amount != null ? amount.value : this.amount),
        isReturn: (isReturn != null ? isReturn.value : this.isReturn),
        adminOnly: (adminOnly != null ? adminOnly.value : this.adminOnly),
        requirements:
            (requirements != null ? requirements.value : this.requirements),
        data: (data != null ? data.value : this.data),
        includesTax:
            (includesTax != null ? includesTax.value : this.includesTax),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ShippingOptionRequirement {
  const ShippingOptionRequirement({
    required this.id,
    required this.shippingOptionId,
    this.shippingOption,
    required this.type,
    required this.amount,
    required this.deletedAt,
  });

  factory ShippingOptionRequirement.fromJson(Map<String, dynamic> json) =>
      _$ShippingOptionRequirementFromJson(json);

  static const toJsonFactory = _$ShippingOptionRequirementToJson;
  Map<String, dynamic> toJson() => _$ShippingOptionRequirementToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
      name: 'shipping_option_id', includeIfNull: false, defaultValue: 'default')
  final String shippingOptionId;
  @JsonKey(name: 'shipping_option', includeIfNull: false)
  final ShippingOption? shippingOption;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: shippingOptionRequirementTypeToJson,
    fromJson: shippingOptionRequirementTypeFromJson,
  )
  final enums.ShippingOptionRequirementType type;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$ShippingOptionRequirementFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ShippingOptionRequirementExtension on ShippingOptionRequirement {
  ShippingOptionRequirement copyWith(
      {String? id,
      String? shippingOptionId,
      ShippingOption? shippingOption,
      enums.ShippingOptionRequirementType? type,
      int? amount,
      DateTime? deletedAt}) {
    return ShippingOptionRequirement(
        id: id ?? this.id,
        shippingOptionId: shippingOptionId ?? this.shippingOptionId,
        shippingOption: shippingOption ?? this.shippingOption,
        type: type ?? this.type,
        amount: amount ?? this.amount,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  ShippingOptionRequirement copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? shippingOptionId,
      Wrapped<ShippingOption?>? shippingOption,
      Wrapped<enums.ShippingOptionRequirementType>? type,
      Wrapped<int>? amount,
      Wrapped<DateTime?>? deletedAt}) {
    return ShippingOptionRequirement(
        id: (id != null ? id.value : this.id),
        shippingOptionId: (shippingOptionId != null
            ? shippingOptionId.value
            : this.shippingOptionId),
        shippingOption: (shippingOption != null
            ? shippingOption.value
            : this.shippingOption),
        type: (type != null ? type.value : this.type),
        amount: (amount != null ? amount.value : this.amount),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class ShippingProfile {
  const ShippingProfile({
    required this.id,
    required this.name,
    required this.type,
    this.products,
    this.shippingOptions,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory ShippingProfile.fromJson(Map<String, dynamic> json) =>
      _$ShippingProfileFromJson(json);

  static const toJsonFactory = _$ShippingProfileToJson;
  Map<String, dynamic> toJson() => _$ShippingProfileToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: shippingProfileTypeToJson,
    fromJson: shippingProfileTypeFromJson,
  )
  final enums.ShippingProfileType type;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Product>[])
  final List<Product>? products;
  @JsonKey(
      name: 'shipping_options',
      includeIfNull: false,
      defaultValue: <ShippingOption>[])
  final List<ShippingOption>? shippingOptions;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ShippingProfileFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ShippingProfileExtension on ShippingProfile {
  ShippingProfile copyWith(
      {String? id,
      String? name,
      enums.ShippingProfileType? type,
      List<Product>? products,
      List<ShippingOption>? shippingOptions,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return ShippingProfile(
        id: id ?? this.id,
        name: name ?? this.name,
        type: type ?? this.type,
        products: products ?? this.products,
        shippingOptions: shippingOptions ?? this.shippingOptions,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  ShippingProfile copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<enums.ShippingProfileType>? type,
      Wrapped<List<Product>?>? products,
      Wrapped<List<ShippingOption>?>? shippingOptions,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return ShippingProfile(
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        type: (type != null ? type.value : this.type),
        products: (products != null ? products.value : this.products),
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class ShippingTaxRate {
  const ShippingTaxRate({
    required this.shippingOptionId,
    this.shippingOption,
    required this.rateId,
    this.taxRate,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory ShippingTaxRate.fromJson(Map<String, dynamic> json) =>
      _$ShippingTaxRateFromJson(json);

  static const toJsonFactory = _$ShippingTaxRateToJson;
  Map<String, dynamic> toJson() => _$ShippingTaxRateToJson(this);

  @JsonKey(
      name: 'shipping_option_id', includeIfNull: false, defaultValue: 'default')
  final String shippingOptionId;
  @JsonKey(name: 'shipping_option', includeIfNull: false)
  final ShippingOption? shippingOption;
  @JsonKey(name: 'rate_id', includeIfNull: false, defaultValue: 'default')
  final String rateId;
  @JsonKey(name: 'tax_rate', includeIfNull: false)
  final TaxRate? taxRate;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$ShippingTaxRateFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $ShippingTaxRateExtension on ShippingTaxRate {
  ShippingTaxRate copyWith(
      {String? shippingOptionId,
      ShippingOption? shippingOption,
      String? rateId,
      TaxRate? taxRate,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return ShippingTaxRate(
        shippingOptionId: shippingOptionId ?? this.shippingOptionId,
        shippingOption: shippingOption ?? this.shippingOption,
        rateId: rateId ?? this.rateId,
        taxRate: taxRate ?? this.taxRate,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  ShippingTaxRate copyWithWrapped(
      {Wrapped<String>? shippingOptionId,
      Wrapped<ShippingOption?>? shippingOption,
      Wrapped<String>? rateId,
      Wrapped<TaxRate?>? taxRate,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return ShippingTaxRate(
        shippingOptionId: (shippingOptionId != null
            ? shippingOptionId.value
            : this.shippingOptionId),
        shippingOption: (shippingOption != null
            ? shippingOption.value
            : this.shippingOption),
        rateId: (rateId != null ? rateId.value : this.rateId),
        taxRate: (taxRate != null ? taxRate.value : this.taxRate),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class StagedJob {
  const StagedJob({
    required this.id,
    required this.eventName,
    required this.data,
    this.option,
  });

  factory StagedJob.fromJson(Map<String, dynamic> json) =>
      _$StagedJobFromJson(json);

  static const toJsonFactory = _$StagedJobToJson;
  Map<String, dynamic> toJson() => _$StagedJobToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'event_name', includeIfNull: false, defaultValue: 'default')
  final String eventName;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  @JsonKey(name: 'option', includeIfNull: false)
  final Object? option;
  static const fromJsonFactory = _$StagedJobFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StagedJobExtension on StagedJob {
  StagedJob copyWith(
      {String? id, String? eventName, Object? data, Object? option}) {
    return StagedJob(
        id: id ?? this.id,
        eventName: eventName ?? this.eventName,
        data: data ?? this.data,
        option: option ?? this.option);
  }

  StagedJob copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? eventName,
      Wrapped<Object>? data,
      Wrapped<Object?>? option}) {
    return StagedJob(
        id: (id != null ? id.value : this.id),
        eventName: (eventName != null ? eventName.value : this.eventName),
        data: (data != null ? data.value : this.data),
        option: (option != null ? option.value : this.option));
  }
}

@JsonSerializable(explicitToJson: true)
class StockLocationAddressDTO {
  const StockLocationAddressDTO({
    this.id,
    required this.address1,
    this.address2,
    this.company,
    this.city,
    required this.countryCode,
    this.phone,
    this.postalCode,
    this.province,
    required this.createdAt,
    required this.updatedAt,
    this.deletedAt,
    this.metadata,
  });

  factory StockLocationAddressDTO.fromJson(Map<String, dynamic> json) =>
      _$StockLocationAddressDTOFromJson(json);

  static const toJsonFactory = _$StockLocationAddressDTOToJson;
  Map<String, dynamic> toJson() => _$StockLocationAddressDTOToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'address_1', includeIfNull: false, defaultValue: 'default')
  final String address1;
  @JsonKey(name: 'address_2', includeIfNull: false, defaultValue: 'default')
  final String? address2;
  @JsonKey(name: 'company', includeIfNull: false, defaultValue: 'default')
  final String? company;
  @JsonKey(name: 'city', includeIfNull: false, defaultValue: 'default')
  final String? city;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String countryCode;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'postal_code', includeIfNull: false, defaultValue: 'default')
  final String? postalCode;
  @JsonKey(name: 'province', includeIfNull: false, defaultValue: 'default')
  final String? province;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$StockLocationAddressDTOFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StockLocationAddressDTOExtension on StockLocationAddressDTO {
  StockLocationAddressDTO copyWith(
      {String? id,
      String? address1,
      String? address2,
      String? company,
      String? city,
      String? countryCode,
      String? phone,
      String? postalCode,
      String? province,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return StockLocationAddressDTO(
        id: id ?? this.id,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        company: company ?? this.company,
        city: city ?? this.city,
        countryCode: countryCode ?? this.countryCode,
        phone: phone ?? this.phone,
        postalCode: postalCode ?? this.postalCode,
        province: province ?? this.province,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  StockLocationAddressDTO copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String>? address1,
      Wrapped<String?>? address2,
      Wrapped<String?>? company,
      Wrapped<String?>? city,
      Wrapped<String>? countryCode,
      Wrapped<String?>? phone,
      Wrapped<String?>? postalCode,
      Wrapped<String?>? province,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return StockLocationAddressDTO(
        id: (id != null ? id.value : this.id),
        address1: (address1 != null ? address1.value : this.address1),
        address2: (address2 != null ? address2.value : this.address2),
        company: (company != null ? company.value : this.company),
        city: (city != null ? city.value : this.city),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        phone: (phone != null ? phone.value : this.phone),
        postalCode: (postalCode != null ? postalCode.value : this.postalCode),
        province: (province != null ? province.value : this.province),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class StockLocationAddressInput {
  const StockLocationAddressInput({
    required this.address1,
    this.address2,
    this.city,
    required this.countryCode,
    this.phone,
    this.postalCode,
    this.province,
    this.metadata,
  });

  factory StockLocationAddressInput.fromJson(Map<String, dynamic> json) =>
      _$StockLocationAddressInputFromJson(json);

  static const toJsonFactory = _$StockLocationAddressInputToJson;
  Map<String, dynamic> toJson() => _$StockLocationAddressInputToJson(this);

  @JsonKey(name: 'address_1', includeIfNull: false, defaultValue: 'default')
  final String address1;
  @JsonKey(name: 'address_2', includeIfNull: false, defaultValue: 'default')
  final String? address2;
  @JsonKey(name: 'city', includeIfNull: false, defaultValue: 'default')
  final String? city;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String countryCode;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'postal_code', includeIfNull: false, defaultValue: 'default')
  final String? postalCode;
  @JsonKey(name: 'province', includeIfNull: false, defaultValue: 'default')
  final String? province;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$StockLocationAddressInputFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StockLocationAddressInputExtension on StockLocationAddressInput {
  StockLocationAddressInput copyWith(
      {String? address1,
      String? address2,
      String? city,
      String? countryCode,
      String? phone,
      String? postalCode,
      String? province,
      Object? metadata}) {
    return StockLocationAddressInput(
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        countryCode: countryCode ?? this.countryCode,
        phone: phone ?? this.phone,
        postalCode: postalCode ?? this.postalCode,
        province: province ?? this.province,
        metadata: metadata ?? this.metadata);
  }

  StockLocationAddressInput copyWithWrapped(
      {Wrapped<String>? address1,
      Wrapped<String?>? address2,
      Wrapped<String?>? city,
      Wrapped<String>? countryCode,
      Wrapped<String?>? phone,
      Wrapped<String?>? postalCode,
      Wrapped<String?>? province,
      Wrapped<Object?>? metadata}) {
    return StockLocationAddressInput(
        address1: (address1 != null ? address1.value : this.address1),
        address2: (address2 != null ? address2.value : this.address2),
        city: (city != null ? city.value : this.city),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        phone: (phone != null ? phone.value : this.phone),
        postalCode: (postalCode != null ? postalCode.value : this.postalCode),
        province: (province != null ? province.value : this.province),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class StockLocationDTO {
  const StockLocationDTO({
    required this.id,
    required this.addressId,
    required this.name,
    this.address,
    this.metadata,
    required this.createdAt,
    required this.updatedAt,
    this.deletedAt,
  });

  factory StockLocationDTO.fromJson(Map<String, dynamic> json) =>
      _$StockLocationDTOFromJson(json);

  static const toJsonFactory = _$StockLocationDTOToJson;
  Map<String, dynamic> toJson() => _$StockLocationDTOToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'address_id', includeIfNull: false, defaultValue: 'default')
  final String addressId;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'address', includeIfNull: false)
  final StockLocationAddressDTO? address;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$StockLocationDTOFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StockLocationDTOExtension on StockLocationDTO {
  StockLocationDTO copyWith(
      {String? id,
      String? addressId,
      String? name,
      StockLocationAddressDTO? address,
      Object? metadata,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return StockLocationDTO(
        id: id ?? this.id,
        addressId: addressId ?? this.addressId,
        name: name ?? this.name,
        address: address ?? this.address,
        metadata: metadata ?? this.metadata,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  StockLocationDTO copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? addressId,
      Wrapped<String>? name,
      Wrapped<StockLocationAddressDTO?>? address,
      Wrapped<Object?>? metadata,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return StockLocationDTO(
        id: (id != null ? id.value : this.id),
        addressId: (addressId != null ? addressId.value : this.addressId),
        name: (name != null ? name.value : this.name),
        address: (address != null ? address.value : this.address),
        metadata: (metadata != null ? metadata.value : this.metadata),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class StockLocationExpandedDTO {
  const StockLocationExpandedDTO({
    this.salesChannels,
    required this.id,
    required this.addressId,
    required this.name,
    this.address,
    this.metadata,
    required this.createdAt,
    required this.updatedAt,
    this.deletedAt,
  });

  factory StockLocationExpandedDTO.fromJson(Map<String, dynamic> json) =>
      _$StockLocationExpandedDTOFromJson(json);

  static const toJsonFactory = _$StockLocationExpandedDTOToJson;
  Map<String, dynamic> toJson() => _$StockLocationExpandedDTOToJson(this);

  @JsonKey(name: 'sales_channels', includeIfNull: false)
  final SalesChannel? salesChannels;
  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'address_id', includeIfNull: false, defaultValue: 'default')
  final String addressId;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'address', includeIfNull: false)
  final StockLocationAddressDTO? address;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  static const fromJsonFactory = _$StockLocationExpandedDTOFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StockLocationExpandedDTOExtension on StockLocationExpandedDTO {
  StockLocationExpandedDTO copyWith(
      {SalesChannel? salesChannels,
      String? id,
      String? addressId,
      String? name,
      StockLocationAddressDTO? address,
      Object? metadata,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt}) {
    return StockLocationExpandedDTO(
        salesChannels: salesChannels ?? this.salesChannels,
        id: id ?? this.id,
        addressId: addressId ?? this.addressId,
        name: name ?? this.name,
        address: address ?? this.address,
        metadata: metadata ?? this.metadata,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt);
  }

  StockLocationExpandedDTO copyWithWrapped(
      {Wrapped<SalesChannel?>? salesChannels,
      Wrapped<String>? id,
      Wrapped<String>? addressId,
      Wrapped<String>? name,
      Wrapped<StockLocationAddressDTO?>? address,
      Wrapped<Object?>? metadata,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt}) {
    return StockLocationExpandedDTO(
        salesChannels:
            (salesChannels != null ? salesChannels.value : this.salesChannels),
        id: (id != null ? id.value : this.id),
        addressId: (addressId != null ? addressId.value : this.addressId),
        name: (name != null ? name.value : this.name),
        address: (address != null ? address.value : this.address),
        metadata: (metadata != null ? metadata.value : this.metadata),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class Store {
  const Store({
    required this.id,
    required this.name,
    required this.defaultCurrencyCode,
    this.defaultCurrency,
    this.currencies,
    required this.swapLinkTemplate,
    required this.paymentLinkTemplate,
    required this.inviteLinkTemplate,
    required this.defaultLocationId,
    this.defaultSalesChannelId,
    this.defaultSalesChannel,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory Store.fromJson(Map<String, dynamic> json) => _$StoreFromJson(json);

  static const toJsonFactory = _$StoreToJson;
  Map<String, dynamic> toJson() => _$StoreToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(
      name: 'default_currency_code',
      includeIfNull: false,
      defaultValue: 'default')
  final String defaultCurrencyCode;
  @JsonKey(name: 'default_currency', includeIfNull: false)
  final Currency? defaultCurrency;
  @JsonKey(name: 'currencies', includeIfNull: false, defaultValue: <Currency>[])
  final List<Currency>? currencies;
  @JsonKey(
      name: 'swap_link_template', includeIfNull: false, defaultValue: 'default')
  final String? swapLinkTemplate;
  @JsonKey(
      name: 'payment_link_template',
      includeIfNull: false,
      defaultValue: 'default')
  final String? paymentLinkTemplate;
  @JsonKey(
      name: 'invite_link_template',
      includeIfNull: false,
      defaultValue: 'default')
  final String? inviteLinkTemplate;
  @JsonKey(
      name: 'default_location_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? defaultLocationId;
  @JsonKey(
      name: 'default_sales_channel_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? defaultSalesChannelId;
  @JsonKey(name: 'default_sales_channel', includeIfNull: false)
  final SalesChannel? defaultSalesChannel;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$StoreFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreExtension on Store {
  Store copyWith(
      {String? id,
      String? name,
      String? defaultCurrencyCode,
      Currency? defaultCurrency,
      List<Currency>? currencies,
      String? swapLinkTemplate,
      String? paymentLinkTemplate,
      String? inviteLinkTemplate,
      String? defaultLocationId,
      String? defaultSalesChannelId,
      SalesChannel? defaultSalesChannel,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return Store(
        id: id ?? this.id,
        name: name ?? this.name,
        defaultCurrencyCode: defaultCurrencyCode ?? this.defaultCurrencyCode,
        defaultCurrency: defaultCurrency ?? this.defaultCurrency,
        currencies: currencies ?? this.currencies,
        swapLinkTemplate: swapLinkTemplate ?? this.swapLinkTemplate,
        paymentLinkTemplate: paymentLinkTemplate ?? this.paymentLinkTemplate,
        inviteLinkTemplate: inviteLinkTemplate ?? this.inviteLinkTemplate,
        defaultLocationId: defaultLocationId ?? this.defaultLocationId,
        defaultSalesChannelId:
            defaultSalesChannelId ?? this.defaultSalesChannelId,
        defaultSalesChannel: defaultSalesChannel ?? this.defaultSalesChannel,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  Store copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? name,
      Wrapped<String>? defaultCurrencyCode,
      Wrapped<Currency?>? defaultCurrency,
      Wrapped<List<Currency>?>? currencies,
      Wrapped<String?>? swapLinkTemplate,
      Wrapped<String?>? paymentLinkTemplate,
      Wrapped<String?>? inviteLinkTemplate,
      Wrapped<String?>? defaultLocationId,
      Wrapped<String?>? defaultSalesChannelId,
      Wrapped<SalesChannel?>? defaultSalesChannel,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return Store(
        id: (id != null ? id.value : this.id),
        name: (name != null ? name.value : this.name),
        defaultCurrencyCode: (defaultCurrencyCode != null
            ? defaultCurrencyCode.value
            : this.defaultCurrencyCode),
        defaultCurrency: (defaultCurrency != null
            ? defaultCurrency.value
            : this.defaultCurrency),
        currencies: (currencies != null ? currencies.value : this.currencies),
        swapLinkTemplate: (swapLinkTemplate != null
            ? swapLinkTemplate.value
            : this.swapLinkTemplate),
        paymentLinkTemplate: (paymentLinkTemplate != null
            ? paymentLinkTemplate.value
            : this.paymentLinkTemplate),
        inviteLinkTemplate: (inviteLinkTemplate != null
            ? inviteLinkTemplate.value
            : this.inviteLinkTemplate),
        defaultLocationId: (defaultLocationId != null
            ? defaultLocationId.value
            : this.defaultLocationId),
        defaultSalesChannelId: (defaultSalesChannelId != null
            ? defaultSalesChannelId.value
            : this.defaultSalesChannelId),
        defaultSalesChannel: (defaultSalesChannel != null
            ? defaultSalesChannel.value
            : this.defaultSalesChannel),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class Swap {
  const Swap({
    required this.id,
    required this.fulfillmentStatus,
    required this.paymentStatus,
    required this.orderId,
    this.order,
    this.additionalItems,
    this.returnOrder,
    this.fulfillments,
    this.payment,
    required this.differenceDue,
    required this.shippingAddressId,
    this.shippingAddress,
    this.shippingMethods,
    required this.cartId,
    this.cart,
    required this.confirmedAt,
    required this.canceledAt,
    required this.noNotification,
    required this.allowBackorder,
    required this.idempotencyKey,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory Swap.fromJson(Map<String, dynamic> json) => _$SwapFromJson(json);

  static const toJsonFactory = _$SwapToJson;
  Map<String, dynamic> toJson() => _$SwapToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'fulfillment_status',
    includeIfNull: false,
    toJson: swapFulfillmentStatusToJson,
    fromJson: swapFulfillmentStatusFromJson,
  )
  final enums.SwapFulfillmentStatus fulfillmentStatus;
  @JsonKey(
    name: 'payment_status',
    includeIfNull: false,
    toJson: swapPaymentStatusToJson,
    fromJson: swapPaymentStatusFromJson,
  )
  final enums.SwapPaymentStatus paymentStatus;
  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String orderId;
  @JsonKey(name: 'order', includeIfNull: false)
  final Order? order;
  @JsonKey(
      name: 'additional_items',
      includeIfNull: false,
      defaultValue: <LineItem>[])
  final List<LineItem>? additionalItems;
  @JsonKey(name: 'return_order', includeIfNull: false)
  final Return? returnOrder;
  @JsonKey(
      name: 'fulfillments', includeIfNull: false, defaultValue: <Fulfillment>[])
  final List<Fulfillment>? fulfillments;
  @JsonKey(name: 'payment', includeIfNull: false)
  final Payment? payment;
  @JsonKey(name: 'difference_due', includeIfNull: false, defaultValue: 36)
  final int? differenceDue;
  @JsonKey(
      name: 'shipping_address_id',
      includeIfNull: false,
      defaultValue: 'default')
  final String? shippingAddressId;
  @JsonKey(name: 'shipping_address', includeIfNull: false)
  final Address? shippingAddress;
  @JsonKey(
      name: 'shipping_methods',
      includeIfNull: false,
      defaultValue: <ShippingMethod>[])
  final List<ShippingMethod>? shippingMethods;
  @JsonKey(name: 'cart_id', includeIfNull: false, defaultValue: 'default')
  final String? cartId;
  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart? cart;
  @JsonKey(name: 'confirmed_at', includeIfNull: false)
  final DateTime? confirmedAt;
  @JsonKey(name: 'canceled_at', includeIfNull: false)
  final DateTime? canceledAt;
  @JsonKey(name: 'no_notification', includeIfNull: false)
  final bool? noNotification;
  @JsonKey(name: 'allow_backorder', includeIfNull: false, defaultValue: false)
  final bool allowBackorder;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$SwapFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $SwapExtension on Swap {
  Swap copyWith(
      {String? id,
      enums.SwapFulfillmentStatus? fulfillmentStatus,
      enums.SwapPaymentStatus? paymentStatus,
      String? orderId,
      Order? order,
      List<LineItem>? additionalItems,
      Return? returnOrder,
      List<Fulfillment>? fulfillments,
      Payment? payment,
      int? differenceDue,
      String? shippingAddressId,
      Address? shippingAddress,
      List<ShippingMethod>? shippingMethods,
      String? cartId,
      Cart? cart,
      DateTime? confirmedAt,
      DateTime? canceledAt,
      bool? noNotification,
      bool? allowBackorder,
      String? idempotencyKey,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return Swap(
        id: id ?? this.id,
        fulfillmentStatus: fulfillmentStatus ?? this.fulfillmentStatus,
        paymentStatus: paymentStatus ?? this.paymentStatus,
        orderId: orderId ?? this.orderId,
        order: order ?? this.order,
        additionalItems: additionalItems ?? this.additionalItems,
        returnOrder: returnOrder ?? this.returnOrder,
        fulfillments: fulfillments ?? this.fulfillments,
        payment: payment ?? this.payment,
        differenceDue: differenceDue ?? this.differenceDue,
        shippingAddressId: shippingAddressId ?? this.shippingAddressId,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        shippingMethods: shippingMethods ?? this.shippingMethods,
        cartId: cartId ?? this.cartId,
        cart: cart ?? this.cart,
        confirmedAt: confirmedAt ?? this.confirmedAt,
        canceledAt: canceledAt ?? this.canceledAt,
        noNotification: noNotification ?? this.noNotification,
        allowBackorder: allowBackorder ?? this.allowBackorder,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  Swap copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.SwapFulfillmentStatus>? fulfillmentStatus,
      Wrapped<enums.SwapPaymentStatus>? paymentStatus,
      Wrapped<String>? orderId,
      Wrapped<Order?>? order,
      Wrapped<List<LineItem>?>? additionalItems,
      Wrapped<Return?>? returnOrder,
      Wrapped<List<Fulfillment>?>? fulfillments,
      Wrapped<Payment?>? payment,
      Wrapped<int?>? differenceDue,
      Wrapped<String?>? shippingAddressId,
      Wrapped<Address?>? shippingAddress,
      Wrapped<List<ShippingMethod>?>? shippingMethods,
      Wrapped<String?>? cartId,
      Wrapped<Cart?>? cart,
      Wrapped<DateTime?>? confirmedAt,
      Wrapped<DateTime?>? canceledAt,
      Wrapped<bool?>? noNotification,
      Wrapped<bool>? allowBackorder,
      Wrapped<String?>? idempotencyKey,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return Swap(
        id: (id != null ? id.value : this.id),
        fulfillmentStatus: (fulfillmentStatus != null
            ? fulfillmentStatus.value
            : this.fulfillmentStatus),
        paymentStatus:
            (paymentStatus != null ? paymentStatus.value : this.paymentStatus),
        orderId: (orderId != null ? orderId.value : this.orderId),
        order: (order != null ? order.value : this.order),
        additionalItems: (additionalItems != null
            ? additionalItems.value
            : this.additionalItems),
        returnOrder:
            (returnOrder != null ? returnOrder.value : this.returnOrder),
        fulfillments:
            (fulfillments != null ? fulfillments.value : this.fulfillments),
        payment: (payment != null ? payment.value : this.payment),
        differenceDue:
            (differenceDue != null ? differenceDue.value : this.differenceDue),
        shippingAddressId: (shippingAddressId != null
            ? shippingAddressId.value
            : this.shippingAddressId),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        shippingMethods: (shippingMethods != null
            ? shippingMethods.value
            : this.shippingMethods),
        cartId: (cartId != null ? cartId.value : this.cartId),
        cart: (cart != null ? cart.value : this.cart),
        confirmedAt:
            (confirmedAt != null ? confirmedAt.value : this.confirmedAt),
        canceledAt: (canceledAt != null ? canceledAt.value : this.canceledAt),
        noNotification: (noNotification != null
            ? noNotification.value
            : this.noNotification),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class TaxLine {
  const TaxLine({
    required this.id,
    required this.code,
    required this.name,
    required this.rate,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory TaxLine.fromJson(Map<String, dynamic> json) =>
      _$TaxLineFromJson(json);

  static const toJsonFactory = _$TaxLineToJson;
  Map<String, dynamic> toJson() => _$TaxLineToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String? code;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'rate', includeIfNull: false)
  final double rate;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$TaxLineFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $TaxLineExtension on TaxLine {
  TaxLine copyWith(
      {String? id,
      String? code,
      String? name,
      double? rate,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return TaxLine(
        id: id ?? this.id,
        code: code ?? this.code,
        name: name ?? this.name,
        rate: rate ?? this.rate,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  TaxLine copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? code,
      Wrapped<String>? name,
      Wrapped<double>? rate,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return TaxLine(
        id: (id != null ? id.value : this.id),
        code: (code != null ? code.value : this.code),
        name: (name != null ? name.value : this.name),
        rate: (rate != null ? rate.value : this.rate),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class TaxProvider {
  const TaxProvider({
    required this.id,
    required this.isInstalled,
  });

  factory TaxProvider.fromJson(Map<String, dynamic> json) =>
      _$TaxProviderFromJson(json);

  static const toJsonFactory = _$TaxProviderToJson;
  Map<String, dynamic> toJson() => _$TaxProviderToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'is_installed', includeIfNull: false, defaultValue: true)
  final bool isInstalled;
  static const fromJsonFactory = _$TaxProviderFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $TaxProviderExtension on TaxProvider {
  TaxProvider copyWith({String? id, bool? isInstalled}) {
    return TaxProvider(
        id: id ?? this.id, isInstalled: isInstalled ?? this.isInstalled);
  }

  TaxProvider copyWithWrapped(
      {Wrapped<String>? id, Wrapped<bool>? isInstalled}) {
    return TaxProvider(
        id: (id != null ? id.value : this.id),
        isInstalled:
            (isInstalled != null ? isInstalled.value : this.isInstalled));
  }
}

@JsonSerializable(explicitToJson: true)
class TaxRate {
  const TaxRate({
    required this.id,
    required this.rate,
    required this.code,
    required this.name,
    required this.regionId,
    this.region,
    this.products,
    this.productTypes,
    this.shippingOptions,
    this.productCount,
    this.productTypeCount,
    this.shippingOptionCount,
    required this.createdAt,
    required this.updatedAt,
    required this.metadata,
  });

  factory TaxRate.fromJson(Map<String, dynamic> json) =>
      _$TaxRateFromJson(json);

  static const toJsonFactory = _$TaxRateToJson;
  Map<String, dynamic> toJson() => _$TaxRateToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'rate', includeIfNull: false)
  final double? rate;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String? code;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String name;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String regionId;
  @JsonKey(name: 'region', includeIfNull: false)
  final Region? region;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Product>[])
  final List<Product>? products;
  @JsonKey(
      name: 'product_types',
      includeIfNull: false,
      defaultValue: <ProductType>[])
  final List<ProductType>? productTypes;
  @JsonKey(
      name: 'shipping_options',
      includeIfNull: false,
      defaultValue: <ShippingOption>[])
  final List<ShippingOption>? shippingOptions;
  @JsonKey(name: 'product_count', includeIfNull: false, defaultValue: 36)
  final int? productCount;
  @JsonKey(name: 'product_type_count', includeIfNull: false, defaultValue: 36)
  final int? productTypeCount;
  @JsonKey(
      name: 'shipping_option_count', includeIfNull: false, defaultValue: 36)
  final int? shippingOptionCount;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$TaxRateFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $TaxRateExtension on TaxRate {
  TaxRate copyWith(
      {String? id,
      double? rate,
      String? code,
      String? name,
      String? regionId,
      Region? region,
      List<Product>? products,
      List<ProductType>? productTypes,
      List<ShippingOption>? shippingOptions,
      int? productCount,
      int? productTypeCount,
      int? shippingOptionCount,
      DateTime? createdAt,
      DateTime? updatedAt,
      Object? metadata}) {
    return TaxRate(
        id: id ?? this.id,
        rate: rate ?? this.rate,
        code: code ?? this.code,
        name: name ?? this.name,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        products: products ?? this.products,
        productTypes: productTypes ?? this.productTypes,
        shippingOptions: shippingOptions ?? this.shippingOptions,
        productCount: productCount ?? this.productCount,
        productTypeCount: productTypeCount ?? this.productTypeCount,
        shippingOptionCount: shippingOptionCount ?? this.shippingOptionCount,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata);
  }

  TaxRate copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<double?>? rate,
      Wrapped<String?>? code,
      Wrapped<String>? name,
      Wrapped<String>? regionId,
      Wrapped<Region?>? region,
      Wrapped<List<Product>?>? products,
      Wrapped<List<ProductType>?>? productTypes,
      Wrapped<List<ShippingOption>?>? shippingOptions,
      Wrapped<int?>? productCount,
      Wrapped<int?>? productTypeCount,
      Wrapped<int?>? shippingOptionCount,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<Object?>? metadata}) {
    return TaxRate(
        id: (id != null ? id.value : this.id),
        rate: (rate != null ? rate.value : this.rate),
        code: (code != null ? code.value : this.code),
        name: (name != null ? name.value : this.name),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        products: (products != null ? products.value : this.products),
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes),
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions),
        productCount:
            (productCount != null ? productCount.value : this.productCount),
        productTypeCount: (productTypeCount != null
            ? productTypeCount.value
            : this.productTypeCount),
        shippingOptionCount: (shippingOptionCount != null
            ? shippingOptionCount.value
            : this.shippingOptionCount),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class TrackingLink {
  const TrackingLink({
    required this.id,
    required this.url,
    required this.trackingNumber,
    required this.fulfillmentId,
    this.fulfillment,
    required this.idempotencyKey,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory TrackingLink.fromJson(Map<String, dynamic> json) =>
      _$TrackingLinkFromJson(json);

  static const toJsonFactory = _$TrackingLinkToJson;
  Map<String, dynamic> toJson() => _$TrackingLinkToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'url', includeIfNull: false, defaultValue: 'default')
  final String? url;
  @JsonKey(
      name: 'tracking_number', includeIfNull: false, defaultValue: 'default')
  final String trackingNumber;
  @JsonKey(
      name: 'fulfillment_id', includeIfNull: false, defaultValue: 'default')
  final String fulfillmentId;
  @JsonKey(name: 'fulfillment', includeIfNull: false)
  final Fulfillment? fulfillment;
  @JsonKey(
      name: 'idempotency_key', includeIfNull: false, defaultValue: 'default')
  final String? idempotencyKey;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$TrackingLinkFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $TrackingLinkExtension on TrackingLink {
  TrackingLink copyWith(
      {String? id,
      String? url,
      String? trackingNumber,
      String? fulfillmentId,
      Fulfillment? fulfillment,
      String? idempotencyKey,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return TrackingLink(
        id: id ?? this.id,
        url: url ?? this.url,
        trackingNumber: trackingNumber ?? this.trackingNumber,
        fulfillmentId: fulfillmentId ?? this.fulfillmentId,
        fulfillment: fulfillment ?? this.fulfillment,
        idempotencyKey: idempotencyKey ?? this.idempotencyKey,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  TrackingLink copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? url,
      Wrapped<String>? trackingNumber,
      Wrapped<String>? fulfillmentId,
      Wrapped<Fulfillment?>? fulfillment,
      Wrapped<String?>? idempotencyKey,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return TrackingLink(
        id: (id != null ? id.value : this.id),
        url: (url != null ? url.value : this.url),
        trackingNumber: (trackingNumber != null
            ? trackingNumber.value
            : this.trackingNumber),
        fulfillmentId:
            (fulfillmentId != null ? fulfillmentId.value : this.fulfillmentId),
        fulfillment:
            (fulfillment != null ? fulfillment.value : this.fulfillment),
        idempotencyKey: (idempotencyKey != null
            ? idempotencyKey.value
            : this.idempotencyKey),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class UpdateStockLocationInput {
  const UpdateStockLocationInput({
    this.name,
    this.addressId,
    this.address,
    this.metadata,
  });

  factory UpdateStockLocationInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateStockLocationInputFromJson(json);

  static const toJsonFactory = _$UpdateStockLocationInputToJson;
  Map<String, dynamic> toJson() => _$UpdateStockLocationInputToJson(this);

  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'address_id', includeIfNull: false, defaultValue: 'default')
  final String? addressId;
  @JsonKey(name: 'address', includeIfNull: false)
  final StockLocationAddressInput? address;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$UpdateStockLocationInputFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $UpdateStockLocationInputExtension on UpdateStockLocationInput {
  UpdateStockLocationInput copyWith(
      {String? name,
      String? addressId,
      StockLocationAddressInput? address,
      Object? metadata}) {
    return UpdateStockLocationInput(
        name: name ?? this.name,
        addressId: addressId ?? this.addressId,
        address: address ?? this.address,
        metadata: metadata ?? this.metadata);
  }

  UpdateStockLocationInput copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? addressId,
      Wrapped<StockLocationAddressInput?>? address,
      Wrapped<Object?>? metadata}) {
    return UpdateStockLocationInput(
        name: (name != null ? name.value : this.name),
        addressId: (addressId != null ? addressId.value : this.addressId),
        address: (address != null ? address.value : this.address),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class User {
  const User({
    required this.id,
    required this.role,
    required this.email,
    required this.firstName,
    required this.lastName,
    required this.apiToken,
    required this.createdAt,
    required this.updatedAt,
    required this.deletedAt,
    required this.metadata,
  });

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);

  static const toJsonFactory = _$UserToJson;
  Map<String, dynamic> toJson() => _$UserToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
    name: 'role',
    includeIfNull: false,
    toJson: userRoleToJson,
    fromJson: userRoleRoleFromJson,
  )
  final enums.UserRole role;
  static enums.UserRole userRoleRoleFromJson(Object? value) =>
      userRoleFromJson(value, enums.UserRole.member);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String? firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String? lastName;
  @JsonKey(name: 'api_token', includeIfNull: false, defaultValue: 'default')
  final String? apiToken;
  @JsonKey(name: 'created_at', includeIfNull: false)
  final DateTime createdAt;
  @JsonKey(name: 'updated_at', includeIfNull: false)
  final DateTime updatedAt;
  @JsonKey(name: 'deleted_at', includeIfNull: false)
  final DateTime? deletedAt;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$UserFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $UserExtension on User {
  User copyWith(
      {String? id,
      enums.UserRole? role,
      String? email,
      String? firstName,
      String? lastName,
      String? apiToken,
      DateTime? createdAt,
      DateTime? updatedAt,
      DateTime? deletedAt,
      Object? metadata}) {
    return User(
        id: id ?? this.id,
        role: role ?? this.role,
        email: email ?? this.email,
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        apiToken: apiToken ?? this.apiToken,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        deletedAt: deletedAt ?? this.deletedAt,
        metadata: metadata ?? this.metadata);
  }

  User copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.UserRole>? role,
      Wrapped<String>? email,
      Wrapped<String?>? firstName,
      Wrapped<String?>? lastName,
      Wrapped<String?>? apiToken,
      Wrapped<DateTime>? createdAt,
      Wrapped<DateTime>? updatedAt,
      Wrapped<DateTime?>? deletedAt,
      Wrapped<Object?>? metadata}) {
    return User(
        id: (id != null ? id.value : this.id),
        role: (role != null ? role.value : this.role),
        email: (email != null ? email.value : this.email),
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        apiToken: (apiToken != null ? apiToken.value : this.apiToken),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        deletedAt: (deletedAt != null ? deletedAt.value : this.deletedAt),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class VariantInventory {
  const VariantInventory({
    required this.id,
    required this.inventory,
    required this.salesChannelAvailability,
  });

  factory VariantInventory.fromJson(Map<String, dynamic> json) =>
      _$VariantInventoryFromJson(json);

  static const toJsonFactory = _$VariantInventoryToJson;
  Map<String, dynamic> toJson() => _$VariantInventoryToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'inventory', includeIfNull: false)
  final ResponseInventoryItem inventory;
  @JsonKey(name: 'sales_channel_availability', includeIfNull: false)
  final List<VariantInventory$SalesChannelAvailability$Item>
      salesChannelAvailability;
  static const fromJsonFactory = _$VariantInventoryFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $VariantInventoryExtension on VariantInventory {
  VariantInventory copyWith(
      {String? id,
      ResponseInventoryItem? inventory,
      List<VariantInventory$SalesChannelAvailability$Item>?
          salesChannelAvailability}) {
    return VariantInventory(
        id: id ?? this.id,
        inventory: inventory ?? this.inventory,
        salesChannelAvailability:
            salesChannelAvailability ?? this.salesChannelAvailability);
  }

  VariantInventory copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<ResponseInventoryItem>? inventory,
      Wrapped<List<VariantInventory$SalesChannelAvailability$Item>>?
          salesChannelAvailability}) {
    return VariantInventory(
        id: (id != null ? id.value : this.id),
        inventory: (inventory != null ? inventory.value : this.inventory),
        salesChannelAvailability: (salesChannelAvailability != null
            ? salesChannelAvailability.value
            : this.salesChannelAvailability));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreAuthRes {
  const StoreAuthRes({
    required this.customer,
  });

  factory StoreAuthRes.fromJson(Map<String, dynamic> json) =>
      _$StoreAuthResFromJson(json);

  static const toJsonFactory = _$StoreAuthResToJson;
  Map<String, dynamic> toJson() => _$StoreAuthResToJson(this);

  @JsonKey(name: 'customer', includeIfNull: false)
  final Customer customer;
  static const fromJsonFactory = _$StoreAuthResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreAuthResExtension on StoreAuthRes {
  StoreAuthRes copyWith({Customer? customer}) {
    return StoreAuthRes(customer: customer ?? this.customer);
  }

  StoreAuthRes copyWithWrapped({Wrapped<Customer>? customer}) {
    return StoreAuthRes(
        customer: (customer != null ? customer.value : this.customer));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreBearerAuthRes {
  const StoreBearerAuthRes({
    this.accessToken,
  });

  factory StoreBearerAuthRes.fromJson(Map<String, dynamic> json) =>
      _$StoreBearerAuthResFromJson(json);

  static const toJsonFactory = _$StoreBearerAuthResToJson;
  Map<String, dynamic> toJson() => _$StoreBearerAuthResToJson(this);

  @JsonKey(name: 'access_token', includeIfNull: false, defaultValue: 'default')
  final String? accessToken;
  static const fromJsonFactory = _$StoreBearerAuthResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreBearerAuthResExtension on StoreBearerAuthRes {
  StoreBearerAuthRes copyWith({String? accessToken}) {
    return StoreBearerAuthRes(accessToken: accessToken ?? this.accessToken);
  }

  StoreBearerAuthRes copyWithWrapped({Wrapped<String?>? accessToken}) {
    return StoreBearerAuthRes(
        accessToken:
            (accessToken != null ? accessToken.value : this.accessToken));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCartShippingOptionsListRes {
  const StoreCartShippingOptionsListRes({
    required this.shippingOptions,
  });

  factory StoreCartShippingOptionsListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreCartShippingOptionsListResFromJson(json);

  static const toJsonFactory = _$StoreCartShippingOptionsListResToJson;
  Map<String, dynamic> toJson() =>
      _$StoreCartShippingOptionsListResToJson(this);

  @JsonKey(
      name: 'shipping_options',
      includeIfNull: false,
      defaultValue: <PricedShippingOption>[])
  final List<PricedShippingOption> shippingOptions;
  static const fromJsonFactory = _$StoreCartShippingOptionsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCartShippingOptionsListResExtension
    on StoreCartShippingOptionsListRes {
  StoreCartShippingOptionsListRes copyWith(
      {List<PricedShippingOption>? shippingOptions}) {
    return StoreCartShippingOptionsListRes(
        shippingOptions: shippingOptions ?? this.shippingOptions);
  }

  StoreCartShippingOptionsListRes copyWithWrapped(
      {Wrapped<List<PricedShippingOption>>? shippingOptions}) {
    return StoreCartShippingOptionsListRes(
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCartsRes {
  const StoreCartsRes({
    required this.cart,
  });

  factory StoreCartsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreCartsResFromJson(json);

  static const toJsonFactory = _$StoreCartsResToJson;
  Map<String, dynamic> toJson() => _$StoreCartsResToJson(this);

  @JsonKey(name: 'cart', includeIfNull: false)
  final Cart cart;
  static const fromJsonFactory = _$StoreCartsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCartsResExtension on StoreCartsRes {
  StoreCartsRes copyWith({Cart? cart}) {
    return StoreCartsRes(cart: cart ?? this.cart);
  }

  StoreCartsRes copyWithWrapped({Wrapped<Cart>? cart}) {
    return StoreCartsRes(cart: (cart != null ? cart.value : this.cart));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCollectionsListRes {
  const StoreCollectionsListRes({
    required this.collections,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory StoreCollectionsListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreCollectionsListResFromJson(json);

  static const toJsonFactory = _$StoreCollectionsListResToJson;
  Map<String, dynamic> toJson() => _$StoreCollectionsListResToJson(this);

  @JsonKey(
      name: 'collections',
      includeIfNull: false,
      defaultValue: <ProductCollection>[])
  final List<ProductCollection> collections;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$StoreCollectionsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCollectionsListResExtension on StoreCollectionsListRes {
  StoreCollectionsListRes copyWith(
      {List<ProductCollection>? collections,
      int? count,
      int? offset,
      int? limit}) {
    return StoreCollectionsListRes(
        collections: collections ?? this.collections,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  StoreCollectionsListRes copyWithWrapped(
      {Wrapped<List<ProductCollection>>? collections,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return StoreCollectionsListRes(
        collections:
            (collections != null ? collections.value : this.collections),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCollectionsRes {
  const StoreCollectionsRes({
    required this.collection,
  });

  factory StoreCollectionsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreCollectionsResFromJson(json);

  static const toJsonFactory = _$StoreCollectionsResToJson;
  Map<String, dynamic> toJson() => _$StoreCollectionsResToJson(this);

  @JsonKey(name: 'collection', includeIfNull: false)
  final ProductCollection collection;
  static const fromJsonFactory = _$StoreCollectionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCollectionsResExtension on StoreCollectionsRes {
  StoreCollectionsRes copyWith({ProductCollection? collection}) {
    return StoreCollectionsRes(collection: collection ?? this.collection);
  }

  StoreCollectionsRes copyWithWrapped(
      {Wrapped<ProductCollection>? collection}) {
    return StoreCollectionsRes(
        collection: (collection != null ? collection.value : this.collection));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCompleteCartRes {
  const StoreCompleteCartRes({
    required this.type,
    required this.data,
  });

  factory StoreCompleteCartRes.fromJson(Map<String, dynamic> json) =>
      _$StoreCompleteCartResFromJson(json);

  static const toJsonFactory = _$StoreCompleteCartResToJson;
  Map<String, dynamic> toJson() => _$StoreCompleteCartResToJson(this);

  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: storeCompleteCartResTypeToJson,
    fromJson: storeCompleteCartResTypeFromJson,
  )
  final enums.StoreCompleteCartResType type;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  static const fromJsonFactory = _$StoreCompleteCartResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCompleteCartResExtension on StoreCompleteCartRes {
  StoreCompleteCartRes copyWith(
      {enums.StoreCompleteCartResType? type, Object? data}) {
    return StoreCompleteCartRes(
        type: type ?? this.type, data: data ?? this.data);
  }

  StoreCompleteCartRes copyWithWrapped(
      {Wrapped<enums.StoreCompleteCartResType>? type, Wrapped<Object>? data}) {
    return StoreCompleteCartRes(
        type: (type != null ? type.value : this.type),
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCustomersListOrdersRes {
  const StoreCustomersListOrdersRes({
    required this.orders,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory StoreCustomersListOrdersRes.fromJson(Map<String, dynamic> json) =>
      _$StoreCustomersListOrdersResFromJson(json);

  static const toJsonFactory = _$StoreCustomersListOrdersResToJson;
  Map<String, dynamic> toJson() => _$StoreCustomersListOrdersResToJson(this);

  @JsonKey(name: 'orders', includeIfNull: false, defaultValue: <Order>[])
  final List<Order> orders;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$StoreCustomersListOrdersResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCustomersListOrdersResExtension on StoreCustomersListOrdersRes {
  StoreCustomersListOrdersRes copyWith(
      {List<Order>? orders, int? count, int? offset, int? limit}) {
    return StoreCustomersListOrdersRes(
        orders: orders ?? this.orders,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  StoreCustomersListOrdersRes copyWithWrapped(
      {Wrapped<List<Order>>? orders,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return StoreCustomersListOrdersRes(
        orders: (orders != null ? orders.value : this.orders),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCustomersListPaymentMethodsRes {
  const StoreCustomersListPaymentMethodsRes({
    required this.paymentMethods,
  });

  factory StoreCustomersListPaymentMethodsRes.fromJson(
          Map<String, dynamic> json) =>
      _$StoreCustomersListPaymentMethodsResFromJson(json);

  static const toJsonFactory = _$StoreCustomersListPaymentMethodsResToJson;
  Map<String, dynamic> toJson() =>
      _$StoreCustomersListPaymentMethodsResToJson(this);

  @JsonKey(name: 'payment_methods', includeIfNull: false)
  final List<StoreCustomersListPaymentMethodsRes$PaymentMethods$Item>
      paymentMethods;
  static const fromJsonFactory = _$StoreCustomersListPaymentMethodsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCustomersListPaymentMethodsResExtension
    on StoreCustomersListPaymentMethodsRes {
  StoreCustomersListPaymentMethodsRes copyWith(
      {List<StoreCustomersListPaymentMethodsRes$PaymentMethods$Item>?
          paymentMethods}) {
    return StoreCustomersListPaymentMethodsRes(
        paymentMethods: paymentMethods ?? this.paymentMethods);
  }

  StoreCustomersListPaymentMethodsRes copyWithWrapped(
      {Wrapped<List<StoreCustomersListPaymentMethodsRes$PaymentMethods$Item>>?
          paymentMethods}) {
    return StoreCustomersListPaymentMethodsRes(
        paymentMethods: (paymentMethods != null
            ? paymentMethods.value
            : this.paymentMethods));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCustomersRes {
  const StoreCustomersRes({
    required this.customer,
  });

  factory StoreCustomersRes.fromJson(Map<String, dynamic> json) =>
      _$StoreCustomersResFromJson(json);

  static const toJsonFactory = _$StoreCustomersResToJson;
  Map<String, dynamic> toJson() => _$StoreCustomersResToJson(this);

  @JsonKey(name: 'customer', includeIfNull: false)
  final Customer customer;
  static const fromJsonFactory = _$StoreCustomersResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCustomersResExtension on StoreCustomersRes {
  StoreCustomersRes copyWith({Customer? customer}) {
    return StoreCustomersRes(customer: customer ?? this.customer);
  }

  StoreCustomersRes copyWithWrapped({Wrapped<Customer>? customer}) {
    return StoreCustomersRes(
        customer: (customer != null ? customer.value : this.customer));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCustomersResetPasswordRes {
  const StoreCustomersResetPasswordRes({
    required this.customer,
  });

  factory StoreCustomersResetPasswordRes.fromJson(Map<String, dynamic> json) =>
      _$StoreCustomersResetPasswordResFromJson(json);

  static const toJsonFactory = _$StoreCustomersResetPasswordResToJson;
  Map<String, dynamic> toJson() => _$StoreCustomersResetPasswordResToJson(this);

  @JsonKey(name: 'customer', includeIfNull: false)
  final Customer customer;
  static const fromJsonFactory = _$StoreCustomersResetPasswordResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCustomersResetPasswordResExtension
    on StoreCustomersResetPasswordRes {
  StoreCustomersResetPasswordRes copyWith({Customer? customer}) {
    return StoreCustomersResetPasswordRes(customer: customer ?? this.customer);
  }

  StoreCustomersResetPasswordRes copyWithWrapped(
      {Wrapped<Customer>? customer}) {
    return StoreCustomersResetPasswordRes(
        customer: (customer != null ? customer.value : this.customer));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreGetAuthEmailRes {
  const StoreGetAuthEmailRes({
    required this.exists,
  });

  factory StoreGetAuthEmailRes.fromJson(Map<String, dynamic> json) =>
      _$StoreGetAuthEmailResFromJson(json);

  static const toJsonFactory = _$StoreGetAuthEmailResToJson;
  Map<String, dynamic> toJson() => _$StoreGetAuthEmailResToJson(this);

  @JsonKey(name: 'exists', includeIfNull: false)
  final bool exists;
  static const fromJsonFactory = _$StoreGetAuthEmailResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreGetAuthEmailResExtension on StoreGetAuthEmailRes {
  StoreGetAuthEmailRes copyWith({bool? exists}) {
    return StoreGetAuthEmailRes(exists: exists ?? this.exists);
  }

  StoreGetAuthEmailRes copyWithWrapped({Wrapped<bool>? exists}) {
    return StoreGetAuthEmailRes(
        exists: (exists != null ? exists.value : this.exists));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreGetProductCategoriesCategoryRes {
  const StoreGetProductCategoriesCategoryRes({
    required this.productCategory,
  });

  factory StoreGetProductCategoriesCategoryRes.fromJson(
          Map<String, dynamic> json) =>
      _$StoreGetProductCategoriesCategoryResFromJson(json);

  static const toJsonFactory = _$StoreGetProductCategoriesCategoryResToJson;
  Map<String, dynamic> toJson() =>
      _$StoreGetProductCategoriesCategoryResToJson(this);

  @JsonKey(name: 'product_category', includeIfNull: false)
  final ProductCategory? productCategory;
  static const fromJsonFactory = _$StoreGetProductCategoriesCategoryResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreGetProductCategoriesCategoryResExtension
    on StoreGetProductCategoriesCategoryRes {
  StoreGetProductCategoriesCategoryRes copyWith(
      {ProductCategory? productCategory}) {
    return StoreGetProductCategoriesCategoryRes(
        productCategory: productCategory ?? this.productCategory);
  }

  StoreGetProductCategoriesCategoryRes copyWithWrapped(
      {Wrapped<ProductCategory?>? productCategory}) {
    return StoreGetProductCategoriesCategoryRes(
        productCategory: (productCategory != null
            ? productCategory.value
            : this.productCategory));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreGetProductCategoriesRes {
  const StoreGetProductCategoriesRes({
    required this.productCategories,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory StoreGetProductCategoriesRes.fromJson(Map<String, dynamic> json) =>
      _$StoreGetProductCategoriesResFromJson(json);

  static const toJsonFactory = _$StoreGetProductCategoriesResToJson;
  Map<String, dynamic> toJson() => _$StoreGetProductCategoriesResToJson(this);

  @JsonKey(
      name: 'product_categories',
      includeIfNull: false,
      defaultValue: <ProductCategory>[])
  final List<ProductCategory> productCategories;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$StoreGetProductCategoriesResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreGetProductCategoriesResExtension
    on StoreGetProductCategoriesRes {
  StoreGetProductCategoriesRes copyWith(
      {List<ProductCategory>? productCategories,
      int? count,
      int? offset,
      int? limit}) {
    return StoreGetProductCategoriesRes(
        productCategories: productCategories ?? this.productCategories,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  StoreGetProductCategoriesRes copyWithWrapped(
      {Wrapped<List<ProductCategory>>? productCategories,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return StoreGetProductCategoriesRes(
        productCategories: (productCategories != null
            ? productCategories.value
            : this.productCategories),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreGiftCardsRes {
  const StoreGiftCardsRes({
    required this.giftCard,
  });

  factory StoreGiftCardsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreGiftCardsResFromJson(json);

  static const toJsonFactory = _$StoreGiftCardsResToJson;
  Map<String, dynamic> toJson() => _$StoreGiftCardsResToJson(this);

  @JsonKey(name: 'gift_card', includeIfNull: false)
  final GiftCard? giftCard;
  static const fromJsonFactory = _$StoreGiftCardsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreGiftCardsResExtension on StoreGiftCardsRes {
  StoreGiftCardsRes copyWith({GiftCard? giftCard}) {
    return StoreGiftCardsRes(giftCard: giftCard ?? this.giftCard);
  }

  StoreGiftCardsRes copyWithWrapped({Wrapped<GiftCard?>? giftCard}) {
    return StoreGiftCardsRes(
        giftCard: (giftCard != null ? giftCard.value : this.giftCard));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreOrderEditsRes {
  const StoreOrderEditsRes({
    required this.orderEdit,
  });

  factory StoreOrderEditsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreOrderEditsResFromJson(json);

  static const toJsonFactory = _$StoreOrderEditsResToJson;
  Map<String, dynamic> toJson() => _$StoreOrderEditsResToJson(this);

  @JsonKey(name: 'order_edit', includeIfNull: false)
  final OrderEdit? orderEdit;
  static const fromJsonFactory = _$StoreOrderEditsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreOrderEditsResExtension on StoreOrderEditsRes {
  StoreOrderEditsRes copyWith({OrderEdit? orderEdit}) {
    return StoreOrderEditsRes(orderEdit: orderEdit ?? this.orderEdit);
  }

  StoreOrderEditsRes copyWithWrapped({Wrapped<OrderEdit?>? orderEdit}) {
    return StoreOrderEditsRes(
        orderEdit: (orderEdit != null ? orderEdit.value : this.orderEdit));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreOrdersRes {
  const StoreOrdersRes({
    required this.order,
  });

  factory StoreOrdersRes.fromJson(Map<String, dynamic> json) =>
      _$StoreOrdersResFromJson(json);

  static const toJsonFactory = _$StoreOrdersResToJson;
  Map<String, dynamic> toJson() => _$StoreOrdersResToJson(this);

  @JsonKey(name: 'order', includeIfNull: false)
  final Order order;
  static const fromJsonFactory = _$StoreOrdersResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreOrdersResExtension on StoreOrdersRes {
  StoreOrdersRes copyWith({Order? order}) {
    return StoreOrdersRes(order: order ?? this.order);
  }

  StoreOrdersRes copyWithWrapped({Wrapped<Order>? order}) {
    return StoreOrdersRes(order: (order != null ? order.value : this.order));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePaymentCollectionSessionsReq {
  const StorePaymentCollectionSessionsReq({
    required this.providerId,
  });

  factory StorePaymentCollectionSessionsReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePaymentCollectionSessionsReqFromJson(json);

  static const toJsonFactory = _$StorePaymentCollectionSessionsReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePaymentCollectionSessionsReqToJson(this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  static const fromJsonFactory = _$StorePaymentCollectionSessionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePaymentCollectionSessionsReqExtension
    on StorePaymentCollectionSessionsReq {
  StorePaymentCollectionSessionsReq copyWith({String? providerId}) {
    return StorePaymentCollectionSessionsReq(
        providerId: providerId ?? this.providerId);
  }

  StorePaymentCollectionSessionsReq copyWithWrapped(
      {Wrapped<String>? providerId}) {
    return StorePaymentCollectionSessionsReq(
        providerId: (providerId != null ? providerId.value : this.providerId));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePaymentCollectionsRes {
  const StorePaymentCollectionsRes({
    required this.paymentCollection,
  });

  factory StorePaymentCollectionsRes.fromJson(Map<String, dynamic> json) =>
      _$StorePaymentCollectionsResFromJson(json);

  static const toJsonFactory = _$StorePaymentCollectionsResToJson;
  Map<String, dynamic> toJson() => _$StorePaymentCollectionsResToJson(this);

  @JsonKey(name: 'payment_collection', includeIfNull: false)
  final PaymentCollection? paymentCollection;
  static const fromJsonFactory = _$StorePaymentCollectionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePaymentCollectionsResExtension on StorePaymentCollectionsRes {
  StorePaymentCollectionsRes copyWith({PaymentCollection? paymentCollection}) {
    return StorePaymentCollectionsRes(
        paymentCollection: paymentCollection ?? this.paymentCollection);
  }

  StorePaymentCollectionsRes copyWithWrapped(
      {Wrapped<PaymentCollection?>? paymentCollection}) {
    return StorePaymentCollectionsRes(
        paymentCollection: (paymentCollection != null
            ? paymentCollection.value
            : this.paymentCollection));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePaymentCollectionsSessionRes {
  const StorePaymentCollectionsSessionRes({
    required this.paymentSession,
  });

  factory StorePaymentCollectionsSessionRes.fromJson(
          Map<String, dynamic> json) =>
      _$StorePaymentCollectionsSessionResFromJson(json);

  static const toJsonFactory = _$StorePaymentCollectionsSessionResToJson;
  Map<String, dynamic> toJson() =>
      _$StorePaymentCollectionsSessionResToJson(this);

  @JsonKey(name: 'payment_session', includeIfNull: false)
  final PaymentSession? paymentSession;
  static const fromJsonFactory = _$StorePaymentCollectionsSessionResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePaymentCollectionsSessionResExtension
    on StorePaymentCollectionsSessionRes {
  StorePaymentCollectionsSessionRes copyWith({PaymentSession? paymentSession}) {
    return StorePaymentCollectionsSessionRes(
        paymentSession: paymentSession ?? this.paymentSession);
  }

  StorePaymentCollectionsSessionRes copyWithWrapped(
      {Wrapped<PaymentSession?>? paymentSession}) {
    return StorePaymentCollectionsSessionRes(
        paymentSession: (paymentSession != null
            ? paymentSession.value
            : this.paymentSession));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostAuthReq {
  const StorePostAuthReq({
    required this.email,
    required this.password,
  });

  factory StorePostAuthReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostAuthReqFromJson(json);

  static const toJsonFactory = _$StorePostAuthReqToJson;
  Map<String, dynamic> toJson() => _$StorePostAuthReqToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String password;
  static const fromJsonFactory = _$StorePostAuthReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostAuthReqExtension on StorePostAuthReq {
  StorePostAuthReq copyWith({String? email, String? password}) {
    return StorePostAuthReq(
        email: email ?? this.email, password: password ?? this.password);
  }

  StorePostAuthReq copyWithWrapped(
      {Wrapped<String>? email, Wrapped<String>? password}) {
    return StorePostAuthReq(
        email: (email != null ? email.value : this.email),
        password: (password != null ? password.value : this.password));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartReq {
  const StorePostCartReq({
    this.regionId,
    this.salesChannelId,
    this.countryCode,
    this.items,
    this.context,
  });

  factory StorePostCartReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostCartReqFromJson(json);

  static const toJsonFactory = _$StorePostCartReqToJson;
  Map<String, dynamic> toJson() => _$StorePostCartReqToJson(this);

  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(
      name: 'sales_channel_id', includeIfNull: false, defaultValue: 'default')
  final String? salesChannelId;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String? countryCode;
  @JsonKey(name: 'items', includeIfNull: false)
  final List<StorePostCartReq$Items$Item>? items;
  @JsonKey(name: 'context', includeIfNull: false)
  final Object? context;
  static const fromJsonFactory = _$StorePostCartReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartReqExtension on StorePostCartReq {
  StorePostCartReq copyWith(
      {String? regionId,
      String? salesChannelId,
      String? countryCode,
      List<StorePostCartReq$Items$Item>? items,
      Object? context}) {
    return StorePostCartReq(
        regionId: regionId ?? this.regionId,
        salesChannelId: salesChannelId ?? this.salesChannelId,
        countryCode: countryCode ?? this.countryCode,
        items: items ?? this.items,
        context: context ?? this.context);
  }

  StorePostCartReq copyWithWrapped(
      {Wrapped<String?>? regionId,
      Wrapped<String?>? salesChannelId,
      Wrapped<String?>? countryCode,
      Wrapped<List<StorePostCartReq$Items$Item>?>? items,
      Wrapped<Object?>? context}) {
    return StorePostCartReq(
        regionId: (regionId != null ? regionId.value : this.regionId),
        salesChannelId: (salesChannelId != null
            ? salesChannelId.value
            : this.salesChannelId),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        items: (items != null ? items.value : this.items),
        context: (context != null ? context.value : this.context));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartsCartLineItemsItemReq {
  const StorePostCartsCartLineItemsItemReq({
    required this.quantity,
    this.metadata,
  });

  factory StorePostCartsCartLineItemsItemReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCartsCartLineItemsItemReqFromJson(json);

  static const toJsonFactory = _$StorePostCartsCartLineItemsItemReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCartsCartLineItemsItemReqToJson(this);

  @JsonKey(name: 'quantity', includeIfNull: false)
  final double quantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$StorePostCartsCartLineItemsItemReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartsCartLineItemsItemReqExtension
    on StorePostCartsCartLineItemsItemReq {
  StorePostCartsCartLineItemsItemReq copyWith(
      {double? quantity, Object? metadata}) {
    return StorePostCartsCartLineItemsItemReq(
        quantity: quantity ?? this.quantity,
        metadata: metadata ?? this.metadata);
  }

  StorePostCartsCartLineItemsItemReq copyWithWrapped(
      {Wrapped<double>? quantity, Wrapped<Object?>? metadata}) {
    return StorePostCartsCartLineItemsItemReq(
        quantity: (quantity != null ? quantity.value : this.quantity),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartsCartLineItemsReq {
  const StorePostCartsCartLineItemsReq({
    required this.variantId,
    required this.quantity,
    this.metadata,
  });

  factory StorePostCartsCartLineItemsReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostCartsCartLineItemsReqFromJson(json);

  static const toJsonFactory = _$StorePostCartsCartLineItemsReqToJson;
  Map<String, dynamic> toJson() => _$StorePostCartsCartLineItemsReqToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'quantity', includeIfNull: false)
  final double quantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$StorePostCartsCartLineItemsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartsCartLineItemsReqExtension
    on StorePostCartsCartLineItemsReq {
  StorePostCartsCartLineItemsReq copyWith(
      {String? variantId, double? quantity, Object? metadata}) {
    return StorePostCartsCartLineItemsReq(
        variantId: variantId ?? this.variantId,
        quantity: quantity ?? this.quantity,
        metadata: metadata ?? this.metadata);
  }

  StorePostCartsCartLineItemsReq copyWithWrapped(
      {Wrapped<String>? variantId,
      Wrapped<double>? quantity,
      Wrapped<Object?>? metadata}) {
    return StorePostCartsCartLineItemsReq(
        variantId: (variantId != null ? variantId.value : this.variantId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartsCartPaymentSessionReq {
  const StorePostCartsCartPaymentSessionReq({
    required this.providerId,
  });

  factory StorePostCartsCartPaymentSessionReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCartsCartPaymentSessionReqFromJson(json);

  static const toJsonFactory = _$StorePostCartsCartPaymentSessionReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCartsCartPaymentSessionReqToJson(this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  static const fromJsonFactory = _$StorePostCartsCartPaymentSessionReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartsCartPaymentSessionReqExtension
    on StorePostCartsCartPaymentSessionReq {
  StorePostCartsCartPaymentSessionReq copyWith({String? providerId}) {
    return StorePostCartsCartPaymentSessionReq(
        providerId: providerId ?? this.providerId);
  }

  StorePostCartsCartPaymentSessionReq copyWithWrapped(
      {Wrapped<String>? providerId}) {
    return StorePostCartsCartPaymentSessionReq(
        providerId: (providerId != null ? providerId.value : this.providerId));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartsCartPaymentSessionUpdateReq {
  const StorePostCartsCartPaymentSessionUpdateReq({
    required this.data,
  });

  factory StorePostCartsCartPaymentSessionUpdateReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCartsCartPaymentSessionUpdateReqFromJson(json);

  static const toJsonFactory =
      _$StorePostCartsCartPaymentSessionUpdateReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCartsCartPaymentSessionUpdateReqToJson(this);

  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  static const fromJsonFactory =
      _$StorePostCartsCartPaymentSessionUpdateReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartsCartPaymentSessionUpdateReqExtension
    on StorePostCartsCartPaymentSessionUpdateReq {
  StorePostCartsCartPaymentSessionUpdateReq copyWith({Object? data}) {
    return StorePostCartsCartPaymentSessionUpdateReq(data: data ?? this.data);
  }

  StorePostCartsCartPaymentSessionUpdateReq copyWithWrapped(
      {Wrapped<Object>? data}) {
    return StorePostCartsCartPaymentSessionUpdateReq(
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartsCartReq {
  const StorePostCartsCartReq({
    this.regionId,
    this.countryCode,
    this.email,
    this.salesChannelId,
    this.billingAddress,
    this.shippingAddress,
    this.giftCards,
    this.discounts,
    this.customerId,
    this.context,
  });

  factory StorePostCartsCartReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostCartsCartReqFromJson(json);

  static const toJsonFactory = _$StorePostCartsCartReqToJson;
  Map<String, dynamic> toJson() => _$StorePostCartsCartReqToJson(this);

  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'country_code', includeIfNull: false, defaultValue: 'default')
  final String? countryCode;
  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String? email;
  @JsonKey(
      name: 'sales_channel_id', includeIfNull: false, defaultValue: 'default')
  final String? salesChannelId;
  @JsonKey(name: 'billingAddress', includeIfNull: false)
  final dynamic billingAddress;
  @JsonKey(name: 'shippingAddress', includeIfNull: false)
  final dynamic shippingAddress;
  @JsonKey(name: 'gift_cards', includeIfNull: false)
  final List<StorePostCartsCartReq$GiftCards$Item>? giftCards;
  @JsonKey(name: 'discounts', includeIfNull: false)
  final List<StorePostCartsCartReq$Discounts$Item>? discounts;
  @JsonKey(name: 'customer_id', includeIfNull: false, defaultValue: 'default')
  final String? customerId;
  @JsonKey(name: 'context', includeIfNull: false)
  final Object? context;
  static const fromJsonFactory = _$StorePostCartsCartReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartsCartReqExtension on StorePostCartsCartReq {
  StorePostCartsCartReq copyWith(
      {String? regionId,
      String? countryCode,
      String? email,
      String? salesChannelId,
      dynamic billingAddress,
      dynamic shippingAddress,
      List<StorePostCartsCartReq$GiftCards$Item>? giftCards,
      List<StorePostCartsCartReq$Discounts$Item>? discounts,
      String? customerId,
      Object? context}) {
    return StorePostCartsCartReq(
        regionId: regionId ?? this.regionId,
        countryCode: countryCode ?? this.countryCode,
        email: email ?? this.email,
        salesChannelId: salesChannelId ?? this.salesChannelId,
        billingAddress: billingAddress ?? this.billingAddress,
        shippingAddress: shippingAddress ?? this.shippingAddress,
        giftCards: giftCards ?? this.giftCards,
        discounts: discounts ?? this.discounts,
        customerId: customerId ?? this.customerId,
        context: context ?? this.context);
  }

  StorePostCartsCartReq copyWithWrapped(
      {Wrapped<String?>? regionId,
      Wrapped<String?>? countryCode,
      Wrapped<String?>? email,
      Wrapped<String?>? salesChannelId,
      Wrapped<dynamic>? billingAddress,
      Wrapped<dynamic>? shippingAddress,
      Wrapped<List<StorePostCartsCartReq$GiftCards$Item>?>? giftCards,
      Wrapped<List<StorePostCartsCartReq$Discounts$Item>?>? discounts,
      Wrapped<String?>? customerId,
      Wrapped<Object?>? context}) {
    return StorePostCartsCartReq(
        regionId: (regionId != null ? regionId.value : this.regionId),
        countryCode:
            (countryCode != null ? countryCode.value : this.countryCode),
        email: (email != null ? email.value : this.email),
        salesChannelId: (salesChannelId != null
            ? salesChannelId.value
            : this.salesChannelId),
        billingAddress: (billingAddress != null
            ? billingAddress.value
            : this.billingAddress),
        shippingAddress: (shippingAddress != null
            ? shippingAddress.value
            : this.shippingAddress),
        giftCards: (giftCards != null ? giftCards.value : this.giftCards),
        discounts: (discounts != null ? discounts.value : this.discounts),
        customerId: (customerId != null ? customerId.value : this.customerId),
        context: (context != null ? context.value : this.context));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartsCartShippingMethodReq {
  const StorePostCartsCartShippingMethodReq({
    required this.optionId,
    this.data,
  });

  factory StorePostCartsCartShippingMethodReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCartsCartShippingMethodReqFromJson(json);

  static const toJsonFactory = _$StorePostCartsCartShippingMethodReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCartsCartShippingMethodReqToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object? data;
  static const fromJsonFactory = _$StorePostCartsCartShippingMethodReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartsCartShippingMethodReqExtension
    on StorePostCartsCartShippingMethodReq {
  StorePostCartsCartShippingMethodReq copyWith(
      {String? optionId, Object? data}) {
    return StorePostCartsCartShippingMethodReq(
        optionId: optionId ?? this.optionId, data: data ?? this.data);
  }

  StorePostCartsCartShippingMethodReq copyWithWrapped(
      {Wrapped<String>? optionId, Wrapped<Object?>? data}) {
    return StorePostCartsCartShippingMethodReq(
        optionId: (optionId != null ? optionId.value : this.optionId),
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCustomersCustomerAcceptClaimReq {
  const StorePostCustomersCustomerAcceptClaimReq({
    required this.token,
  });

  factory StorePostCustomersCustomerAcceptClaimReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCustomersCustomerAcceptClaimReqFromJson(json);

  static const toJsonFactory = _$StorePostCustomersCustomerAcceptClaimReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCustomersCustomerAcceptClaimReqToJson(this);

  @JsonKey(name: 'token', includeIfNull: false, defaultValue: 'default')
  final String token;
  static const fromJsonFactory =
      _$StorePostCustomersCustomerAcceptClaimReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCustomersCustomerAcceptClaimReqExtension
    on StorePostCustomersCustomerAcceptClaimReq {
  StorePostCustomersCustomerAcceptClaimReq copyWith({String? token}) {
    return StorePostCustomersCustomerAcceptClaimReq(token: token ?? this.token);
  }

  StorePostCustomersCustomerAcceptClaimReq copyWithWrapped(
      {Wrapped<String>? token}) {
    return StorePostCustomersCustomerAcceptClaimReq(
        token: (token != null ? token.value : this.token));
  }
}

typedef StorePostCustomersCustomerAddressesAddressReq = Object;

@JsonSerializable(explicitToJson: true)
class StorePostCustomersCustomerAddressesReq {
  const StorePostCustomersCustomerAddressesReq({
    required this.address,
  });

  factory StorePostCustomersCustomerAddressesReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCustomersCustomerAddressesReqFromJson(json);

  static const toJsonFactory = _$StorePostCustomersCustomerAddressesReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCustomersCustomerAddressesReqToJson(this);

  @JsonKey(name: 'address', includeIfNull: false)
  final AddressCreatePayload address;
  static const fromJsonFactory =
      _$StorePostCustomersCustomerAddressesReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCustomersCustomerAddressesReqExtension
    on StorePostCustomersCustomerAddressesReq {
  StorePostCustomersCustomerAddressesReq copyWith(
      {AddressCreatePayload? address}) {
    return StorePostCustomersCustomerAddressesReq(
        address: address ?? this.address);
  }

  StorePostCustomersCustomerAddressesReq copyWithWrapped(
      {Wrapped<AddressCreatePayload>? address}) {
    return StorePostCustomersCustomerAddressesReq(
        address: (address != null ? address.value : this.address));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCustomersCustomerOrderClaimReq {
  const StorePostCustomersCustomerOrderClaimReq({
    required this.orderIds,
  });

  factory StorePostCustomersCustomerOrderClaimReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCustomersCustomerOrderClaimReqFromJson(json);

  static const toJsonFactory = _$StorePostCustomersCustomerOrderClaimReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCustomersCustomerOrderClaimReqToJson(this);

  @JsonKey(name: 'order_ids', includeIfNull: false, defaultValue: <String>[])
  final List<String> orderIds;
  static const fromJsonFactory =
      _$StorePostCustomersCustomerOrderClaimReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCustomersCustomerOrderClaimReqExtension
    on StorePostCustomersCustomerOrderClaimReq {
  StorePostCustomersCustomerOrderClaimReq copyWith({List<String>? orderIds}) {
    return StorePostCustomersCustomerOrderClaimReq(
        orderIds: orderIds ?? this.orderIds);
  }

  StorePostCustomersCustomerOrderClaimReq copyWithWrapped(
      {Wrapped<List<String>>? orderIds}) {
    return StorePostCustomersCustomerOrderClaimReq(
        orderIds: (orderIds != null ? orderIds.value : this.orderIds));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCustomersCustomerPasswordTokenReq {
  const StorePostCustomersCustomerPasswordTokenReq({
    required this.email,
  });

  factory StorePostCustomersCustomerPasswordTokenReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCustomersCustomerPasswordTokenReqFromJson(json);

  static const toJsonFactory =
      _$StorePostCustomersCustomerPasswordTokenReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCustomersCustomerPasswordTokenReqToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  static const fromJsonFactory =
      _$StorePostCustomersCustomerPasswordTokenReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCustomersCustomerPasswordTokenReqExtension
    on StorePostCustomersCustomerPasswordTokenReq {
  StorePostCustomersCustomerPasswordTokenReq copyWith({String? email}) {
    return StorePostCustomersCustomerPasswordTokenReq(
        email: email ?? this.email);
  }

  StorePostCustomersCustomerPasswordTokenReq copyWithWrapped(
      {Wrapped<String>? email}) {
    return StorePostCustomersCustomerPasswordTokenReq(
        email: (email != null ? email.value : this.email));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCustomersCustomerReq {
  const StorePostCustomersCustomerReq({
    this.firstName,
    this.lastName,
    this.billingAddress,
    this.password,
    this.phone,
    this.email,
    this.metadata,
  });

  factory StorePostCustomersCustomerReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostCustomersCustomerReqFromJson(json);

  static const toJsonFactory = _$StorePostCustomersCustomerReqToJson;
  Map<String, dynamic> toJson() => _$StorePostCustomersCustomerReqToJson(this);

  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String? firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String? lastName;
  @JsonKey(name: 'billingAddress', includeIfNull: false)
  final dynamic billingAddress;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String? password;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String? email;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$StorePostCustomersCustomerReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCustomersCustomerReqExtension
    on StorePostCustomersCustomerReq {
  StorePostCustomersCustomerReq copyWith(
      {String? firstName,
      String? lastName,
      dynamic billingAddress,
      String? password,
      String? phone,
      String? email,
      Object? metadata}) {
    return StorePostCustomersCustomerReq(
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        billingAddress: billingAddress ?? this.billingAddress,
        password: password ?? this.password,
        phone: phone ?? this.phone,
        email: email ?? this.email,
        metadata: metadata ?? this.metadata);
  }

  StorePostCustomersCustomerReq copyWithWrapped(
      {Wrapped<String?>? firstName,
      Wrapped<String?>? lastName,
      Wrapped<dynamic>? billingAddress,
      Wrapped<String?>? password,
      Wrapped<String?>? phone,
      Wrapped<String?>? email,
      Wrapped<Object?>? metadata}) {
    return StorePostCustomersCustomerReq(
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        billingAddress: (billingAddress != null
            ? billingAddress.value
            : this.billingAddress),
        password: (password != null ? password.value : this.password),
        phone: (phone != null ? phone.value : this.phone),
        email: (email != null ? email.value : this.email),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCustomersReq {
  const StorePostCustomersReq({
    required this.firstName,
    required this.lastName,
    required this.email,
    required this.password,
    this.phone,
  });

  factory StorePostCustomersReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostCustomersReqFromJson(json);

  static const toJsonFactory = _$StorePostCustomersReqToJson;
  Map<String, dynamic> toJson() => _$StorePostCustomersReqToJson(this);

  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String lastName;
  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String password;
  @JsonKey(name: 'phone', includeIfNull: false, defaultValue: 'default')
  final String? phone;
  static const fromJsonFactory = _$StorePostCustomersReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCustomersReqExtension on StorePostCustomersReq {
  StorePostCustomersReq copyWith(
      {String? firstName,
      String? lastName,
      String? email,
      String? password,
      String? phone}) {
    return StorePostCustomersReq(
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        email: email ?? this.email,
        password: password ?? this.password,
        phone: phone ?? this.phone);
  }

  StorePostCustomersReq copyWithWrapped(
      {Wrapped<String>? firstName,
      Wrapped<String>? lastName,
      Wrapped<String>? email,
      Wrapped<String>? password,
      Wrapped<String?>? phone}) {
    return StorePostCustomersReq(
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        email: (email != null ? email.value : this.email),
        password: (password != null ? password.value : this.password),
        phone: (phone != null ? phone.value : this.phone));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCustomersResetPasswordReq {
  const StorePostCustomersResetPasswordReq({
    required this.email,
    required this.password,
    required this.token,
  });

  factory StorePostCustomersResetPasswordReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCustomersResetPasswordReqFromJson(json);

  static const toJsonFactory = _$StorePostCustomersResetPasswordReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCustomersResetPasswordReqToJson(this);

  @JsonKey(name: 'email', includeIfNull: false, defaultValue: 'default')
  final String email;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String password;
  @JsonKey(name: 'token', includeIfNull: false, defaultValue: 'default')
  final String token;
  static const fromJsonFactory = _$StorePostCustomersResetPasswordReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCustomersResetPasswordReqExtension
    on StorePostCustomersResetPasswordReq {
  StorePostCustomersResetPasswordReq copyWith(
      {String? email, String? password, String? token}) {
    return StorePostCustomersResetPasswordReq(
        email: email ?? this.email,
        password: password ?? this.password,
        token: token ?? this.token);
  }

  StorePostCustomersResetPasswordReq copyWithWrapped(
      {Wrapped<String>? email,
      Wrapped<String>? password,
      Wrapped<String>? token}) {
    return StorePostCustomersResetPasswordReq(
        email: (email != null ? email.value : this.email),
        password: (password != null ? password.value : this.password),
        token: (token != null ? token.value : this.token));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostOrderEditsOrderEditDecline {
  const StorePostOrderEditsOrderEditDecline({
    this.declinedReason,
  });

  factory StorePostOrderEditsOrderEditDecline.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostOrderEditsOrderEditDeclineFromJson(json);

  static const toJsonFactory = _$StorePostOrderEditsOrderEditDeclineToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostOrderEditsOrderEditDeclineToJson(this);

  @JsonKey(
      name: 'declined_reason', includeIfNull: false, defaultValue: 'default')
  final String? declinedReason;
  static const fromJsonFactory = _$StorePostOrderEditsOrderEditDeclineFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostOrderEditsOrderEditDeclineExtension
    on StorePostOrderEditsOrderEditDecline {
  StorePostOrderEditsOrderEditDecline copyWith({String? declinedReason}) {
    return StorePostOrderEditsOrderEditDecline(
        declinedReason: declinedReason ?? this.declinedReason);
  }

  StorePostOrderEditsOrderEditDecline copyWithWrapped(
      {Wrapped<String?>? declinedReason}) {
    return StorePostOrderEditsOrderEditDecline(
        declinedReason: (declinedReason != null
            ? declinedReason.value
            : this.declinedReason));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostPaymentCollectionsBatchSessionsAuthorizeReq {
  const StorePostPaymentCollectionsBatchSessionsAuthorizeReq({
    required this.sessionIds,
  });

  factory StorePostPaymentCollectionsBatchSessionsAuthorizeReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostPaymentCollectionsBatchSessionsAuthorizeReqFromJson(json);

  static const toJsonFactory =
      _$StorePostPaymentCollectionsBatchSessionsAuthorizeReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostPaymentCollectionsBatchSessionsAuthorizeReqToJson(this);

  @JsonKey(name: 'session_ids', includeIfNull: false, defaultValue: <String>[])
  final List<String> sessionIds;
  static const fromJsonFactory =
      _$StorePostPaymentCollectionsBatchSessionsAuthorizeReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostPaymentCollectionsBatchSessionsAuthorizeReqExtension
    on StorePostPaymentCollectionsBatchSessionsAuthorizeReq {
  StorePostPaymentCollectionsBatchSessionsAuthorizeReq copyWith(
      {List<String>? sessionIds}) {
    return StorePostPaymentCollectionsBatchSessionsAuthorizeReq(
        sessionIds: sessionIds ?? this.sessionIds);
  }

  StorePostPaymentCollectionsBatchSessionsAuthorizeReq copyWithWrapped(
      {Wrapped<List<String>>? sessionIds}) {
    return StorePostPaymentCollectionsBatchSessionsAuthorizeReq(
        sessionIds: (sessionIds != null ? sessionIds.value : this.sessionIds));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostPaymentCollectionsBatchSessionsReq {
  const StorePostPaymentCollectionsBatchSessionsReq({
    required this.sessions,
  });

  factory StorePostPaymentCollectionsBatchSessionsReq.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostPaymentCollectionsBatchSessionsReqFromJson(json);

  static const toJsonFactory =
      _$StorePostPaymentCollectionsBatchSessionsReqToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostPaymentCollectionsBatchSessionsReqToJson(this);

  @JsonKey(name: 'sessions', includeIfNull: false)
  final List<StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item>
      sessions;
  static const fromJsonFactory =
      _$StorePostPaymentCollectionsBatchSessionsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostPaymentCollectionsBatchSessionsReqExtension
    on StorePostPaymentCollectionsBatchSessionsReq {
  StorePostPaymentCollectionsBatchSessionsReq copyWith(
      {List<StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item>?
          sessions}) {
    return StorePostPaymentCollectionsBatchSessionsReq(
        sessions: sessions ?? this.sessions);
  }

  StorePostPaymentCollectionsBatchSessionsReq copyWithWrapped(
      {Wrapped<List<StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item>>?
          sessions}) {
    return StorePostPaymentCollectionsBatchSessionsReq(
        sessions: (sessions != null ? sessions.value : this.sessions));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostReturnsReq {
  const StorePostReturnsReq({
    required this.orderId,
    required this.items,
    this.returnShipping,
  });

  factory StorePostReturnsReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostReturnsReqFromJson(json);

  static const toJsonFactory = _$StorePostReturnsReqToJson;
  Map<String, dynamic> toJson() => _$StorePostReturnsReqToJson(this);

  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String orderId;
  @JsonKey(name: 'items', includeIfNull: false)
  final List<StorePostReturnsReq$Items$Item> items;
  @JsonKey(name: 'return_shipping', includeIfNull: false)
  final StorePostReturnsReq$ReturnShipping? returnShipping;
  static const fromJsonFactory = _$StorePostReturnsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostReturnsReqExtension on StorePostReturnsReq {
  StorePostReturnsReq copyWith(
      {String? orderId,
      List<StorePostReturnsReq$Items$Item>? items,
      StorePostReturnsReq$ReturnShipping? returnShipping}) {
    return StorePostReturnsReq(
        orderId: orderId ?? this.orderId,
        items: items ?? this.items,
        returnShipping: returnShipping ?? this.returnShipping);
  }

  StorePostReturnsReq copyWithWrapped(
      {Wrapped<String>? orderId,
      Wrapped<List<StorePostReturnsReq$Items$Item>>? items,
      Wrapped<StorePostReturnsReq$ReturnShipping?>? returnShipping}) {
    return StorePostReturnsReq(
        orderId: (orderId != null ? orderId.value : this.orderId),
        items: (items != null ? items.value : this.items),
        returnShipping: (returnShipping != null
            ? returnShipping.value
            : this.returnShipping));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostSearchReq {
  const StorePostSearchReq({
    this.q,
    this.offset,
    this.limit,
    this.filter,
  });

  factory StorePostSearchReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostSearchReqFromJson(json);

  static const toJsonFactory = _$StorePostSearchReqToJson;
  Map<String, dynamic> toJson() => _$StorePostSearchReqToJson(this);

  @JsonKey(name: 'q', includeIfNull: false, defaultValue: 'default')
  final String? q;
  @JsonKey(name: 'offset', includeIfNull: false)
  final double? offset;
  @JsonKey(name: 'limit', includeIfNull: false)
  final double? limit;
  @JsonKey(name: 'filter', includeIfNull: false)
  final dynamic filter;
  static const fromJsonFactory = _$StorePostSearchReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostSearchReqExtension on StorePostSearchReq {
  StorePostSearchReq copyWith(
      {String? q, double? offset, double? limit, dynamic filter}) {
    return StorePostSearchReq(
        q: q ?? this.q,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit,
        filter: filter ?? this.filter);
  }

  StorePostSearchReq copyWithWrapped(
      {Wrapped<String?>? q,
      Wrapped<double?>? offset,
      Wrapped<double?>? limit,
      Wrapped<dynamic>? filter}) {
    return StorePostSearchReq(
        q: (q != null ? q.value : this.q),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit),
        filter: (filter != null ? filter.value : this.filter));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostSearchRes {
  const StorePostSearchRes({
    required this.hits,
  });

  factory StorePostSearchRes.fromJson(Map<String, dynamic> json) =>
      _$StorePostSearchResFromJson(json);

  static const toJsonFactory = _$StorePostSearchResToJson;
  Map<String, dynamic> toJson() => _$StorePostSearchResToJson(this);

  @JsonKey(name: 'hits', includeIfNull: false, defaultValue: <Object>[])
  final List<Object> hits;
  static const fromJsonFactory = _$StorePostSearchResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostSearchResExtension on StorePostSearchRes {
  StorePostSearchRes copyWith({List<Object>? hits}) {
    return StorePostSearchRes(hits: hits ?? this.hits);
  }

  StorePostSearchRes copyWithWrapped({Wrapped<List<Object>>? hits}) {
    return StorePostSearchRes(hits: (hits != null ? hits.value : this.hits));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostSwapsReq {
  const StorePostSwapsReq({
    required this.orderId,
    required this.returnItems,
    this.returnShippingOption,
    required this.additionalItems,
  });

  factory StorePostSwapsReq.fromJson(Map<String, dynamic> json) =>
      _$StorePostSwapsReqFromJson(json);

  static const toJsonFactory = _$StorePostSwapsReqToJson;
  Map<String, dynamic> toJson() => _$StorePostSwapsReqToJson(this);

  @JsonKey(name: 'order_id', includeIfNull: false, defaultValue: 'default')
  final String orderId;
  @JsonKey(name: 'return_items', includeIfNull: false)
  final List<StorePostSwapsReq$ReturnItems$Item> returnItems;
  @JsonKey(
      name: 'return_shipping_option',
      includeIfNull: false,
      defaultValue: 'default')
  final String? returnShippingOption;
  @JsonKey(name: 'additional_items', includeIfNull: false)
  final List<StorePostSwapsReq$AdditionalItems$Item> additionalItems;
  static const fromJsonFactory = _$StorePostSwapsReqFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostSwapsReqExtension on StorePostSwapsReq {
  StorePostSwapsReq copyWith(
      {String? orderId,
      List<StorePostSwapsReq$ReturnItems$Item>? returnItems,
      String? returnShippingOption,
      List<StorePostSwapsReq$AdditionalItems$Item>? additionalItems}) {
    return StorePostSwapsReq(
        orderId: orderId ?? this.orderId,
        returnItems: returnItems ?? this.returnItems,
        returnShippingOption: returnShippingOption ?? this.returnShippingOption,
        additionalItems: additionalItems ?? this.additionalItems);
  }

  StorePostSwapsReq copyWithWrapped(
      {Wrapped<String>? orderId,
      Wrapped<List<StorePostSwapsReq$ReturnItems$Item>>? returnItems,
      Wrapped<String?>? returnShippingOption,
      Wrapped<List<StorePostSwapsReq$AdditionalItems$Item>>? additionalItems}) {
    return StorePostSwapsReq(
        orderId: (orderId != null ? orderId.value : this.orderId),
        returnItems:
            (returnItems != null ? returnItems.value : this.returnItems),
        returnShippingOption: (returnShippingOption != null
            ? returnShippingOption.value
            : this.returnShippingOption),
        additionalItems: (additionalItems != null
            ? additionalItems.value
            : this.additionalItems));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreProductTagsListRes {
  const StoreProductTagsListRes({
    required this.productTags,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory StoreProductTagsListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreProductTagsListResFromJson(json);

  static const toJsonFactory = _$StoreProductTagsListResToJson;
  Map<String, dynamic> toJson() => _$StoreProductTagsListResToJson(this);

  @JsonKey(
      name: 'product_tags', includeIfNull: false, defaultValue: <ProductTag>[])
  final List<ProductTag> productTags;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$StoreProductTagsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreProductTagsListResExtension on StoreProductTagsListRes {
  StoreProductTagsListRes copyWith(
      {List<ProductTag>? productTags, int? count, int? offset, int? limit}) {
    return StoreProductTagsListRes(
        productTags: productTags ?? this.productTags,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  StoreProductTagsListRes copyWithWrapped(
      {Wrapped<List<ProductTag>>? productTags,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return StoreProductTagsListRes(
        productTags:
            (productTags != null ? productTags.value : this.productTags),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreProductTypesListRes {
  const StoreProductTypesListRes({
    required this.productTypes,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory StoreProductTypesListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreProductTypesListResFromJson(json);

  static const toJsonFactory = _$StoreProductTypesListResToJson;
  Map<String, dynamic> toJson() => _$StoreProductTypesListResToJson(this);

  @JsonKey(
      name: 'product_types',
      includeIfNull: false,
      defaultValue: <ProductType>[])
  final List<ProductType> productTypes;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$StoreProductTypesListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreProductTypesListResExtension on StoreProductTypesListRes {
  StoreProductTypesListRes copyWith(
      {List<ProductType>? productTypes, int? count, int? offset, int? limit}) {
    return StoreProductTypesListRes(
        productTypes: productTypes ?? this.productTypes,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  StoreProductTypesListRes copyWithWrapped(
      {Wrapped<List<ProductType>>? productTypes,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return StoreProductTypesListRes(
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreProductsListRes {
  const StoreProductsListRes({
    required this.products,
    required this.count,
    required this.offset,
    required this.limit,
  });

  factory StoreProductsListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreProductsListResFromJson(json);

  static const toJsonFactory = _$StoreProductsListResToJson;
  Map<String, dynamic> toJson() => _$StoreProductsListResToJson(this);

  @JsonKey(
      name: 'products', includeIfNull: false, defaultValue: <PricedProduct>[])
  final List<PricedProduct> products;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int limit;
  static const fromJsonFactory = _$StoreProductsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreProductsListResExtension on StoreProductsListRes {
  StoreProductsListRes copyWith(
      {List<PricedProduct>? products, int? count, int? offset, int? limit}) {
    return StoreProductsListRes(
        products: products ?? this.products,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  StoreProductsListRes copyWithWrapped(
      {Wrapped<List<PricedProduct>>? products,
      Wrapped<int>? count,
      Wrapped<int>? offset,
      Wrapped<int>? limit}) {
    return StoreProductsListRes(
        products: (products != null ? products.value : this.products),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreProductsRes {
  const StoreProductsRes({
    required this.product,
  });

  factory StoreProductsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreProductsResFromJson(json);

  static const toJsonFactory = _$StoreProductsResToJson;
  Map<String, dynamic> toJson() => _$StoreProductsResToJson(this);

  @JsonKey(name: 'product', includeIfNull: false)
  final PricedProduct product;
  static const fromJsonFactory = _$StoreProductsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreProductsResExtension on StoreProductsRes {
  StoreProductsRes copyWith({PricedProduct? product}) {
    return StoreProductsRes(product: product ?? this.product);
  }

  StoreProductsRes copyWithWrapped({Wrapped<PricedProduct>? product}) {
    return StoreProductsRes(
        product: (product != null ? product.value : this.product));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreRegionsListRes {
  const StoreRegionsListRes({
    required this.regions,
    this.count,
    this.offset,
    this.limit,
  });

  factory StoreRegionsListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreRegionsListResFromJson(json);

  static const toJsonFactory = _$StoreRegionsListResToJson;
  Map<String, dynamic> toJson() => _$StoreRegionsListResToJson(this);

  @JsonKey(name: 'regions', includeIfNull: false, defaultValue: <Region>[])
  final List<Region> regions;
  @JsonKey(name: 'count', includeIfNull: false, defaultValue: 36)
  final int? count;
  @JsonKey(name: 'offset', includeIfNull: false, defaultValue: 36)
  final int? offset;
  @JsonKey(name: 'limit', includeIfNull: false, defaultValue: 36)
  final int? limit;
  static const fromJsonFactory = _$StoreRegionsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreRegionsListResExtension on StoreRegionsListRes {
  StoreRegionsListRes copyWith(
      {List<Region>? regions, int? count, int? offset, int? limit}) {
    return StoreRegionsListRes(
        regions: regions ?? this.regions,
        count: count ?? this.count,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit);
  }

  StoreRegionsListRes copyWithWrapped(
      {Wrapped<List<Region>>? regions,
      Wrapped<int?>? count,
      Wrapped<int?>? offset,
      Wrapped<int?>? limit}) {
    return StoreRegionsListRes(
        regions: (regions != null ? regions.value : this.regions),
        count: (count != null ? count.value : this.count),
        offset: (offset != null ? offset.value : this.offset),
        limit: (limit != null ? limit.value : this.limit));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreRegionsRes {
  const StoreRegionsRes({
    required this.region,
  });

  factory StoreRegionsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreRegionsResFromJson(json);

  static const toJsonFactory = _$StoreRegionsResToJson;
  Map<String, dynamic> toJson() => _$StoreRegionsResToJson(this);

  @JsonKey(name: 'region', includeIfNull: false)
  final Region region;
  static const fromJsonFactory = _$StoreRegionsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreRegionsResExtension on StoreRegionsRes {
  StoreRegionsRes copyWith({Region? region}) {
    return StoreRegionsRes(region: region ?? this.region);
  }

  StoreRegionsRes copyWithWrapped({Wrapped<Region>? region}) {
    return StoreRegionsRes(
        region: (region != null ? region.value : this.region));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreReturnReasonsListRes {
  const StoreReturnReasonsListRes({
    required this.returnReasons,
  });

  factory StoreReturnReasonsListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreReturnReasonsListResFromJson(json);

  static const toJsonFactory = _$StoreReturnReasonsListResToJson;
  Map<String, dynamic> toJson() => _$StoreReturnReasonsListResToJson(this);

  @JsonKey(
      name: 'return_reasons',
      includeIfNull: false,
      defaultValue: <ReturnReason>[])
  final List<ReturnReason> returnReasons;
  static const fromJsonFactory = _$StoreReturnReasonsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreReturnReasonsListResExtension on StoreReturnReasonsListRes {
  StoreReturnReasonsListRes copyWith({List<ReturnReason>? returnReasons}) {
    return StoreReturnReasonsListRes(
        returnReasons: returnReasons ?? this.returnReasons);
  }

  StoreReturnReasonsListRes copyWithWrapped(
      {Wrapped<List<ReturnReason>>? returnReasons}) {
    return StoreReturnReasonsListRes(
        returnReasons:
            (returnReasons != null ? returnReasons.value : this.returnReasons));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreReturnReasonsRes {
  const StoreReturnReasonsRes({
    required this.returnReason,
  });

  factory StoreReturnReasonsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreReturnReasonsResFromJson(json);

  static const toJsonFactory = _$StoreReturnReasonsResToJson;
  Map<String, dynamic> toJson() => _$StoreReturnReasonsResToJson(this);

  @JsonKey(name: 'return_reason', includeIfNull: false)
  final ReturnReason? returnReason;
  static const fromJsonFactory = _$StoreReturnReasonsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreReturnReasonsResExtension on StoreReturnReasonsRes {
  StoreReturnReasonsRes copyWith({ReturnReason? returnReason}) {
    return StoreReturnReasonsRes(
        returnReason: returnReason ?? this.returnReason);
  }

  StoreReturnReasonsRes copyWithWrapped(
      {Wrapped<ReturnReason?>? returnReason}) {
    return StoreReturnReasonsRes(
        returnReason:
            (returnReason != null ? returnReason.value : this.returnReason));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreReturnsRes {
  const StoreReturnsRes({
    required this.$return,
  });

  factory StoreReturnsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreReturnsResFromJson(json);

  static const toJsonFactory = _$StoreReturnsResToJson;
  Map<String, dynamic> toJson() => _$StoreReturnsResToJson(this);

  @JsonKey(name: 'return', includeIfNull: false)
  final Return? $return;
  static const fromJsonFactory = _$StoreReturnsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreReturnsResExtension on StoreReturnsRes {
  StoreReturnsRes copyWith({Return? $return}) {
    return StoreReturnsRes($return: $return ?? this.$return);
  }

  StoreReturnsRes copyWithWrapped({Wrapped<Return?>? $return}) {
    return StoreReturnsRes(
        $return: ($return != null ? $return.value : this.$return));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreShippingOptionsListRes {
  const StoreShippingOptionsListRes({
    required this.shippingOptions,
  });

  factory StoreShippingOptionsListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreShippingOptionsListResFromJson(json);

  static const toJsonFactory = _$StoreShippingOptionsListResToJson;
  Map<String, dynamic> toJson() => _$StoreShippingOptionsListResToJson(this);

  @JsonKey(
      name: 'shipping_options',
      includeIfNull: false,
      defaultValue: <PricedShippingOption>[])
  final List<PricedShippingOption> shippingOptions;
  static const fromJsonFactory = _$StoreShippingOptionsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreShippingOptionsListResExtension on StoreShippingOptionsListRes {
  StoreShippingOptionsListRes copyWith(
      {List<PricedShippingOption>? shippingOptions}) {
    return StoreShippingOptionsListRes(
        shippingOptions: shippingOptions ?? this.shippingOptions);
  }

  StoreShippingOptionsListRes copyWithWrapped(
      {Wrapped<List<PricedShippingOption>>? shippingOptions}) {
    return StoreShippingOptionsListRes(
        shippingOptions: (shippingOptions != null
            ? shippingOptions.value
            : this.shippingOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreSwapsRes {
  const StoreSwapsRes({
    required this.swap,
  });

  factory StoreSwapsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreSwapsResFromJson(json);

  static const toJsonFactory = _$StoreSwapsResToJson;
  Map<String, dynamic> toJson() => _$StoreSwapsResToJson(this);

  @JsonKey(name: 'swap', includeIfNull: false)
  final Swap swap;
  static const fromJsonFactory = _$StoreSwapsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreSwapsResExtension on StoreSwapsRes {
  StoreSwapsRes copyWith({Swap? swap}) {
    return StoreSwapsRes(swap: swap ?? this.swap);
  }

  StoreSwapsRes copyWithWrapped({Wrapped<Swap>? swap}) {
    return StoreSwapsRes(swap: (swap != null ? swap.value : this.swap));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreVariantsListRes {
  const StoreVariantsListRes({
    required this.variants,
  });

  factory StoreVariantsListRes.fromJson(Map<String, dynamic> json) =>
      _$StoreVariantsListResFromJson(json);

  static const toJsonFactory = _$StoreVariantsListResToJson;
  Map<String, dynamic> toJson() => _$StoreVariantsListResToJson(this);

  @JsonKey(
      name: 'variants', includeIfNull: false, defaultValue: <PricedVariant>[])
  final List<PricedVariant> variants;
  static const fromJsonFactory = _$StoreVariantsListResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreVariantsListResExtension on StoreVariantsListRes {
  StoreVariantsListRes copyWith({List<PricedVariant>? variants}) {
    return StoreVariantsListRes(variants: variants ?? this.variants);
  }

  StoreVariantsListRes copyWithWrapped(
      {Wrapped<List<PricedVariant>>? variants}) {
    return StoreVariantsListRes(
        variants: (variants != null ? variants.value : this.variants));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreVariantsRes {
  const StoreVariantsRes({
    required this.variant,
  });

  factory StoreVariantsRes.fromJson(Map<String, dynamic> json) =>
      _$StoreVariantsResFromJson(json);

  static const toJsonFactory = _$StoreVariantsResToJson;
  Map<String, dynamic> toJson() => _$StoreVariantsResToJson(this);

  @JsonKey(name: 'variant', includeIfNull: false)
  final PricedVariant variant;
  static const fromJsonFactory = _$StoreVariantsResFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreVariantsResExtension on StoreVariantsRes {
  StoreVariantsRes copyWith({PricedVariant? variant}) {
    return StoreVariantsRes(variant: variant ?? this.variant);
  }

  StoreVariantsRes copyWithWrapped({Wrapped<PricedVariant>? variant}) {
    return StoreVariantsRes(
        variant: (variant != null ? variant.value : this.variant));
  }
}

@JsonSerializable(explicitToJson: true)
class $400Error$Response {
  const $400Error$Response();

  factory $400Error$Response.fromJson(Map<String, dynamic> json) =>
      _$$400Error$ResponseFromJson(json);

  static const toJsonFactory = _$$400Error$ResponseToJson;
  Map<String, dynamic> toJson() => _$$400Error$ResponseToJson(this);

  static const fromJsonFactory = _$$400Error$ResponseFromJson;

  @override
  String toString() => jsonEncode(this);
}

@JsonSerializable(explicitToJson: true)
class AdminUploadsPost$RequestBody {
  const AdminUploadsPost$RequestBody({
    this.files,
  });

  factory AdminUploadsPost$RequestBody.fromJson(Map<String, dynamic> json) =>
      _$AdminUploadsPost$RequestBodyFromJson(json);

  static const toJsonFactory = _$AdminUploadsPost$RequestBodyToJson;
  Map<String, dynamic> toJson() => _$AdminUploadsPost$RequestBodyToJson(this);

  @JsonKey(name: 'files', includeIfNull: false, defaultValue: 'default')
  final String? files;
  static const fromJsonFactory = _$AdminUploadsPost$RequestBodyFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUploadsPost$RequestBodyExtension
    on AdminUploadsPost$RequestBody {
  AdminUploadsPost$RequestBody copyWith({String? files}) {
    return AdminUploadsPost$RequestBody(files: files ?? this.files);
  }

  AdminUploadsPost$RequestBody copyWithWrapped({Wrapped<String?>? files}) {
    return AdminUploadsPost$RequestBody(
        files: (files != null ? files.value : this.files));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminUploadsProtectedPost$RequestBody {
  const AdminUploadsProtectedPost$RequestBody({
    this.files,
  });

  factory AdminUploadsProtectedPost$RequestBody.fromJson(
          Map<String, dynamic> json) =>
      _$AdminUploadsProtectedPost$RequestBodyFromJson(json);

  static const toJsonFactory = _$AdminUploadsProtectedPost$RequestBodyToJson;
  Map<String, dynamic> toJson() =>
      _$AdminUploadsProtectedPost$RequestBodyToJson(this);

  @JsonKey(name: 'files', includeIfNull: false, defaultValue: 'default')
  final String? files;
  static const fromJsonFactory =
      _$AdminUploadsProtectedPost$RequestBodyFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUploadsProtectedPost$RequestBodyExtension
    on AdminUploadsProtectedPost$RequestBody {
  AdminUploadsProtectedPost$RequestBody copyWith({String? files}) {
    return AdminUploadsProtectedPost$RequestBody(files: files ?? this.files);
  }

  AdminUploadsProtectedPost$RequestBody copyWithWrapped(
      {Wrapped<String?>? files}) {
    return AdminUploadsProtectedPost$RequestBody(
        files: (files != null ? files.value : this.files));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item {
  const AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item({
    required this.id,
  });

  factory AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$ItemExtension
    on AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item {
  AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item copyWith(
      {String? id}) {
    return AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item(
        id: id ?? this.id);
  }

  AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminDeleteCustomerGroupsGroupCustomerBatchReq$CustomerIds$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item {
  const AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item({
    required this.id,
  });

  factory AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$ItemExtension
    on AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item {
  AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item
      copyWith({String? id}) {
    return AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item(
        id: id ?? this.id);
  }

  AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminDeleteDiscountsDiscountConditionsConditionBatchReq$Resources$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item {
  const AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item({
    required this.id,
  });

  factory AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$ItemExtension
    on AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item {
  AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item copyWith(
      {String? id}) {
    return AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item(
        id: id ?? this.id);
  }

  AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminDeleteProductCategoriesCategoryProductsBatchReq$ProductIds$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item {
  const AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item({
    required this.id,
  });

  factory AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemExtension
    on AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item {
  AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item
      copyWith({String? id}) {
    return AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item(
        id: id ?? this.id);
  }

  AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminDeletePublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item {
  const AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item({
    required this.id,
  });

  factory AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$ItemExtension
    on AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item {
  AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item copyWith(
      {String? id}) {
    return AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item(
        id: id ?? this.id);
  }

  AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminDeleteSalesChannelsChannelProductsBatchReq$ProductIds$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item {
  const AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item({
    required this.providerId,
    required this.options,
  });

  factory AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$ItemToJson(
          this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'options', includeIfNull: false, defaultValue: <Object>[])
  final List<Object> options;
  static const fromJsonFactory =
      _$AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$ItemExtension
    on AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item {
  AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item copyWith(
      {String? providerId, List<Object>? options}) {
    return AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item(
        providerId: providerId ?? this.providerId,
        options: options ?? this.options);
  }

  AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item
      copyWithWrapped(
          {Wrapped<String>? providerId, Wrapped<List<Object>>? options}) {
    return AdminGetRegionsRegionFulfillmentOptionsRes$FulfillmentOptions$Item(
        providerId: (providerId != null ? providerId.value : this.providerId),
        options: (options != null ? options.value : this.options));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminInventoryItemsLocationLevelsRes$InventoryItem {
  const AdminInventoryItemsLocationLevelsRes$InventoryItem({
    required this.id,
    required this.locationLevels,
  });

  factory AdminInventoryItemsLocationLevelsRes$InventoryItem.fromJson(
          Map<String, dynamic> json) =>
      _$AdminInventoryItemsLocationLevelsRes$InventoryItemFromJson(json);

  static const toJsonFactory =
      _$AdminInventoryItemsLocationLevelsRes$InventoryItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminInventoryItemsLocationLevelsRes$InventoryItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(
      name: 'location_levels',
      includeIfNull: false,
      defaultValue: <InventoryLevelDTO>[])
  final List<InventoryLevelDTO> locationLevels;
  static const fromJsonFactory =
      _$AdminInventoryItemsLocationLevelsRes$InventoryItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminInventoryItemsLocationLevelsRes$InventoryItemExtension
    on AdminInventoryItemsLocationLevelsRes$InventoryItem {
  AdminInventoryItemsLocationLevelsRes$InventoryItem copyWith(
      {String? id, List<InventoryLevelDTO>? locationLevels}) {
    return AdminInventoryItemsLocationLevelsRes$InventoryItem(
        id: id ?? this.id,
        locationLevels: locationLevels ?? this.locationLevels);
  }

  AdminInventoryItemsLocationLevelsRes$InventoryItem copyWithWrapped(
      {Wrapped<String>? id, Wrapped<List<InventoryLevelDTO>>? locationLevels}) {
    return AdminInventoryItemsLocationLevelsRes$InventoryItem(
        id: (id != null ? id.value : this.id),
        locationLevels: (locationLevels != null
            ? locationLevels.value
            : this.locationLevels));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item {
  const AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item({
    required this.id,
  });

  factory AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$ItemExtension
    on AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item {
  AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item copyWith(
      {String? id}) {
    return AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item(
        id: id ?? this.id);
  }

  AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminPostCustomerGroupsGroupCustomersBatchReq$CustomerIds$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostCustomersCustomerReq$Groups$Item {
  const AdminPostCustomersCustomerReq$Groups$Item({
    required this.id,
  });

  factory AdminPostCustomersCustomerReq$Groups$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostCustomersCustomerReq$Groups$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostCustomersCustomerReq$Groups$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostCustomersCustomerReq$Groups$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostCustomersCustomerReq$Groups$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostCustomersCustomerReq$Groups$ItemExtension
    on AdminPostCustomersCustomerReq$Groups$Item {
  AdminPostCustomersCustomerReq$Groups$Item copyWith({String? id}) {
    return AdminPostCustomersCustomerReq$Groups$Item(id: id ?? this.id);
  }

  AdminPostCustomersCustomerReq$Groups$Item copyWithWrapped(
      {Wrapped<String>? id}) {
    return AdminPostCustomersCustomerReq$Groups$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item {
  const AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item({
    required this.id,
  });

  factory AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$ItemExtension
    on AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item {
  AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item copyWith(
      {String? id}) {
    return AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item(
        id: id ?? this.id);
  }

  AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminPostDiscountsDiscountConditionsConditionBatchReq$Resources$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsDiscountReq$Rule {
  const AdminPostDiscountsDiscountReq$Rule({
    required this.id,
    this.description,
    this.value,
    this.allocation,
    this.conditions,
  });

  factory AdminPostDiscountsDiscountReq$Rule.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDiscountsDiscountReq$RuleFromJson(json);

  static const toJsonFactory = _$AdminPostDiscountsDiscountReq$RuleToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDiscountsDiscountReq$RuleToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(name: 'value', includeIfNull: false)
  final double? value;
  @JsonKey(
    name: 'allocation',
    includeIfNull: false,
    toJson: adminPostDiscountsDiscountReq$RuleAllocationNullableToJson,
    fromJson: adminPostDiscountsDiscountReq$RuleAllocationNullableFromJson,
  )
  final enums.AdminPostDiscountsDiscountReq$RuleAllocation? allocation;
  @JsonKey(name: 'conditions', includeIfNull: false)
  final List<AdminPostDiscountsDiscountReq$Rule$Conditions$Item>? conditions;
  static const fromJsonFactory = _$AdminPostDiscountsDiscountReq$RuleFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsDiscountReq$RuleExtension
    on AdminPostDiscountsDiscountReq$Rule {
  AdminPostDiscountsDiscountReq$Rule copyWith(
      {String? id,
      String? description,
      double? value,
      enums.AdminPostDiscountsDiscountReq$RuleAllocation? allocation,
      List<AdminPostDiscountsDiscountReq$Rule$Conditions$Item>? conditions}) {
    return AdminPostDiscountsDiscountReq$Rule(
        id: id ?? this.id,
        description: description ?? this.description,
        value: value ?? this.value,
        allocation: allocation ?? this.allocation,
        conditions: conditions ?? this.conditions);
  }

  AdminPostDiscountsDiscountReq$Rule copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? description,
      Wrapped<double?>? value,
      Wrapped<enums.AdminPostDiscountsDiscountReq$RuleAllocation?>? allocation,
      Wrapped<List<AdminPostDiscountsDiscountReq$Rule$Conditions$Item>?>?
          conditions}) {
    return AdminPostDiscountsDiscountReq$Rule(
        id: (id != null ? id.value : this.id),
        description:
            (description != null ? description.value : this.description),
        value: (value != null ? value.value : this.value),
        allocation: (allocation != null ? allocation.value : this.allocation),
        conditions: (conditions != null ? conditions.value : this.conditions));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsReq$Rule {
  const AdminPostDiscountsReq$Rule({
    this.description,
    required this.type,
    required this.value,
    required this.allocation,
    this.conditions,
  });

  factory AdminPostDiscountsReq$Rule.fromJson(Map<String, dynamic> json) =>
      _$AdminPostDiscountsReq$RuleFromJson(json);

  static const toJsonFactory = _$AdminPostDiscountsReq$RuleToJson;
  Map<String, dynamic> toJson() => _$AdminPostDiscountsReq$RuleToJson(this);

  @JsonKey(name: 'description', includeIfNull: false, defaultValue: 'default')
  final String? description;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: adminPostDiscountsReq$RuleTypeToJson,
    fromJson: adminPostDiscountsReq$RuleTypeFromJson,
  )
  final enums.AdminPostDiscountsReq$RuleType type;
  @JsonKey(name: 'value', includeIfNull: false)
  final double value;
  @JsonKey(
    name: 'allocation',
    includeIfNull: false,
    toJson: adminPostDiscountsReq$RuleAllocationToJson,
    fromJson: adminPostDiscountsReq$RuleAllocationFromJson,
  )
  final enums.AdminPostDiscountsReq$RuleAllocation allocation;
  @JsonKey(name: 'conditions', includeIfNull: false)
  final List<AdminPostDiscountsReq$Rule$Conditions$Item>? conditions;
  static const fromJsonFactory = _$AdminPostDiscountsReq$RuleFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsReq$RuleExtension on AdminPostDiscountsReq$Rule {
  AdminPostDiscountsReq$Rule copyWith(
      {String? description,
      enums.AdminPostDiscountsReq$RuleType? type,
      double? value,
      enums.AdminPostDiscountsReq$RuleAllocation? allocation,
      List<AdminPostDiscountsReq$Rule$Conditions$Item>? conditions}) {
    return AdminPostDiscountsReq$Rule(
        description: description ?? this.description,
        type: type ?? this.type,
        value: value ?? this.value,
        allocation: allocation ?? this.allocation,
        conditions: conditions ?? this.conditions);
  }

  AdminPostDiscountsReq$Rule copyWithWrapped(
      {Wrapped<String?>? description,
      Wrapped<enums.AdminPostDiscountsReq$RuleType>? type,
      Wrapped<double>? value,
      Wrapped<enums.AdminPostDiscountsReq$RuleAllocation>? allocation,
      Wrapped<List<AdminPostDiscountsReq$Rule$Conditions$Item>?>? conditions}) {
    return AdminPostDiscountsReq$Rule(
        description:
            (description != null ? description.value : this.description),
        type: (type != null ? type.value : this.type),
        value: (value != null ? value.value : this.value),
        allocation: (allocation != null ? allocation.value : this.allocation),
        conditions: (conditions != null ? conditions.value : this.conditions));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersDraftOrderReq$Discounts$Item {
  const AdminPostDraftOrdersDraftOrderReq$Discounts$Item({
    required this.code,
  });

  factory AdminPostDraftOrdersDraftOrderReq$Discounts$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersDraftOrderReq$Discounts$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostDraftOrdersDraftOrderReq$Discounts$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDraftOrdersDraftOrderReq$Discounts$ItemToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  static const fromJsonFactory =
      _$AdminPostDraftOrdersDraftOrderReq$Discounts$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersDraftOrderReq$Discounts$ItemExtension
    on AdminPostDraftOrdersDraftOrderReq$Discounts$Item {
  AdminPostDraftOrdersDraftOrderReq$Discounts$Item copyWith({String? code}) {
    return AdminPostDraftOrdersDraftOrderReq$Discounts$Item(
        code: code ?? this.code);
  }

  AdminPostDraftOrdersDraftOrderReq$Discounts$Item copyWithWrapped(
      {Wrapped<String>? code}) {
    return AdminPostDraftOrdersDraftOrderReq$Discounts$Item(
        code: (code != null ? code.value : this.code));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersReq$Items$Item {
  const AdminPostDraftOrdersReq$Items$Item({
    this.variantId,
    this.unitPrice,
    this.title,
    required this.quantity,
    this.metadata,
  });

  factory AdminPostDraftOrdersReq$Items$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersReq$Items$ItemFromJson(json);

  static const toJsonFactory = _$AdminPostDraftOrdersReq$Items$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDraftOrdersReq$Items$ItemToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String? variantId;
  @JsonKey(name: 'unit_price', includeIfNull: false, defaultValue: 36)
  final int? unitPrice;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory = _$AdminPostDraftOrdersReq$Items$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersReq$Items$ItemExtension
    on AdminPostDraftOrdersReq$Items$Item {
  AdminPostDraftOrdersReq$Items$Item copyWith(
      {String? variantId,
      int? unitPrice,
      String? title,
      int? quantity,
      Object? metadata}) {
    return AdminPostDraftOrdersReq$Items$Item(
        variantId: variantId ?? this.variantId,
        unitPrice: unitPrice ?? this.unitPrice,
        title: title ?? this.title,
        quantity: quantity ?? this.quantity,
        metadata: metadata ?? this.metadata);
  }

  AdminPostDraftOrdersReq$Items$Item copyWithWrapped(
      {Wrapped<String?>? variantId,
      Wrapped<int?>? unitPrice,
      Wrapped<String?>? title,
      Wrapped<int>? quantity,
      Wrapped<Object?>? metadata}) {
    return AdminPostDraftOrdersReq$Items$Item(
        variantId: (variantId != null ? variantId.value : this.variantId),
        unitPrice: (unitPrice != null ? unitPrice.value : this.unitPrice),
        title: (title != null ? title.value : this.title),
        quantity: (quantity != null ? quantity.value : this.quantity),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersReq$Discounts$Item {
  const AdminPostDraftOrdersReq$Discounts$Item({
    required this.code,
  });

  factory AdminPostDraftOrdersReq$Discounts$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersReq$Discounts$ItemFromJson(json);

  static const toJsonFactory = _$AdminPostDraftOrdersReq$Discounts$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDraftOrdersReq$Discounts$ItemToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  static const fromJsonFactory =
      _$AdminPostDraftOrdersReq$Discounts$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersReq$Discounts$ItemExtension
    on AdminPostDraftOrdersReq$Discounts$Item {
  AdminPostDraftOrdersReq$Discounts$Item copyWith({String? code}) {
    return AdminPostDraftOrdersReq$Discounts$Item(code: code ?? this.code);
  }

  AdminPostDraftOrdersReq$Discounts$Item copyWithWrapped(
      {Wrapped<String>? code}) {
    return AdminPostDraftOrdersReq$Discounts$Item(
        code: (code != null ? code.value : this.code));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDraftOrdersReq$ShippingMethods$Item {
  const AdminPostDraftOrdersReq$ShippingMethods$Item({
    required this.optionId,
    this.data,
    this.price,
  });

  factory AdminPostDraftOrdersReq$ShippingMethods$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDraftOrdersReq$ShippingMethods$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostDraftOrdersReq$ShippingMethods$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDraftOrdersReq$ShippingMethods$ItemToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object? data;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int? price;
  static const fromJsonFactory =
      _$AdminPostDraftOrdersReq$ShippingMethods$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDraftOrdersReq$ShippingMethods$ItemExtension
    on AdminPostDraftOrdersReq$ShippingMethods$Item {
  AdminPostDraftOrdersReq$ShippingMethods$Item copyWith(
      {String? optionId, Object? data, int? price}) {
    return AdminPostDraftOrdersReq$ShippingMethods$Item(
        optionId: optionId ?? this.optionId,
        data: data ?? this.data,
        price: price ?? this.price);
  }

  AdminPostDraftOrdersReq$ShippingMethods$Item copyWithWrapped(
      {Wrapped<String>? optionId,
      Wrapped<Object?>? data,
      Wrapped<int?>? price}) {
    return AdminPostDraftOrdersReq$ShippingMethods$Item(
        optionId: (optionId != null ? optionId.value : this.optionId),
        data: (data != null ? data.value : this.data),
        price: (price != null ? price.value : this.price));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostInvitesInviteAcceptReq$User {
  const AdminPostInvitesInviteAcceptReq$User({
    required this.firstName,
    required this.lastName,
    required this.password,
  });

  factory AdminPostInvitesInviteAcceptReq$User.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostInvitesInviteAcceptReq$UserFromJson(json);

  static const toJsonFactory = _$AdminPostInvitesInviteAcceptReq$UserToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostInvitesInviteAcceptReq$UserToJson(this);

  @JsonKey(name: 'first_name', includeIfNull: false, defaultValue: 'default')
  final String firstName;
  @JsonKey(name: 'last_name', includeIfNull: false, defaultValue: 'default')
  final String lastName;
  @JsonKey(name: 'password', includeIfNull: false, defaultValue: 'default')
  final String password;
  static const fromJsonFactory = _$AdminPostInvitesInviteAcceptReq$UserFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostInvitesInviteAcceptReq$UserExtension
    on AdminPostInvitesInviteAcceptReq$User {
  AdminPostInvitesInviteAcceptReq$User copyWith(
      {String? firstName, String? lastName, String? password}) {
    return AdminPostInvitesInviteAcceptReq$User(
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        password: password ?? this.password);
  }

  AdminPostInvitesInviteAcceptReq$User copyWithWrapped(
      {Wrapped<String>? firstName,
      Wrapped<String>? lastName,
      Wrapped<String>? password}) {
    return AdminPostInvitesInviteAcceptReq$User(
        firstName: (firstName != null ? firstName.value : this.firstName),
        lastName: (lastName != null ? lastName.value : this.lastName),
        password: (password != null ? password.value : this.password));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item {
  const AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item({
    required this.id,
    this.itemId,
    this.quantity,
    this.note,
    this.reason,
    required this.tags,
    required this.images,
    this.metadata,
  });

  factory AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String? itemId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int? quantity;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  @JsonKey(
    name: 'reason',
    includeIfNull: false,
    toJson:
        adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonNullableToJson,
    fromJson:
        adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonNullableFromJson,
  )
  final enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason? reason;
  @JsonKey(name: 'tags', includeIfNull: false)
  final List<AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item> tags;
  @JsonKey(name: 'images', includeIfNull: false)
  final List<AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item>
      images;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemExtension
    on AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item {
  AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item copyWith(
      {String? id,
      String? itemId,
      int? quantity,
      String? note,
      enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason? reason,
      List<AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item>? tags,
      List<AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item>?
          images,
      Object? metadata}) {
    return AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item(
        id: id ?? this.id,
        itemId: itemId ?? this.itemId,
        quantity: quantity ?? this.quantity,
        note: note ?? this.note,
        reason: reason ?? this.reason,
        tags: tags ?? this.tags,
        images: images ?? this.images,
        metadata: metadata ?? this.metadata);
  }

  AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String?>? itemId,
      Wrapped<int?>? quantity,
      Wrapped<String?>? note,
      Wrapped<enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason?>?
          reason,
      Wrapped<
              List<
                  AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item>>?
          tags,
      Wrapped<
              List<
                  AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item>>?
          images,
      Wrapped<Object?>? metadata}) {
    return AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item(
        id: (id != null ? id.value : this.id),
        itemId: (itemId != null ? itemId.value : this.itemId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        note: (note != null ? note.value : this.note),
        reason: (reason != null ? reason.value : this.reason),
        tags: (tags != null ? tags.value : this.tags),
        images: (images != null ? images.value : this.images),
        metadata: (metadata != null ? metadata.value : this.metadata));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item {
  const AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item({
    this.id,
    this.optionId,
    this.price,
    this.data,
  });

  factory AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String? optionId;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int? price;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object? data;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$ItemExtension
    on AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item {
  AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item copyWith(
      {String? id, String? optionId, int? price, Object? data}) {
    return AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item(
        id: id ?? this.id,
        optionId: optionId ?? this.optionId,
        price: price ?? this.price,
        data: data ?? this.data);
  }

  AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String?>? optionId,
      Wrapped<int?>? price,
      Wrapped<Object?>? data}) {
    return AdminPostOrdersOrderClaimsClaimReq$ShippingMethods$Item(
        id: (id != null ? id.value : this.id),
        optionId: (optionId != null ? optionId.value : this.optionId),
        price: (price != null ? price.value : this.price),
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsReq$ClaimItems$Item {
  const AdminPostOrdersOrderClaimsReq$ClaimItems$Item({
    required this.itemId,
    required this.quantity,
    this.note,
    this.reason,
    this.tags,
    this.images,
  });

  factory AdminPostOrdersOrderClaimsReq$ClaimItems$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsReq$ClaimItems$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsReq$ClaimItems$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsReq$ClaimItems$ItemToJson(this);

  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  @JsonKey(
    name: 'reason',
    includeIfNull: false,
    toJson: adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonNullableToJson,
    fromJson:
        adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonNullableFromJson,
  )
  final enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason? reason;
  @JsonKey(name: 'tags', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? tags;
  @JsonKey(name: 'images', includeIfNull: false)
  final dynamic images;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsReq$ClaimItems$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsReq$ClaimItems$ItemExtension
    on AdminPostOrdersOrderClaimsReq$ClaimItems$Item {
  AdminPostOrdersOrderClaimsReq$ClaimItems$Item copyWith(
      {String? itemId,
      int? quantity,
      String? note,
      enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason? reason,
      List<Object>? tags,
      dynamic images}) {
    return AdminPostOrdersOrderClaimsReq$ClaimItems$Item(
        itemId: itemId ?? this.itemId,
        quantity: quantity ?? this.quantity,
        note: note ?? this.note,
        reason: reason ?? this.reason,
        tags: tags ?? this.tags,
        images: images ?? this.images);
  }

  AdminPostOrdersOrderClaimsReq$ClaimItems$Item copyWithWrapped(
      {Wrapped<String>? itemId,
      Wrapped<int>? quantity,
      Wrapped<String?>? note,
      Wrapped<enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason?>?
          reason,
      Wrapped<List<Object>?>? tags,
      Wrapped<dynamic>? images}) {
    return AdminPostOrdersOrderClaimsReq$ClaimItems$Item(
        itemId: (itemId != null ? itemId.value : this.itemId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        note: (note != null ? note.value : this.note),
        reason: (reason != null ? reason.value : this.reason),
        tags: (tags != null ? tags.value : this.tags),
        images: (images != null ? images.value : this.images));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsReq$ReturnShipping {
  const AdminPostOrdersOrderClaimsReq$ReturnShipping({
    this.optionId,
    this.price,
  });

  factory AdminPostOrdersOrderClaimsReq$ReturnShipping.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsReq$ReturnShippingFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsReq$ReturnShippingToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsReq$ReturnShippingToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String? optionId;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int? price;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsReq$ReturnShippingFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsReq$ReturnShippingExtension
    on AdminPostOrdersOrderClaimsReq$ReturnShipping {
  AdminPostOrdersOrderClaimsReq$ReturnShipping copyWith(
      {String? optionId, int? price}) {
    return AdminPostOrdersOrderClaimsReq$ReturnShipping(
        optionId: optionId ?? this.optionId, price: price ?? this.price);
  }

  AdminPostOrdersOrderClaimsReq$ReturnShipping copyWithWrapped(
      {Wrapped<String?>? optionId, Wrapped<int?>? price}) {
    return AdminPostOrdersOrderClaimsReq$ReturnShipping(
        optionId: (optionId != null ? optionId.value : this.optionId),
        price: (price != null ? price.value : this.price));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsReq$AdditionalItems$Item {
  const AdminPostOrdersOrderClaimsReq$AdditionalItems$Item({
    required this.variantId,
    required this.quantity,
  });

  factory AdminPostOrdersOrderClaimsReq$AdditionalItems$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsReq$AdditionalItems$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsReq$AdditionalItems$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsReq$AdditionalItems$ItemToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsReq$AdditionalItems$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsReq$AdditionalItems$ItemExtension
    on AdminPostOrdersOrderClaimsReq$AdditionalItems$Item {
  AdminPostOrdersOrderClaimsReq$AdditionalItems$Item copyWith(
      {String? variantId, int? quantity}) {
    return AdminPostOrdersOrderClaimsReq$AdditionalItems$Item(
        variantId: variantId ?? this.variantId,
        quantity: quantity ?? this.quantity);
  }

  AdminPostOrdersOrderClaimsReq$AdditionalItems$Item copyWithWrapped(
      {Wrapped<String>? variantId, Wrapped<int>? quantity}) {
    return AdminPostOrdersOrderClaimsReq$AdditionalItems$Item(
        variantId: (variantId != null ? variantId.value : this.variantId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsReq$ShippingMethods$Item {
  const AdminPostOrdersOrderClaimsReq$ShippingMethods$Item({
    this.id,
    this.optionId,
    this.price,
    this.data,
  });

  factory AdminPostOrdersOrderClaimsReq$ShippingMethods$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsReq$ShippingMethods$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsReq$ShippingMethods$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsReq$ShippingMethods$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String? optionId;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int? price;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object? data;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsReq$ShippingMethods$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsReq$ShippingMethods$ItemExtension
    on AdminPostOrdersOrderClaimsReq$ShippingMethods$Item {
  AdminPostOrdersOrderClaimsReq$ShippingMethods$Item copyWith(
      {String? id, String? optionId, int? price, Object? data}) {
    return AdminPostOrdersOrderClaimsReq$ShippingMethods$Item(
        id: id ?? this.id,
        optionId: optionId ?? this.optionId,
        price: price ?? this.price,
        data: data ?? this.data);
  }

  AdminPostOrdersOrderClaimsReq$ShippingMethods$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String?>? optionId,
      Wrapped<int?>? price,
      Wrapped<Object?>? data}) {
    return AdminPostOrdersOrderClaimsReq$ShippingMethods$Item(
        id: (id != null ? id.value : this.id),
        optionId: (optionId != null ? optionId.value : this.optionId),
        price: (price != null ? price.value : this.price),
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderFulfillmentsReq$Items$Item {
  const AdminPostOrdersOrderFulfillmentsReq$Items$Item({
    required this.itemId,
    required this.quantity,
  });

  factory AdminPostOrdersOrderFulfillmentsReq$Items$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderFulfillmentsReq$Items$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderFulfillmentsReq$Items$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderFulfillmentsReq$Items$ItemToJson(this);

  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderFulfillmentsReq$Items$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderFulfillmentsReq$Items$ItemExtension
    on AdminPostOrdersOrderFulfillmentsReq$Items$Item {
  AdminPostOrdersOrderFulfillmentsReq$Items$Item copyWith(
      {String? itemId, int? quantity}) {
    return AdminPostOrdersOrderFulfillmentsReq$Items$Item(
        itemId: itemId ?? this.itemId, quantity: quantity ?? this.quantity);
  }

  AdminPostOrdersOrderFulfillmentsReq$Items$Item copyWithWrapped(
      {Wrapped<String>? itemId, Wrapped<int>? quantity}) {
    return AdminPostOrdersOrderFulfillmentsReq$Items$Item(
        itemId: (itemId != null ? itemId.value : this.itemId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderReq$PaymentMethod {
  const AdminPostOrdersOrderReq$PaymentMethod({
    this.providerId,
    this.data,
  });

  factory AdminPostOrdersOrderReq$PaymentMethod.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderReq$PaymentMethodFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderReq$PaymentMethodToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderReq$PaymentMethodToJson(this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String? providerId;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object? data;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderReq$PaymentMethodFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderReq$PaymentMethodExtension
    on AdminPostOrdersOrderReq$PaymentMethod {
  AdminPostOrdersOrderReq$PaymentMethod copyWith(
      {String? providerId, Object? data}) {
    return AdminPostOrdersOrderReq$PaymentMethod(
        providerId: providerId ?? this.providerId, data: data ?? this.data);
  }

  AdminPostOrdersOrderReq$PaymentMethod copyWithWrapped(
      {Wrapped<String?>? providerId, Wrapped<Object?>? data}) {
    return AdminPostOrdersOrderReq$PaymentMethod(
        providerId: (providerId != null ? providerId.value : this.providerId),
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderReq$ShippingMethod {
  const AdminPostOrdersOrderReq$ShippingMethod({
    this.providerId,
    this.profileId,
    this.price,
    this.data,
    this.items,
  });

  factory AdminPostOrdersOrderReq$ShippingMethod.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderReq$ShippingMethodFromJson(json);

  static const toJsonFactory = _$AdminPostOrdersOrderReq$ShippingMethodToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderReq$ShippingMethodToJson(this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String? providerId;
  @JsonKey(name: 'profile_id', includeIfNull: false, defaultValue: 'default')
  final String? profileId;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int? price;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object? data;
  @JsonKey(name: 'items', includeIfNull: false, defaultValue: <LineItem>[])
  final List<LineItem>? items;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderReq$ShippingMethodFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderReq$ShippingMethodExtension
    on AdminPostOrdersOrderReq$ShippingMethod {
  AdminPostOrdersOrderReq$ShippingMethod copyWith(
      {String? providerId,
      String? profileId,
      int? price,
      Object? data,
      List<LineItem>? items}) {
    return AdminPostOrdersOrderReq$ShippingMethod(
        providerId: providerId ?? this.providerId,
        profileId: profileId ?? this.profileId,
        price: price ?? this.price,
        data: data ?? this.data,
        items: items ?? this.items);
  }

  AdminPostOrdersOrderReq$ShippingMethod copyWithWrapped(
      {Wrapped<String?>? providerId,
      Wrapped<String?>? profileId,
      Wrapped<int?>? price,
      Wrapped<Object?>? data,
      Wrapped<List<LineItem>?>? items}) {
    return AdminPostOrdersOrderReq$ShippingMethod(
        providerId: (providerId != null ? providerId.value : this.providerId),
        profileId: (profileId != null ? profileId.value : this.profileId),
        price: (price != null ? price.value : this.price),
        data: (data != null ? data.value : this.data),
        items: (items != null ? items.value : this.items));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderReturnsReq$Items$Item {
  const AdminPostOrdersOrderReturnsReq$Items$Item({
    required this.itemId,
    this.reasonId,
    this.note,
    required this.quantity,
  });

  factory AdminPostOrdersOrderReturnsReq$Items$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderReturnsReq$Items$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderReturnsReq$Items$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderReturnsReq$Items$ItemToJson(this);

  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'reason_id', includeIfNull: false, defaultValue: 'default')
  final String? reasonId;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderReturnsReq$Items$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderReturnsReq$Items$ItemExtension
    on AdminPostOrdersOrderReturnsReq$Items$Item {
  AdminPostOrdersOrderReturnsReq$Items$Item copyWith(
      {String? itemId, String? reasonId, String? note, int? quantity}) {
    return AdminPostOrdersOrderReturnsReq$Items$Item(
        itemId: itemId ?? this.itemId,
        reasonId: reasonId ?? this.reasonId,
        note: note ?? this.note,
        quantity: quantity ?? this.quantity);
  }

  AdminPostOrdersOrderReturnsReq$Items$Item copyWithWrapped(
      {Wrapped<String>? itemId,
      Wrapped<String?>? reasonId,
      Wrapped<String?>? note,
      Wrapped<int>? quantity}) {
    return AdminPostOrdersOrderReturnsReq$Items$Item(
        itemId: (itemId != null ? itemId.value : this.itemId),
        reasonId: (reasonId != null ? reasonId.value : this.reasonId),
        note: (note != null ? note.value : this.note),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderReturnsReq$ReturnShipping {
  const AdminPostOrdersOrderReturnsReq$ReturnShipping({
    this.optionId,
    this.price,
  });

  factory AdminPostOrdersOrderReturnsReq$ReturnShipping.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderReturnsReq$ReturnShippingFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderReturnsReq$ReturnShippingToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderReturnsReq$ReturnShippingToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String? optionId;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int? price;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderReturnsReq$ReturnShippingFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderReturnsReq$ReturnShippingExtension
    on AdminPostOrdersOrderReturnsReq$ReturnShipping {
  AdminPostOrdersOrderReturnsReq$ReturnShipping copyWith(
      {String? optionId, int? price}) {
    return AdminPostOrdersOrderReturnsReq$ReturnShipping(
        optionId: optionId ?? this.optionId, price: price ?? this.price);
  }

  AdminPostOrdersOrderReturnsReq$ReturnShipping copyWithWrapped(
      {Wrapped<String?>? optionId, Wrapped<int?>? price}) {
    return AdminPostOrdersOrderReturnsReq$ReturnShipping(
        optionId: (optionId != null ? optionId.value : this.optionId),
        price: (price != null ? price.value : this.price));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderSwapsReq$ReturnItems$Item {
  const AdminPostOrdersOrderSwapsReq$ReturnItems$Item({
    required this.itemId,
    required this.quantity,
    this.reasonId,
    this.note,
  });

  factory AdminPostOrdersOrderSwapsReq$ReturnItems$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderSwapsReq$ReturnItems$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderSwapsReq$ReturnItems$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderSwapsReq$ReturnItems$ItemToJson(this);

  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'reason_id', includeIfNull: false, defaultValue: 'default')
  final String? reasonId;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderSwapsReq$ReturnItems$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderSwapsReq$ReturnItems$ItemExtension
    on AdminPostOrdersOrderSwapsReq$ReturnItems$Item {
  AdminPostOrdersOrderSwapsReq$ReturnItems$Item copyWith(
      {String? itemId, int? quantity, String? reasonId, String? note}) {
    return AdminPostOrdersOrderSwapsReq$ReturnItems$Item(
        itemId: itemId ?? this.itemId,
        quantity: quantity ?? this.quantity,
        reasonId: reasonId ?? this.reasonId,
        note: note ?? this.note);
  }

  AdminPostOrdersOrderSwapsReq$ReturnItems$Item copyWithWrapped(
      {Wrapped<String>? itemId,
      Wrapped<int>? quantity,
      Wrapped<String?>? reasonId,
      Wrapped<String?>? note}) {
    return AdminPostOrdersOrderSwapsReq$ReturnItems$Item(
        itemId: (itemId != null ? itemId.value : this.itemId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        reasonId: (reasonId != null ? reasonId.value : this.reasonId),
        note: (note != null ? note.value : this.note));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderSwapsReq$ReturnShipping {
  const AdminPostOrdersOrderSwapsReq$ReturnShipping({
    required this.optionId,
    this.price,
  });

  factory AdminPostOrdersOrderSwapsReq$ReturnShipping.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderSwapsReq$ReturnShippingFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderSwapsReq$ReturnShippingToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderSwapsReq$ReturnShippingToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int? price;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderSwapsReq$ReturnShippingFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderSwapsReq$ReturnShippingExtension
    on AdminPostOrdersOrderSwapsReq$ReturnShipping {
  AdminPostOrdersOrderSwapsReq$ReturnShipping copyWith(
      {String? optionId, int? price}) {
    return AdminPostOrdersOrderSwapsReq$ReturnShipping(
        optionId: optionId ?? this.optionId, price: price ?? this.price);
  }

  AdminPostOrdersOrderSwapsReq$ReturnShipping copyWithWrapped(
      {Wrapped<String>? optionId, Wrapped<int?>? price}) {
    return AdminPostOrdersOrderSwapsReq$ReturnShipping(
        optionId: (optionId != null ? optionId.value : this.optionId),
        price: (price != null ? price.value : this.price));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderSwapsReq$AdditionalItems$Item {
  const AdminPostOrdersOrderSwapsReq$AdditionalItems$Item({
    required this.variantId,
    required this.quantity,
  });

  factory AdminPostOrdersOrderSwapsReq$AdditionalItems$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderSwapsReq$AdditionalItems$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderSwapsReq$AdditionalItems$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderSwapsReq$AdditionalItems$ItemToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderSwapsReq$AdditionalItems$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderSwapsReq$AdditionalItems$ItemExtension
    on AdminPostOrdersOrderSwapsReq$AdditionalItems$Item {
  AdminPostOrdersOrderSwapsReq$AdditionalItems$Item copyWith(
      {String? variantId, int? quantity}) {
    return AdminPostOrdersOrderSwapsReq$AdditionalItems$Item(
        variantId: variantId ?? this.variantId,
        quantity: quantity ?? this.quantity);
  }

  AdminPostOrdersOrderSwapsReq$AdditionalItems$Item copyWithWrapped(
      {Wrapped<String>? variantId, Wrapped<int>? quantity}) {
    return AdminPostOrdersOrderSwapsReq$AdditionalItems$Item(
        variantId: (variantId != null ? variantId.value : this.variantId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item {
  const AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item({
    required this.optionId,
    required this.price,
  });

  factory AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderSwapsReq$CustomShippingOptions$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderSwapsReq$CustomShippingOptions$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderSwapsReq$CustomShippingOptions$ItemToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'price', includeIfNull: false, defaultValue: 36)
  final int price;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderSwapsReq$CustomShippingOptions$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderSwapsReq$CustomShippingOptions$ItemExtension
    on AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item {
  AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item copyWith(
      {String? optionId, int? price}) {
    return AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item(
        optionId: optionId ?? this.optionId, price: price ?? this.price);
  }

  AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item copyWithWrapped(
      {Wrapped<String>? optionId, Wrapped<int>? price}) {
    return AdminPostOrdersOrderSwapsReq$CustomShippingOptions$Item(
        optionId: (optionId != null ? optionId.value : this.optionId),
        price: (price != null ? price.value : this.price));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPriceListPricesPricesReq$Prices$Item {
  const AdminPostPriceListPricesPricesReq$Prices$Item({
    this.id,
    this.regionId,
    this.currencyCode,
    required this.variantId,
    required this.amount,
    this.minQuantity,
    this.maxQuantity,
  });

  factory AdminPostPriceListPricesPricesReq$Prices$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPriceListPricesPricesReq$Prices$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostPriceListPricesPricesReq$Prices$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPriceListPricesPricesReq$Prices$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String? currencyCode;
  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'min_quantity', includeIfNull: false, defaultValue: 36)
  final int? minQuantity;
  @JsonKey(name: 'max_quantity', includeIfNull: false, defaultValue: 36)
  final int? maxQuantity;
  static const fromJsonFactory =
      _$AdminPostPriceListPricesPricesReq$Prices$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPriceListPricesPricesReq$Prices$ItemExtension
    on AdminPostPriceListPricesPricesReq$Prices$Item {
  AdminPostPriceListPricesPricesReq$Prices$Item copyWith(
      {String? id,
      String? regionId,
      String? currencyCode,
      String? variantId,
      int? amount,
      int? minQuantity,
      int? maxQuantity}) {
    return AdminPostPriceListPricesPricesReq$Prices$Item(
        id: id ?? this.id,
        regionId: regionId ?? this.regionId,
        currencyCode: currencyCode ?? this.currencyCode,
        variantId: variantId ?? this.variantId,
        amount: amount ?? this.amount,
        minQuantity: minQuantity ?? this.minQuantity,
        maxQuantity: maxQuantity ?? this.maxQuantity);
  }

  AdminPostPriceListPricesPricesReq$Prices$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String?>? regionId,
      Wrapped<String?>? currencyCode,
      Wrapped<String>? variantId,
      Wrapped<int>? amount,
      Wrapped<int?>? minQuantity,
      Wrapped<int?>? maxQuantity}) {
    return AdminPostPriceListPricesPricesReq$Prices$Item(
        id: (id != null ? id.value : this.id),
        regionId: (regionId != null ? regionId.value : this.regionId),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        variantId: (variantId != null ? variantId.value : this.variantId),
        amount: (amount != null ? amount.value : this.amount),
        minQuantity:
            (minQuantity != null ? minQuantity.value : this.minQuantity),
        maxQuantity:
            (maxQuantity != null ? maxQuantity.value : this.maxQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPriceListsPriceListPriceListReq$Prices$Item {
  const AdminPostPriceListsPriceListPriceListReq$Prices$Item({
    this.id,
    this.regionId,
    this.currencyCode,
    required this.variantId,
    required this.amount,
    this.minQuantity,
    this.maxQuantity,
  });

  factory AdminPostPriceListsPriceListPriceListReq$Prices$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPriceListsPriceListPriceListReq$Prices$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostPriceListsPriceListPriceListReq$Prices$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPriceListsPriceListPriceListReq$Prices$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String? currencyCode;
  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'min_quantity', includeIfNull: false, defaultValue: 36)
  final int? minQuantity;
  @JsonKey(name: 'max_quantity', includeIfNull: false, defaultValue: 36)
  final int? maxQuantity;
  static const fromJsonFactory =
      _$AdminPostPriceListsPriceListPriceListReq$Prices$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPriceListsPriceListPriceListReq$Prices$ItemExtension
    on AdminPostPriceListsPriceListPriceListReq$Prices$Item {
  AdminPostPriceListsPriceListPriceListReq$Prices$Item copyWith(
      {String? id,
      String? regionId,
      String? currencyCode,
      String? variantId,
      int? amount,
      int? minQuantity,
      int? maxQuantity}) {
    return AdminPostPriceListsPriceListPriceListReq$Prices$Item(
        id: id ?? this.id,
        regionId: regionId ?? this.regionId,
        currencyCode: currencyCode ?? this.currencyCode,
        variantId: variantId ?? this.variantId,
        amount: amount ?? this.amount,
        minQuantity: minQuantity ?? this.minQuantity,
        maxQuantity: maxQuantity ?? this.maxQuantity);
  }

  AdminPostPriceListsPriceListPriceListReq$Prices$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String?>? regionId,
      Wrapped<String?>? currencyCode,
      Wrapped<String>? variantId,
      Wrapped<int>? amount,
      Wrapped<int?>? minQuantity,
      Wrapped<int?>? maxQuantity}) {
    return AdminPostPriceListsPriceListPriceListReq$Prices$Item(
        id: (id != null ? id.value : this.id),
        regionId: (regionId != null ? regionId.value : this.regionId),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        variantId: (variantId != null ? variantId.value : this.variantId),
        amount: (amount != null ? amount.value : this.amount),
        minQuantity:
            (minQuantity != null ? minQuantity.value : this.minQuantity),
        maxQuantity:
            (maxQuantity != null ? maxQuantity.value : this.maxQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item {
  const AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item({
    required this.id,
  });

  factory AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPriceListsPriceListPriceListReq$CustomerGroups$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminPostPriceListsPriceListPriceListReq$CustomerGroups$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPriceListsPriceListPriceListReq$CustomerGroups$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostPriceListsPriceListPriceListReq$CustomerGroups$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPriceListsPriceListPriceListReq$CustomerGroups$ItemExtension
    on AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item {
  AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item copyWith(
      {String? id}) {
    return AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item(
        id: id ?? this.id);
  }

  AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item copyWithWrapped(
      {Wrapped<String>? id}) {
    return AdminPostPriceListsPriceListPriceListReq$CustomerGroups$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPriceListsPriceListReq$Prices$Item {
  const AdminPostPriceListsPriceListReq$Prices$Item({
    this.regionId,
    this.currencyCode,
    required this.amount,
    required this.variantId,
    this.minQuantity,
    this.maxQuantity,
  });

  factory AdminPostPriceListsPriceListReq$Prices$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPriceListsPriceListReq$Prices$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostPriceListsPriceListReq$Prices$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPriceListsPriceListReq$Prices$ItemToJson(this);

  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String? currencyCode;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'min_quantity', includeIfNull: false, defaultValue: 36)
  final int? minQuantity;
  @JsonKey(name: 'max_quantity', includeIfNull: false, defaultValue: 36)
  final int? maxQuantity;
  static const fromJsonFactory =
      _$AdminPostPriceListsPriceListReq$Prices$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPriceListsPriceListReq$Prices$ItemExtension
    on AdminPostPriceListsPriceListReq$Prices$Item {
  AdminPostPriceListsPriceListReq$Prices$Item copyWith(
      {String? regionId,
      String? currencyCode,
      int? amount,
      String? variantId,
      int? minQuantity,
      int? maxQuantity}) {
    return AdminPostPriceListsPriceListReq$Prices$Item(
        regionId: regionId ?? this.regionId,
        currencyCode: currencyCode ?? this.currencyCode,
        amount: amount ?? this.amount,
        variantId: variantId ?? this.variantId,
        minQuantity: minQuantity ?? this.minQuantity,
        maxQuantity: maxQuantity ?? this.maxQuantity);
  }

  AdminPostPriceListsPriceListReq$Prices$Item copyWithWrapped(
      {Wrapped<String?>? regionId,
      Wrapped<String?>? currencyCode,
      Wrapped<int>? amount,
      Wrapped<String>? variantId,
      Wrapped<int?>? minQuantity,
      Wrapped<int?>? maxQuantity}) {
    return AdminPostPriceListsPriceListReq$Prices$Item(
        regionId: (regionId != null ? regionId.value : this.regionId),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        amount: (amount != null ? amount.value : this.amount),
        variantId: (variantId != null ? variantId.value : this.variantId),
        minQuantity:
            (minQuantity != null ? minQuantity.value : this.minQuantity),
        maxQuantity:
            (maxQuantity != null ? maxQuantity.value : this.maxQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPriceListsPriceListReq$CustomerGroups$Item {
  const AdminPostPriceListsPriceListReq$CustomerGroups$Item({
    required this.id,
  });

  factory AdminPostPriceListsPriceListReq$CustomerGroups$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPriceListsPriceListReq$CustomerGroups$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostPriceListsPriceListReq$CustomerGroups$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPriceListsPriceListReq$CustomerGroups$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostPriceListsPriceListReq$CustomerGroups$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPriceListsPriceListReq$CustomerGroups$ItemExtension
    on AdminPostPriceListsPriceListReq$CustomerGroups$Item {
  AdminPostPriceListsPriceListReq$CustomerGroups$Item copyWith({String? id}) {
    return AdminPostPriceListsPriceListReq$CustomerGroups$Item(
        id: id ?? this.id);
  }

  AdminPostPriceListsPriceListReq$CustomerGroups$Item copyWithWrapped(
      {Wrapped<String>? id}) {
    return AdminPostPriceListsPriceListReq$CustomerGroups$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item {
  const AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item({
    required this.id,
  });

  factory AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$ItemExtension
    on AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item {
  AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item copyWith(
      {String? id}) {
    return AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item(
        id: id ?? this.id);
  }

  AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminPostProductCategoriesCategoryProductsBatchReq$ProductIds$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductReq$Type$ {
  const AdminPostProductsProductReq$Type$({
    this.id,
    required this.value,
  });

  factory AdminPostProductsProductReq$Type$.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductReq$Type$FromJson(json);

  static const toJsonFactory = _$AdminPostProductsProductReq$Type$ToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductReq$Type$ToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory = _$AdminPostProductsProductReq$Type$FromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductReq$Type$Extension
    on AdminPostProductsProductReq$Type$ {
  AdminPostProductsProductReq$Type$ copyWith({String? id, String? value}) {
    return AdminPostProductsProductReq$Type$(
        id: id ?? this.id, value: value ?? this.value);
  }

  AdminPostProductsProductReq$Type$ copyWithWrapped(
      {Wrapped<String?>? id, Wrapped<String>? value}) {
    return AdminPostProductsProductReq$Type$(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductReq$Tags$Item {
  const AdminPostProductsProductReq$Tags$Item({
    this.id,
    required this.value,
  });

  factory AdminPostProductsProductReq$Tags$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductReq$Tags$ItemFromJson(json);

  static const toJsonFactory = _$AdminPostProductsProductReq$Tags$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductReq$Tags$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory =
      _$AdminPostProductsProductReq$Tags$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductReq$Tags$ItemExtension
    on AdminPostProductsProductReq$Tags$Item {
  AdminPostProductsProductReq$Tags$Item copyWith({String? id, String? value}) {
    return AdminPostProductsProductReq$Tags$Item(
        id: id ?? this.id, value: value ?? this.value);
  }

  AdminPostProductsProductReq$Tags$Item copyWithWrapped(
      {Wrapped<String?>? id, Wrapped<String>? value}) {
    return AdminPostProductsProductReq$Tags$Item(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductReq$SalesChannels$Item {
  const AdminPostProductsProductReq$SalesChannels$Item({
    required this.id,
  });

  factory AdminPostProductsProductReq$SalesChannels$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductReq$SalesChannels$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductReq$SalesChannels$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductReq$SalesChannels$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostProductsProductReq$SalesChannels$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductReq$SalesChannels$ItemExtension
    on AdminPostProductsProductReq$SalesChannels$Item {
  AdminPostProductsProductReq$SalesChannels$Item copyWith({String? id}) {
    return AdminPostProductsProductReq$SalesChannels$Item(id: id ?? this.id);
  }

  AdminPostProductsProductReq$SalesChannels$Item copyWithWrapped(
      {Wrapped<String>? id}) {
    return AdminPostProductsProductReq$SalesChannels$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductReq$Categories$Item {
  const AdminPostProductsProductReq$Categories$Item({
    required this.id,
  });

  factory AdminPostProductsProductReq$Categories$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductReq$Categories$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductReq$Categories$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductReq$Categories$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostProductsProductReq$Categories$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductReq$Categories$ItemExtension
    on AdminPostProductsProductReq$Categories$Item {
  AdminPostProductsProductReq$Categories$Item copyWith({String? id}) {
    return AdminPostProductsProductReq$Categories$Item(id: id ?? this.id);
  }

  AdminPostProductsProductReq$Categories$Item copyWithWrapped(
      {Wrapped<String>? id}) {
    return AdminPostProductsProductReq$Categories$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductReq$Variants$Item {
  const AdminPostProductsProductReq$Variants$Item({
    this.id,
    this.title,
    this.sku,
    this.ean,
    this.upc,
    this.barcode,
    this.hsCode,
    this.inventoryQuantity,
    this.allowBackorder,
    this.manageInventory,
    this.weight,
    this.length,
    this.height,
    this.width,
    this.originCountry,
    this.midCode,
    this.material,
    this.metadata,
    this.prices,
    this.options,
  });

  factory AdminPostProductsProductReq$Variants$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductReq$Variants$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductReq$Variants$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductReq$Variants$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String? title;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String? sku;
  @JsonKey(name: 'ean', includeIfNull: false, defaultValue: 'default')
  final String? ean;
  @JsonKey(name: 'upc', includeIfNull: false, defaultValue: 'default')
  final String? upc;
  @JsonKey(name: 'barcode', includeIfNull: false, defaultValue: 'default')
  final String? barcode;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(name: 'inventory_quantity', includeIfNull: false, defaultValue: 36)
  final int? inventoryQuantity;
  @JsonKey(name: 'allow_backorder', includeIfNull: false)
  final bool? allowBackorder;
  @JsonKey(name: 'manage_inventory', includeIfNull: false)
  final bool? manageInventory;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'prices', includeIfNull: false)
  final List<AdminPostProductsProductReq$Variants$Item$Prices$Item>? prices;
  @JsonKey(name: 'options', includeIfNull: false)
  final List<AdminPostProductsProductReq$Variants$Item$Options$Item>? options;
  static const fromJsonFactory =
      _$AdminPostProductsProductReq$Variants$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductReq$Variants$ItemExtension
    on AdminPostProductsProductReq$Variants$Item {
  AdminPostProductsProductReq$Variants$Item copyWith(
      {String? id,
      String? title,
      String? sku,
      String? ean,
      String? upc,
      String? barcode,
      String? hsCode,
      int? inventoryQuantity,
      bool? allowBackorder,
      bool? manageInventory,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? originCountry,
      String? midCode,
      String? material,
      Object? metadata,
      List<AdminPostProductsProductReq$Variants$Item$Prices$Item>? prices,
      List<AdminPostProductsProductReq$Variants$Item$Options$Item>? options}) {
    return AdminPostProductsProductReq$Variants$Item(
        id: id ?? this.id,
        title: title ?? this.title,
        sku: sku ?? this.sku,
        ean: ean ?? this.ean,
        upc: upc ?? this.upc,
        barcode: barcode ?? this.barcode,
        hsCode: hsCode ?? this.hsCode,
        inventoryQuantity: inventoryQuantity ?? this.inventoryQuantity,
        allowBackorder: allowBackorder ?? this.allowBackorder,
        manageInventory: manageInventory ?? this.manageInventory,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        metadata: metadata ?? this.metadata,
        prices: prices ?? this.prices,
        options: options ?? this.options);
  }

  AdminPostProductsProductReq$Variants$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String?>? title,
      Wrapped<String?>? sku,
      Wrapped<String?>? ean,
      Wrapped<String?>? upc,
      Wrapped<String?>? barcode,
      Wrapped<String?>? hsCode,
      Wrapped<int?>? inventoryQuantity,
      Wrapped<bool?>? allowBackorder,
      Wrapped<bool?>? manageInventory,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<Object?>? metadata,
      Wrapped<List<AdminPostProductsProductReq$Variants$Item$Prices$Item>?>?
          prices,
      Wrapped<List<AdminPostProductsProductReq$Variants$Item$Options$Item>?>?
          options}) {
    return AdminPostProductsProductReq$Variants$Item(
        id: (id != null ? id.value : this.id),
        title: (title != null ? title.value : this.title),
        sku: (sku != null ? sku.value : this.sku),
        ean: (ean != null ? ean.value : this.ean),
        upc: (upc != null ? upc.value : this.upc),
        barcode: (barcode != null ? barcode.value : this.barcode),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        inventoryQuantity: (inventoryQuantity != null
            ? inventoryQuantity.value
            : this.inventoryQuantity),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder),
        manageInventory: (manageInventory != null
            ? manageInventory.value
            : this.manageInventory),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        metadata: (metadata != null ? metadata.value : this.metadata),
        prices: (prices != null ? prices.value : this.prices),
        options: (options != null ? options.value : this.options));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductVariantsReq$Prices$Item {
  const AdminPostProductsProductVariantsReq$Prices$Item({
    this.regionId,
    this.currencyCode,
    required this.amount,
    this.minQuantity,
    this.maxQuantity,
  });

  factory AdminPostProductsProductVariantsReq$Prices$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductVariantsReq$Prices$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductVariantsReq$Prices$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductVariantsReq$Prices$ItemToJson(this);

  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String? currencyCode;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'min_quantity', includeIfNull: false, defaultValue: 36)
  final int? minQuantity;
  @JsonKey(name: 'max_quantity', includeIfNull: false, defaultValue: 36)
  final int? maxQuantity;
  static const fromJsonFactory =
      _$AdminPostProductsProductVariantsReq$Prices$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductVariantsReq$Prices$ItemExtension
    on AdminPostProductsProductVariantsReq$Prices$Item {
  AdminPostProductsProductVariantsReq$Prices$Item copyWith(
      {String? regionId,
      String? currencyCode,
      int? amount,
      int? minQuantity,
      int? maxQuantity}) {
    return AdminPostProductsProductVariantsReq$Prices$Item(
        regionId: regionId ?? this.regionId,
        currencyCode: currencyCode ?? this.currencyCode,
        amount: amount ?? this.amount,
        minQuantity: minQuantity ?? this.minQuantity,
        maxQuantity: maxQuantity ?? this.maxQuantity);
  }

  AdminPostProductsProductVariantsReq$Prices$Item copyWithWrapped(
      {Wrapped<String?>? regionId,
      Wrapped<String?>? currencyCode,
      Wrapped<int>? amount,
      Wrapped<int?>? minQuantity,
      Wrapped<int?>? maxQuantity}) {
    return AdminPostProductsProductVariantsReq$Prices$Item(
        regionId: (regionId != null ? regionId.value : this.regionId),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        amount: (amount != null ? amount.value : this.amount),
        minQuantity:
            (minQuantity != null ? minQuantity.value : this.minQuantity),
        maxQuantity:
            (maxQuantity != null ? maxQuantity.value : this.maxQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductVariantsReq$Options$Item {
  const AdminPostProductsProductVariantsReq$Options$Item({
    required this.optionId,
    required this.value,
  });

  factory AdminPostProductsProductVariantsReq$Options$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductVariantsReq$Options$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductVariantsReq$Options$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductVariantsReq$Options$ItemToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory =
      _$AdminPostProductsProductVariantsReq$Options$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductVariantsReq$Options$ItemExtension
    on AdminPostProductsProductVariantsReq$Options$Item {
  AdminPostProductsProductVariantsReq$Options$Item copyWith(
      {String? optionId, String? value}) {
    return AdminPostProductsProductVariantsReq$Options$Item(
        optionId: optionId ?? this.optionId, value: value ?? this.value);
  }

  AdminPostProductsProductVariantsReq$Options$Item copyWithWrapped(
      {Wrapped<String>? optionId, Wrapped<String>? value}) {
    return AdminPostProductsProductVariantsReq$Options$Item(
        optionId: (optionId != null ? optionId.value : this.optionId),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductVariantsVariantReq$Prices$Item {
  const AdminPostProductsProductVariantsVariantReq$Prices$Item({
    this.id,
    this.regionId,
    this.currencyCode,
    required this.amount,
    this.minQuantity,
    this.maxQuantity,
  });

  factory AdminPostProductsProductVariantsVariantReq$Prices$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductVariantsVariantReq$Prices$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductVariantsVariantReq$Prices$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductVariantsVariantReq$Prices$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String? currencyCode;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'min_quantity', includeIfNull: false, defaultValue: 36)
  final int? minQuantity;
  @JsonKey(name: 'max_quantity', includeIfNull: false, defaultValue: 36)
  final int? maxQuantity;
  static const fromJsonFactory =
      _$AdminPostProductsProductVariantsVariantReq$Prices$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductVariantsVariantReq$Prices$ItemExtension
    on AdminPostProductsProductVariantsVariantReq$Prices$Item {
  AdminPostProductsProductVariantsVariantReq$Prices$Item copyWith(
      {String? id,
      String? regionId,
      String? currencyCode,
      int? amount,
      int? minQuantity,
      int? maxQuantity}) {
    return AdminPostProductsProductVariantsVariantReq$Prices$Item(
        id: id ?? this.id,
        regionId: regionId ?? this.regionId,
        currencyCode: currencyCode ?? this.currencyCode,
        amount: amount ?? this.amount,
        minQuantity: minQuantity ?? this.minQuantity,
        maxQuantity: maxQuantity ?? this.maxQuantity);
  }

  AdminPostProductsProductVariantsVariantReq$Prices$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String?>? regionId,
      Wrapped<String?>? currencyCode,
      Wrapped<int>? amount,
      Wrapped<int?>? minQuantity,
      Wrapped<int?>? maxQuantity}) {
    return AdminPostProductsProductVariantsVariantReq$Prices$Item(
        id: (id != null ? id.value : this.id),
        regionId: (regionId != null ? regionId.value : this.regionId),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        amount: (amount != null ? amount.value : this.amount),
        minQuantity:
            (minQuantity != null ? minQuantity.value : this.minQuantity),
        maxQuantity:
            (maxQuantity != null ? maxQuantity.value : this.maxQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductVariantsVariantReq$Options$Item {
  const AdminPostProductsProductVariantsVariantReq$Options$Item({
    required this.optionId,
    required this.value,
  });

  factory AdminPostProductsProductVariantsVariantReq$Options$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductVariantsVariantReq$Options$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductVariantsVariantReq$Options$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductVariantsVariantReq$Options$ItemToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory =
      _$AdminPostProductsProductVariantsVariantReq$Options$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductVariantsVariantReq$Options$ItemExtension
    on AdminPostProductsProductVariantsVariantReq$Options$Item {
  AdminPostProductsProductVariantsVariantReq$Options$Item copyWith(
      {String? optionId, String? value}) {
    return AdminPostProductsProductVariantsVariantReq$Options$Item(
        optionId: optionId ?? this.optionId, value: value ?? this.value);
  }

  AdminPostProductsProductVariantsVariantReq$Options$Item copyWithWrapped(
      {Wrapped<String>? optionId, Wrapped<String>? value}) {
    return AdminPostProductsProductVariantsVariantReq$Options$Item(
        optionId: (optionId != null ? optionId.value : this.optionId),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq$Type$ {
  const AdminPostProductsReq$Type$({
    this.id,
    required this.value,
  });

  factory AdminPostProductsReq$Type$.fromJson(Map<String, dynamic> json) =>
      _$AdminPostProductsReq$Type$FromJson(json);

  static const toJsonFactory = _$AdminPostProductsReq$Type$ToJson;
  Map<String, dynamic> toJson() => _$AdminPostProductsReq$Type$ToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory = _$AdminPostProductsReq$Type$FromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReq$Type$Extension on AdminPostProductsReq$Type$ {
  AdminPostProductsReq$Type$ copyWith({String? id, String? value}) {
    return AdminPostProductsReq$Type$(
        id: id ?? this.id, value: value ?? this.value);
  }

  AdminPostProductsReq$Type$ copyWithWrapped(
      {Wrapped<String?>? id, Wrapped<String>? value}) {
    return AdminPostProductsReq$Type$(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq$Tags$Item {
  const AdminPostProductsReq$Tags$Item({
    this.id,
    required this.value,
  });

  factory AdminPostProductsReq$Tags$Item.fromJson(Map<String, dynamic> json) =>
      _$AdminPostProductsReq$Tags$ItemFromJson(json);

  static const toJsonFactory = _$AdminPostProductsReq$Tags$ItemToJson;
  Map<String, dynamic> toJson() => _$AdminPostProductsReq$Tags$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory = _$AdminPostProductsReq$Tags$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReq$Tags$ItemExtension
    on AdminPostProductsReq$Tags$Item {
  AdminPostProductsReq$Tags$Item copyWith({String? id, String? value}) {
    return AdminPostProductsReq$Tags$Item(
        id: id ?? this.id, value: value ?? this.value);
  }

  AdminPostProductsReq$Tags$Item copyWithWrapped(
      {Wrapped<String?>? id, Wrapped<String>? value}) {
    return AdminPostProductsReq$Tags$Item(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq$SalesChannels$Item {
  const AdminPostProductsReq$SalesChannels$Item({
    required this.id,
  });

  factory AdminPostProductsReq$SalesChannels$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsReq$SalesChannels$ItemFromJson(json);

  static const toJsonFactory = _$AdminPostProductsReq$SalesChannels$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsReq$SalesChannels$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostProductsReq$SalesChannels$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReq$SalesChannels$ItemExtension
    on AdminPostProductsReq$SalesChannels$Item {
  AdminPostProductsReq$SalesChannels$Item copyWith({String? id}) {
    return AdminPostProductsReq$SalesChannels$Item(id: id ?? this.id);
  }

  AdminPostProductsReq$SalesChannels$Item copyWithWrapped(
      {Wrapped<String>? id}) {
    return AdminPostProductsReq$SalesChannels$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq$Categories$Item {
  const AdminPostProductsReq$Categories$Item({
    required this.id,
  });

  factory AdminPostProductsReq$Categories$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsReq$Categories$ItemFromJson(json);

  static const toJsonFactory = _$AdminPostProductsReq$Categories$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsReq$Categories$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory = _$AdminPostProductsReq$Categories$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReq$Categories$ItemExtension
    on AdminPostProductsReq$Categories$Item {
  AdminPostProductsReq$Categories$Item copyWith({String? id}) {
    return AdminPostProductsReq$Categories$Item(id: id ?? this.id);
  }

  AdminPostProductsReq$Categories$Item copyWithWrapped({Wrapped<String>? id}) {
    return AdminPostProductsReq$Categories$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq$Options$Item {
  const AdminPostProductsReq$Options$Item({
    required this.title,
  });

  factory AdminPostProductsReq$Options$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsReq$Options$ItemFromJson(json);

  static const toJsonFactory = _$AdminPostProductsReq$Options$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsReq$Options$ItemToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  static const fromJsonFactory = _$AdminPostProductsReq$Options$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReq$Options$ItemExtension
    on AdminPostProductsReq$Options$Item {
  AdminPostProductsReq$Options$Item copyWith({String? title}) {
    return AdminPostProductsReq$Options$Item(title: title ?? this.title);
  }

  AdminPostProductsReq$Options$Item copyWithWrapped({Wrapped<String>? title}) {
    return AdminPostProductsReq$Options$Item(
        title: (title != null ? title.value : this.title));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq$Variants$Item {
  const AdminPostProductsReq$Variants$Item({
    required this.title,
    this.sku,
    this.ean,
    this.upc,
    this.barcode,
    this.hsCode,
    this.inventoryQuantity,
    this.allowBackorder,
    this.manageInventory,
    this.weight,
    this.length,
    this.height,
    this.width,
    this.originCountry,
    this.midCode,
    this.material,
    this.metadata,
    this.prices,
    this.options,
  });

  factory AdminPostProductsReq$Variants$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsReq$Variants$ItemFromJson(json);

  static const toJsonFactory = _$AdminPostProductsReq$Variants$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsReq$Variants$ItemToJson(this);

  @JsonKey(name: 'title', includeIfNull: false, defaultValue: 'default')
  final String title;
  @JsonKey(name: 'sku', includeIfNull: false, defaultValue: 'default')
  final String? sku;
  @JsonKey(name: 'ean', includeIfNull: false, defaultValue: 'default')
  final String? ean;
  @JsonKey(name: 'upc', includeIfNull: false, defaultValue: 'default')
  final String? upc;
  @JsonKey(name: 'barcode', includeIfNull: false, defaultValue: 'default')
  final String? barcode;
  @JsonKey(name: 'hs_code', includeIfNull: false, defaultValue: 'default')
  final String? hsCode;
  @JsonKey(name: 'inventory_quantity', includeIfNull: false, defaultValue: 36)
  final int? inventoryQuantity;
  @JsonKey(name: 'allow_backorder', includeIfNull: false)
  final bool? allowBackorder;
  @JsonKey(name: 'manage_inventory', includeIfNull: false)
  final bool? manageInventory;
  @JsonKey(name: 'weight', includeIfNull: false)
  final double? weight;
  @JsonKey(name: 'length', includeIfNull: false)
  final double? length;
  @JsonKey(name: 'height', includeIfNull: false)
  final double? height;
  @JsonKey(name: 'width', includeIfNull: false)
  final double? width;
  @JsonKey(
      name: 'origin_country', includeIfNull: false, defaultValue: 'default')
  final String? originCountry;
  @JsonKey(name: 'mid_code', includeIfNull: false, defaultValue: 'default')
  final String? midCode;
  @JsonKey(name: 'material', includeIfNull: false, defaultValue: 'default')
  final String? material;
  @JsonKey(name: 'metadata', includeIfNull: false)
  final Object? metadata;
  @JsonKey(name: 'prices', includeIfNull: false)
  final List<AdminPostProductsReq$Variants$Item$Prices$Item>? prices;
  @JsonKey(name: 'options', includeIfNull: false)
  final List<AdminPostProductsReq$Variants$Item$Options$Item>? options;
  static const fromJsonFactory = _$AdminPostProductsReq$Variants$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReq$Variants$ItemExtension
    on AdminPostProductsReq$Variants$Item {
  AdminPostProductsReq$Variants$Item copyWith(
      {String? title,
      String? sku,
      String? ean,
      String? upc,
      String? barcode,
      String? hsCode,
      int? inventoryQuantity,
      bool? allowBackorder,
      bool? manageInventory,
      double? weight,
      double? length,
      double? height,
      double? width,
      String? originCountry,
      String? midCode,
      String? material,
      Object? metadata,
      List<AdminPostProductsReq$Variants$Item$Prices$Item>? prices,
      List<AdminPostProductsReq$Variants$Item$Options$Item>? options}) {
    return AdminPostProductsReq$Variants$Item(
        title: title ?? this.title,
        sku: sku ?? this.sku,
        ean: ean ?? this.ean,
        upc: upc ?? this.upc,
        barcode: barcode ?? this.barcode,
        hsCode: hsCode ?? this.hsCode,
        inventoryQuantity: inventoryQuantity ?? this.inventoryQuantity,
        allowBackorder: allowBackorder ?? this.allowBackorder,
        manageInventory: manageInventory ?? this.manageInventory,
        weight: weight ?? this.weight,
        length: length ?? this.length,
        height: height ?? this.height,
        width: width ?? this.width,
        originCountry: originCountry ?? this.originCountry,
        midCode: midCode ?? this.midCode,
        material: material ?? this.material,
        metadata: metadata ?? this.metadata,
        prices: prices ?? this.prices,
        options: options ?? this.options);
  }

  AdminPostProductsReq$Variants$Item copyWithWrapped(
      {Wrapped<String>? title,
      Wrapped<String?>? sku,
      Wrapped<String?>? ean,
      Wrapped<String?>? upc,
      Wrapped<String?>? barcode,
      Wrapped<String?>? hsCode,
      Wrapped<int?>? inventoryQuantity,
      Wrapped<bool?>? allowBackorder,
      Wrapped<bool?>? manageInventory,
      Wrapped<double?>? weight,
      Wrapped<double?>? length,
      Wrapped<double?>? height,
      Wrapped<double?>? width,
      Wrapped<String?>? originCountry,
      Wrapped<String?>? midCode,
      Wrapped<String?>? material,
      Wrapped<Object?>? metadata,
      Wrapped<List<AdminPostProductsReq$Variants$Item$Prices$Item>?>? prices,
      Wrapped<List<AdminPostProductsReq$Variants$Item$Options$Item>?>?
          options}) {
    return AdminPostProductsReq$Variants$Item(
        title: (title != null ? title.value : this.title),
        sku: (sku != null ? sku.value : this.sku),
        ean: (ean != null ? ean.value : this.ean),
        upc: (upc != null ? upc.value : this.upc),
        barcode: (barcode != null ? barcode.value : this.barcode),
        hsCode: (hsCode != null ? hsCode.value : this.hsCode),
        inventoryQuantity: (inventoryQuantity != null
            ? inventoryQuantity.value
            : this.inventoryQuantity),
        allowBackorder: (allowBackorder != null
            ? allowBackorder.value
            : this.allowBackorder),
        manageInventory: (manageInventory != null
            ? manageInventory.value
            : this.manageInventory),
        weight: (weight != null ? weight.value : this.weight),
        length: (length != null ? length.value : this.length),
        height: (height != null ? height.value : this.height),
        width: (width != null ? width.value : this.width),
        originCountry:
            (originCountry != null ? originCountry.value : this.originCountry),
        midCode: (midCode != null ? midCode.value : this.midCode),
        material: (material != null ? material.value : this.material),
        metadata: (metadata != null ? metadata.value : this.metadata),
        prices: (prices != null ? prices.value : this.prices),
        options: (options != null ? options.value : this.options));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item {
  const AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item({
    required this.id,
  });

  factory AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$ItemExtension
    on AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item {
  AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item copyWith(
      {String? id}) {
    return AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item(
        id: id ?? this.id);
  }

  AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item
      copyWithWrapped({Wrapped<String>? id}) {
    return AdminPostPublishableApiKeySalesChannelsBatchReq$SalesChannelIds$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostReturnsReturnReceiveReq$Items$Item {
  const AdminPostReturnsReturnReceiveReq$Items$Item({
    required this.itemId,
    required this.quantity,
  });

  factory AdminPostReturnsReturnReceiveReq$Items$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostReturnsReturnReceiveReq$Items$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostReturnsReturnReceiveReq$Items$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostReturnsReturnReceiveReq$Items$ItemToJson(this);

  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  static const fromJsonFactory =
      _$AdminPostReturnsReturnReceiveReq$Items$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostReturnsReturnReceiveReq$Items$ItemExtension
    on AdminPostReturnsReturnReceiveReq$Items$Item {
  AdminPostReturnsReturnReceiveReq$Items$Item copyWith(
      {String? itemId, int? quantity}) {
    return AdminPostReturnsReturnReceiveReq$Items$Item(
        itemId: itemId ?? this.itemId, quantity: quantity ?? this.quantity);
  }

  AdminPostReturnsReturnReceiveReq$Items$Item copyWithWrapped(
      {Wrapped<String>? itemId, Wrapped<int>? quantity}) {
    return AdminPostReturnsReturnReceiveReq$Items$Item(
        itemId: (itemId != null ? itemId.value : this.itemId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item {
  const AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item({
    required this.id,
  });

  factory AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  static const fromJsonFactory =
      _$AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$ItemExtension
    on AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item {
  AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item copyWith(
      {String? id}) {
    return AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item(
        id: id ?? this.id);
  }

  AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item copyWithWrapped(
      {Wrapped<String>? id}) {
    return AdminPostSalesChannelsChannelProductsBatchReq$ProductIds$Item(
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostShippingOptionsOptionReq$Requirements$Item {
  const AdminPostShippingOptionsOptionReq$Requirements$Item({
    this.id,
    required this.type,
    required this.amount,
  });

  factory AdminPostShippingOptionsOptionReq$Requirements$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostShippingOptionsOptionReq$Requirements$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostShippingOptionsOptionReq$Requirements$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostShippingOptionsOptionReq$Requirements$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: adminPostShippingOptionsOptionReq$Requirements$ItemTypeToJson,
    fromJson: adminPostShippingOptionsOptionReq$Requirements$ItemTypeFromJson,
  )
  final enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType type;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  static const fromJsonFactory =
      _$AdminPostShippingOptionsOptionReq$Requirements$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostShippingOptionsOptionReq$Requirements$ItemExtension
    on AdminPostShippingOptionsOptionReq$Requirements$Item {
  AdminPostShippingOptionsOptionReq$Requirements$Item copyWith(
      {String? id,
      enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType? type,
      int? amount}) {
    return AdminPostShippingOptionsOptionReq$Requirements$Item(
        id: id ?? this.id,
        type: type ?? this.type,
        amount: amount ?? this.amount);
  }

  AdminPostShippingOptionsOptionReq$Requirements$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType>?
          type,
      Wrapped<int>? amount}) {
    return AdminPostShippingOptionsOptionReq$Requirements$Item(
        id: (id != null ? id.value : this.id),
        type: (type != null ? type.value : this.type),
        amount: (amount != null ? amount.value : this.amount));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostShippingOptionsReq$Requirements$Item {
  const AdminPostShippingOptionsReq$Requirements$Item({
    required this.type,
    required this.amount,
  });

  factory AdminPostShippingOptionsReq$Requirements$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostShippingOptionsReq$Requirements$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostShippingOptionsReq$Requirements$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostShippingOptionsReq$Requirements$ItemToJson(this);

  @JsonKey(
    name: 'type',
    includeIfNull: false,
    toJson: adminPostShippingOptionsReq$Requirements$ItemTypeToJson,
    fromJson: adminPostShippingOptionsReq$Requirements$ItemTypeFromJson,
  )
  final enums.AdminPostShippingOptionsReq$Requirements$ItemType type;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  static const fromJsonFactory =
      _$AdminPostShippingOptionsReq$Requirements$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostShippingOptionsReq$Requirements$ItemExtension
    on AdminPostShippingOptionsReq$Requirements$Item {
  AdminPostShippingOptionsReq$Requirements$Item copyWith(
      {enums.AdminPostShippingOptionsReq$Requirements$ItemType? type,
      int? amount}) {
    return AdminPostShippingOptionsReq$Requirements$Item(
        type: type ?? this.type, amount: amount ?? this.amount);
  }

  AdminPostShippingOptionsReq$Requirements$Item copyWithWrapped(
      {Wrapped<enums.AdminPostShippingOptionsReq$Requirements$ItemType>? type,
      Wrapped<int>? amount}) {
    return AdminPostShippingOptionsReq$Requirements$Item(
        type: (type != null ? type.value : this.type),
        amount: (amount != null ? amount.value : this.amount));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminProductsListTagsRes$Tags$Item {
  const AdminProductsListTagsRes$Tags$Item({
    required this.id,
    required this.usageCount,
    required this.value,
  });

  factory AdminProductsListTagsRes$Tags$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminProductsListTagsRes$Tags$ItemFromJson(json);

  static const toJsonFactory = _$AdminProductsListTagsRes$Tags$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminProductsListTagsRes$Tags$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String id;
  @JsonKey(name: 'usage_count', includeIfNull: false, defaultValue: 'default')
  final String usageCount;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory = _$AdminProductsListTagsRes$Tags$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminProductsListTagsRes$Tags$ItemExtension
    on AdminProductsListTagsRes$Tags$Item {
  AdminProductsListTagsRes$Tags$Item copyWith(
      {String? id, String? usageCount, String? value}) {
    return AdminProductsListTagsRes$Tags$Item(
        id: id ?? this.id,
        usageCount: usageCount ?? this.usageCount,
        value: value ?? this.value);
  }

  AdminProductsListTagsRes$Tags$Item copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? usageCount,
      Wrapped<String>? value}) {
    return AdminProductsListTagsRes$Tags$Item(
        id: (id != null ? id.value : this.id),
        usageCount: (usageCount != null ? usageCount.value : this.usageCount),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminUploadsRes$Uploads$Item {
  const AdminUploadsRes$Uploads$Item({
    required this.url,
    required this.key,
  });

  factory AdminUploadsRes$Uploads$Item.fromJson(Map<String, dynamic> json) =>
      _$AdminUploadsRes$Uploads$ItemFromJson(json);

  static const toJsonFactory = _$AdminUploadsRes$Uploads$ItemToJson;
  Map<String, dynamic> toJson() => _$AdminUploadsRes$Uploads$ItemToJson(this);

  @JsonKey(name: 'url', includeIfNull: false, defaultValue: 'default')
  final String url;
  @JsonKey(name: 'key', includeIfNull: false, defaultValue: 'default')
  final String key;
  static const fromJsonFactory = _$AdminUploadsRes$Uploads$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminUploadsRes$Uploads$ItemExtension
    on AdminUploadsRes$Uploads$Item {
  AdminUploadsRes$Uploads$Item copyWith({String? url, String? key}) {
    return AdminUploadsRes$Uploads$Item(
        url: url ?? this.url, key: key ?? this.key);
  }

  AdminUploadsRes$Uploads$Item copyWithWrapped(
      {Wrapped<String>? url, Wrapped<String>? key}) {
    return AdminUploadsRes$Uploads$Item(
        url: (url != null ? url.value : this.url),
        key: (key != null ? key.value : this.key));
  }
}

@JsonSerializable(explicitToJson: true)
class PricedShippingOption$TaxRates$Item {
  const PricedShippingOption$TaxRates$Item({
    this.rate,
    this.name,
    this.code,
  });

  factory PricedShippingOption$TaxRates$Item.fromJson(
          Map<String, dynamic> json) =>
      _$PricedShippingOption$TaxRates$ItemFromJson(json);

  static const toJsonFactory = _$PricedShippingOption$TaxRates$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$PricedShippingOption$TaxRates$ItemToJson(this);

  @JsonKey(name: 'rate', includeIfNull: false)
  final double? rate;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String? code;
  static const fromJsonFactory = _$PricedShippingOption$TaxRates$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PricedShippingOption$TaxRates$ItemExtension
    on PricedShippingOption$TaxRates$Item {
  PricedShippingOption$TaxRates$Item copyWith(
      {double? rate, String? name, String? code}) {
    return PricedShippingOption$TaxRates$Item(
        rate: rate ?? this.rate,
        name: name ?? this.name,
        code: code ?? this.code);
  }

  PricedShippingOption$TaxRates$Item copyWithWrapped(
      {Wrapped<double?>? rate,
      Wrapped<String?>? name,
      Wrapped<String?>? code}) {
    return PricedShippingOption$TaxRates$Item(
        rate: (rate != null ? rate.value : this.rate),
        name: (name != null ? name.value : this.name),
        code: (code != null ? code.value : this.code));
  }
}

@JsonSerializable(explicitToJson: true)
class PricedVariant$TaxRates$Item {
  const PricedVariant$TaxRates$Item({
    this.rate,
    this.name,
    this.code,
  });

  factory PricedVariant$TaxRates$Item.fromJson(Map<String, dynamic> json) =>
      _$PricedVariant$TaxRates$ItemFromJson(json);

  static const toJsonFactory = _$PricedVariant$TaxRates$ItemToJson;
  Map<String, dynamic> toJson() => _$PricedVariant$TaxRates$ItemToJson(this);

  @JsonKey(name: 'rate', includeIfNull: false)
  final double? rate;
  @JsonKey(name: 'name', includeIfNull: false, defaultValue: 'default')
  final String? name;
  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String? code;
  static const fromJsonFactory = _$PricedVariant$TaxRates$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $PricedVariant$TaxRates$ItemExtension on PricedVariant$TaxRates$Item {
  PricedVariant$TaxRates$Item copyWith(
      {double? rate, String? name, String? code}) {
    return PricedVariant$TaxRates$Item(
        rate: rate ?? this.rate,
        name: name ?? this.name,
        code: code ?? this.code);
  }

  PricedVariant$TaxRates$Item copyWithWrapped(
      {Wrapped<double?>? rate,
      Wrapped<String?>? name,
      Wrapped<String?>? code}) {
    return PricedVariant$TaxRates$Item(
        rate: (rate != null ? rate.value : this.rate),
        name: (name != null ? name.value : this.name),
        code: (code != null ? code.value : this.code));
  }
}

@JsonSerializable(explicitToJson: true)
class VariantInventory$SalesChannelAvailability$Item {
  const VariantInventory$SalesChannelAvailability$Item({
    required this.channelName,
    required this.channelId,
    required this.availableQuantity,
  });

  factory VariantInventory$SalesChannelAvailability$Item.fromJson(
          Map<String, dynamic> json) =>
      _$VariantInventory$SalesChannelAvailability$ItemFromJson(json);

  static const toJsonFactory =
      _$VariantInventory$SalesChannelAvailability$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$VariantInventory$SalesChannelAvailability$ItemToJson(this);

  @JsonKey(name: 'channel_name', includeIfNull: false, defaultValue: 'default')
  final String channelName;
  @JsonKey(name: 'channel_id', includeIfNull: false, defaultValue: 'default')
  final String channelId;
  @JsonKey(name: 'available_quantity', includeIfNull: false)
  final double availableQuantity;
  static const fromJsonFactory =
      _$VariantInventory$SalesChannelAvailability$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $VariantInventory$SalesChannelAvailability$ItemExtension
    on VariantInventory$SalesChannelAvailability$Item {
  VariantInventory$SalesChannelAvailability$Item copyWith(
      {String? channelName, String? channelId, double? availableQuantity}) {
    return VariantInventory$SalesChannelAvailability$Item(
        channelName: channelName ?? this.channelName,
        channelId: channelId ?? this.channelId,
        availableQuantity: availableQuantity ?? this.availableQuantity);
  }

  VariantInventory$SalesChannelAvailability$Item copyWithWrapped(
      {Wrapped<String>? channelName,
      Wrapped<String>? channelId,
      Wrapped<double>? availableQuantity}) {
    return VariantInventory$SalesChannelAvailability$Item(
        channelName:
            (channelName != null ? channelName.value : this.channelName),
        channelId: (channelId != null ? channelId.value : this.channelId),
        availableQuantity: (availableQuantity != null
            ? availableQuantity.value
            : this.availableQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class StoreCustomersListPaymentMethodsRes$PaymentMethods$Item {
  const StoreCustomersListPaymentMethodsRes$PaymentMethods$Item({
    required this.providerId,
    required this.data,
  });

  factory StoreCustomersListPaymentMethodsRes$PaymentMethods$Item.fromJson(
          Map<String, dynamic> json) =>
      _$StoreCustomersListPaymentMethodsRes$PaymentMethods$ItemFromJson(json);

  static const toJsonFactory =
      _$StoreCustomersListPaymentMethodsRes$PaymentMethods$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$StoreCustomersListPaymentMethodsRes$PaymentMethods$ItemToJson(this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'data', includeIfNull: false)
  final Object data;
  static const fromJsonFactory =
      _$StoreCustomersListPaymentMethodsRes$PaymentMethods$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StoreCustomersListPaymentMethodsRes$PaymentMethods$ItemExtension
    on StoreCustomersListPaymentMethodsRes$PaymentMethods$Item {
  StoreCustomersListPaymentMethodsRes$PaymentMethods$Item copyWith(
      {String? providerId, Object? data}) {
    return StoreCustomersListPaymentMethodsRes$PaymentMethods$Item(
        providerId: providerId ?? this.providerId, data: data ?? this.data);
  }

  StoreCustomersListPaymentMethodsRes$PaymentMethods$Item copyWithWrapped(
      {Wrapped<String>? providerId, Wrapped<Object>? data}) {
    return StoreCustomersListPaymentMethodsRes$PaymentMethods$Item(
        providerId: (providerId != null ? providerId.value : this.providerId),
        data: (data != null ? data.value : this.data));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartReq$Items$Item {
  const StorePostCartReq$Items$Item({
    required this.variantId,
    required this.quantity,
  });

  factory StorePostCartReq$Items$Item.fromJson(Map<String, dynamic> json) =>
      _$StorePostCartReq$Items$ItemFromJson(json);

  static const toJsonFactory = _$StorePostCartReq$Items$ItemToJson;
  Map<String, dynamic> toJson() => _$StorePostCartReq$Items$ItemToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  static const fromJsonFactory = _$StorePostCartReq$Items$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartReq$Items$ItemExtension on StorePostCartReq$Items$Item {
  StorePostCartReq$Items$Item copyWith({String? variantId, int? quantity}) {
    return StorePostCartReq$Items$Item(
        variantId: variantId ?? this.variantId,
        quantity: quantity ?? this.quantity);
  }

  StorePostCartReq$Items$Item copyWithWrapped(
      {Wrapped<String>? variantId, Wrapped<int>? quantity}) {
    return StorePostCartReq$Items$Item(
        variantId: (variantId != null ? variantId.value : this.variantId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartsCartReq$GiftCards$Item {
  const StorePostCartsCartReq$GiftCards$Item({
    required this.code,
  });

  factory StorePostCartsCartReq$GiftCards$Item.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCartsCartReq$GiftCards$ItemFromJson(json);

  static const toJsonFactory = _$StorePostCartsCartReq$GiftCards$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCartsCartReq$GiftCards$ItemToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  static const fromJsonFactory = _$StorePostCartsCartReq$GiftCards$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartsCartReq$GiftCards$ItemExtension
    on StorePostCartsCartReq$GiftCards$Item {
  StorePostCartsCartReq$GiftCards$Item copyWith({String? code}) {
    return StorePostCartsCartReq$GiftCards$Item(code: code ?? this.code);
  }

  StorePostCartsCartReq$GiftCards$Item copyWithWrapped(
      {Wrapped<String>? code}) {
    return StorePostCartsCartReq$GiftCards$Item(
        code: (code != null ? code.value : this.code));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostCartsCartReq$Discounts$Item {
  const StorePostCartsCartReq$Discounts$Item({
    required this.code,
  });

  factory StorePostCartsCartReq$Discounts$Item.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostCartsCartReq$Discounts$ItemFromJson(json);

  static const toJsonFactory = _$StorePostCartsCartReq$Discounts$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostCartsCartReq$Discounts$ItemToJson(this);

  @JsonKey(name: 'code', includeIfNull: false, defaultValue: 'default')
  final String code;
  static const fromJsonFactory = _$StorePostCartsCartReq$Discounts$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostCartsCartReq$Discounts$ItemExtension
    on StorePostCartsCartReq$Discounts$Item {
  StorePostCartsCartReq$Discounts$Item copyWith({String? code}) {
    return StorePostCartsCartReq$Discounts$Item(code: code ?? this.code);
  }

  StorePostCartsCartReq$Discounts$Item copyWithWrapped(
      {Wrapped<String>? code}) {
    return StorePostCartsCartReq$Discounts$Item(
        code: (code != null ? code.value : this.code));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item {
  const StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item({
    required this.providerId,
    required this.amount,
    this.sessionId,
  });

  factory StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostPaymentCollectionsBatchSessionsReq$Sessions$ItemFromJson(json);

  static const toJsonFactory =
      _$StorePostPaymentCollectionsBatchSessionsReq$Sessions$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostPaymentCollectionsBatchSessionsReq$Sessions$ItemToJson(this);

  @JsonKey(name: 'provider_id', includeIfNull: false, defaultValue: 'default')
  final String providerId;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'session_id', includeIfNull: false, defaultValue: 'default')
  final String? sessionId;
  static const fromJsonFactory =
      _$StorePostPaymentCollectionsBatchSessionsReq$Sessions$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostPaymentCollectionsBatchSessionsReq$Sessions$ItemExtension
    on StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item {
  StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item copyWith(
      {String? providerId, int? amount, String? sessionId}) {
    return StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item(
        providerId: providerId ?? this.providerId,
        amount: amount ?? this.amount,
        sessionId: sessionId ?? this.sessionId);
  }

  StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item copyWithWrapped(
      {Wrapped<String>? providerId,
      Wrapped<int>? amount,
      Wrapped<String?>? sessionId}) {
    return StorePostPaymentCollectionsBatchSessionsReq$Sessions$Item(
        providerId: (providerId != null ? providerId.value : this.providerId),
        amount: (amount != null ? amount.value : this.amount),
        sessionId: (sessionId != null ? sessionId.value : this.sessionId));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostReturnsReq$Items$Item {
  const StorePostReturnsReq$Items$Item({
    required this.itemId,
    required this.quantity,
    this.reasonId,
    this.note,
  });

  factory StorePostReturnsReq$Items$Item.fromJson(Map<String, dynamic> json) =>
      _$StorePostReturnsReq$Items$ItemFromJson(json);

  static const toJsonFactory = _$StorePostReturnsReq$Items$ItemToJson;
  Map<String, dynamic> toJson() => _$StorePostReturnsReq$Items$ItemToJson(this);

  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'reason_id', includeIfNull: false, defaultValue: 'default')
  final String? reasonId;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  static const fromJsonFactory = _$StorePostReturnsReq$Items$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostReturnsReq$Items$ItemExtension
    on StorePostReturnsReq$Items$Item {
  StorePostReturnsReq$Items$Item copyWith(
      {String? itemId, int? quantity, String? reasonId, String? note}) {
    return StorePostReturnsReq$Items$Item(
        itemId: itemId ?? this.itemId,
        quantity: quantity ?? this.quantity,
        reasonId: reasonId ?? this.reasonId,
        note: note ?? this.note);
  }

  StorePostReturnsReq$Items$Item copyWithWrapped(
      {Wrapped<String>? itemId,
      Wrapped<int>? quantity,
      Wrapped<String?>? reasonId,
      Wrapped<String?>? note}) {
    return StorePostReturnsReq$Items$Item(
        itemId: (itemId != null ? itemId.value : this.itemId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        reasonId: (reasonId != null ? reasonId.value : this.reasonId),
        note: (note != null ? note.value : this.note));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostReturnsReq$ReturnShipping {
  const StorePostReturnsReq$ReturnShipping({
    required this.optionId,
  });

  factory StorePostReturnsReq$ReturnShipping.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostReturnsReq$ReturnShippingFromJson(json);

  static const toJsonFactory = _$StorePostReturnsReq$ReturnShippingToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostReturnsReq$ReturnShippingToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  static const fromJsonFactory = _$StorePostReturnsReq$ReturnShippingFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostReturnsReq$ReturnShippingExtension
    on StorePostReturnsReq$ReturnShipping {
  StorePostReturnsReq$ReturnShipping copyWith({String? optionId}) {
    return StorePostReturnsReq$ReturnShipping(
        optionId: optionId ?? this.optionId);
  }

  StorePostReturnsReq$ReturnShipping copyWithWrapped(
      {Wrapped<String>? optionId}) {
    return StorePostReturnsReq$ReturnShipping(
        optionId: (optionId != null ? optionId.value : this.optionId));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostSwapsReq$ReturnItems$Item {
  const StorePostSwapsReq$ReturnItems$Item({
    required this.itemId,
    required this.quantity,
    this.reasonId,
    this.note,
  });

  factory StorePostSwapsReq$ReturnItems$Item.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostSwapsReq$ReturnItems$ItemFromJson(json);

  static const toJsonFactory = _$StorePostSwapsReq$ReturnItems$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostSwapsReq$ReturnItems$ItemToJson(this);

  @JsonKey(name: 'item_id', includeIfNull: false, defaultValue: 'default')
  final String itemId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  @JsonKey(name: 'reason_id', includeIfNull: false, defaultValue: 'default')
  final String? reasonId;
  @JsonKey(name: 'note', includeIfNull: false, defaultValue: 'default')
  final String? note;
  static const fromJsonFactory = _$StorePostSwapsReq$ReturnItems$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostSwapsReq$ReturnItems$ItemExtension
    on StorePostSwapsReq$ReturnItems$Item {
  StorePostSwapsReq$ReturnItems$Item copyWith(
      {String? itemId, int? quantity, String? reasonId, String? note}) {
    return StorePostSwapsReq$ReturnItems$Item(
        itemId: itemId ?? this.itemId,
        quantity: quantity ?? this.quantity,
        reasonId: reasonId ?? this.reasonId,
        note: note ?? this.note);
  }

  StorePostSwapsReq$ReturnItems$Item copyWithWrapped(
      {Wrapped<String>? itemId,
      Wrapped<int>? quantity,
      Wrapped<String?>? reasonId,
      Wrapped<String?>? note}) {
    return StorePostSwapsReq$ReturnItems$Item(
        itemId: (itemId != null ? itemId.value : this.itemId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        reasonId: (reasonId != null ? reasonId.value : this.reasonId),
        note: (note != null ? note.value : this.note));
  }
}

@JsonSerializable(explicitToJson: true)
class StorePostSwapsReq$AdditionalItems$Item {
  const StorePostSwapsReq$AdditionalItems$Item({
    required this.variantId,
    required this.quantity,
  });

  factory StorePostSwapsReq$AdditionalItems$Item.fromJson(
          Map<String, dynamic> json) =>
      _$StorePostSwapsReq$AdditionalItems$ItemFromJson(json);

  static const toJsonFactory = _$StorePostSwapsReq$AdditionalItems$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$StorePostSwapsReq$AdditionalItems$ItemToJson(this);

  @JsonKey(name: 'variant_id', includeIfNull: false, defaultValue: 'default')
  final String variantId;
  @JsonKey(name: 'quantity', includeIfNull: false, defaultValue: 36)
  final int quantity;
  static const fromJsonFactory =
      _$StorePostSwapsReq$AdditionalItems$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $StorePostSwapsReq$AdditionalItems$ItemExtension
    on StorePostSwapsReq$AdditionalItems$Item {
  StorePostSwapsReq$AdditionalItems$Item copyWith(
      {String? variantId, int? quantity}) {
    return StorePostSwapsReq$AdditionalItems$Item(
        variantId: variantId ?? this.variantId,
        quantity: quantity ?? this.quantity);
  }

  StorePostSwapsReq$AdditionalItems$Item copyWithWrapped(
      {Wrapped<String>? variantId, Wrapped<int>? quantity}) {
    return StorePostSwapsReq$AdditionalItems$Item(
        variantId: (variantId != null ? variantId.value : this.variantId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsDiscountReq$Rule$Conditions$Item {
  const AdminPostDiscountsDiscountReq$Rule$Conditions$Item({
    this.id,
    required this.$operator,
    this.products,
    this.productTypes,
    this.productCollections,
    this.productTags,
    this.customerGroups,
  });

  factory AdminPostDiscountsDiscountReq$Rule$Conditions$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDiscountsDiscountReq$Rule$Conditions$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostDiscountsDiscountReq$Rule$Conditions$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDiscountsDiscountReq$Rule$Conditions$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(
    name: 'operator',
    includeIfNull: false,
    toJson: adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorToJson,
    fromJson:
        adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorFromJson,
  )
  final enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
      $operator;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? products;
  @JsonKey(
      name: 'product_types', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? productTypes;
  @JsonKey(
      name: 'product_collections',
      includeIfNull: false,
      defaultValue: <Object>[])
  final List<Object>? productCollections;
  @JsonKey(name: 'product_tags', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? productTags;
  @JsonKey(
      name: 'customer_groups', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? customerGroups;
  static const fromJsonFactory =
      _$AdminPostDiscountsDiscountReq$Rule$Conditions$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsDiscountReq$Rule$Conditions$ItemExtension
    on AdminPostDiscountsDiscountReq$Rule$Conditions$Item {
  AdminPostDiscountsDiscountReq$Rule$Conditions$Item copyWith(
      {String? id,
      enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator?
          $operator,
      List<Object>? products,
      List<Object>? productTypes,
      List<Object>? productCollections,
      List<Object>? productTags,
      List<Object>? customerGroups}) {
    return AdminPostDiscountsDiscountReq$Rule$Conditions$Item(
        id: id ?? this.id,
        $operator: $operator ?? this.$operator,
        products: products ?? this.products,
        productTypes: productTypes ?? this.productTypes,
        productCollections: productCollections ?? this.productCollections,
        productTags: productTags ?? this.productTags,
        customerGroups: customerGroups ?? this.customerGroups);
  }

  AdminPostDiscountsDiscountReq$Rule$Conditions$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator>?
          $operator,
      Wrapped<List<Object>?>? products,
      Wrapped<List<Object>?>? productTypes,
      Wrapped<List<Object>?>? productCollections,
      Wrapped<List<Object>?>? productTags,
      Wrapped<List<Object>?>? customerGroups}) {
    return AdminPostDiscountsDiscountReq$Rule$Conditions$Item(
        id: (id != null ? id.value : this.id),
        $operator: ($operator != null ? $operator.value : this.$operator),
        products: (products != null ? products.value : this.products),
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes),
        productCollections: (productCollections != null
            ? productCollections.value
            : this.productCollections),
        productTags:
            (productTags != null ? productTags.value : this.productTags),
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostDiscountsReq$Rule$Conditions$Item {
  const AdminPostDiscountsReq$Rule$Conditions$Item({
    required this.$operator,
    this.products,
    this.productTypes,
    this.productCollections,
    this.productTags,
    this.customerGroups,
  });

  factory AdminPostDiscountsReq$Rule$Conditions$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostDiscountsReq$Rule$Conditions$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostDiscountsReq$Rule$Conditions$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostDiscountsReq$Rule$Conditions$ItemToJson(this);

  @JsonKey(
    name: 'operator',
    includeIfNull: false,
    toJson: adminPostDiscountsReq$Rule$Conditions$ItemOperatorToJson,
    fromJson: adminPostDiscountsReq$Rule$Conditions$ItemOperatorFromJson,
  )
  final enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator $operator;
  @JsonKey(name: 'products', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? products;
  @JsonKey(
      name: 'product_types', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? productTypes;
  @JsonKey(
      name: 'product_collections',
      includeIfNull: false,
      defaultValue: <Object>[])
  final List<Object>? productCollections;
  @JsonKey(name: 'product_tags', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? productTags;
  @JsonKey(
      name: 'customer_groups', includeIfNull: false, defaultValue: <Object>[])
  final List<Object>? customerGroups;
  static const fromJsonFactory =
      _$AdminPostDiscountsReq$Rule$Conditions$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostDiscountsReq$Rule$Conditions$ItemExtension
    on AdminPostDiscountsReq$Rule$Conditions$Item {
  AdminPostDiscountsReq$Rule$Conditions$Item copyWith(
      {enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator? $operator,
      List<Object>? products,
      List<Object>? productTypes,
      List<Object>? productCollections,
      List<Object>? productTags,
      List<Object>? customerGroups}) {
    return AdminPostDiscountsReq$Rule$Conditions$Item(
        $operator: $operator ?? this.$operator,
        products: products ?? this.products,
        productTypes: productTypes ?? this.productTypes,
        productCollections: productCollections ?? this.productCollections,
        productTags: productTags ?? this.productTags,
        customerGroups: customerGroups ?? this.customerGroups);
  }

  AdminPostDiscountsReq$Rule$Conditions$Item copyWithWrapped(
      {Wrapped<enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator>?
          $operator,
      Wrapped<List<Object>?>? products,
      Wrapped<List<Object>?>? productTypes,
      Wrapped<List<Object>?>? productCollections,
      Wrapped<List<Object>?>? productTags,
      Wrapped<List<Object>?>? customerGroups}) {
    return AdminPostDiscountsReq$Rule$Conditions$Item(
        $operator: ($operator != null ? $operator.value : this.$operator),
        products: (products != null ? products.value : this.products),
        productTypes:
            (productTypes != null ? productTypes.value : this.productTypes),
        productCollections: (productCollections != null
            ? productCollections.value
            : this.productCollections),
        productTags:
            (productTags != null ? productTags.value : this.productTags),
        customerGroups: (customerGroups != null
            ? customerGroups.value
            : this.customerGroups));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item {
  const AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item({
    this.id,
    this.value,
  });

  factory AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String? value;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$ItemExtension
    on AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item {
  AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item copyWith(
      {String? id, String? value}) {
    return AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item(
        id: id ?? this.id, value: value ?? this.value);
  }

  AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item copyWithWrapped(
      {Wrapped<String?>? id, Wrapped<String?>? value}) {
    return AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Tags$Item(
        id: (id != null ? id.value : this.id),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item {
  const AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item({
    this.id,
    this.url,
  });

  factory AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$ItemFromJson(
          json);

  static const toJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$ItemToJson(
          this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'url', includeIfNull: false, defaultValue: 'default')
  final String? url;
  static const fromJsonFactory =
      _$AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$ItemExtension
    on AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item {
  AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item copyWith(
      {String? id, String? url}) {
    return AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item(
        id: id ?? this.id, url: url ?? this.url);
  }

  AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item
      copyWithWrapped({Wrapped<String?>? id, Wrapped<String?>? url}) {
    return AdminPostOrdersOrderClaimsClaimReq$ClaimItems$Item$Images$Item(
        id: (id != null ? id.value : this.id),
        url: (url != null ? url.value : this.url));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductReq$Variants$Item$Prices$Item {
  const AdminPostProductsProductReq$Variants$Item$Prices$Item({
    this.id,
    this.regionId,
    this.currencyCode,
    required this.amount,
    this.minQuantity,
    this.maxQuantity,
  });

  factory AdminPostProductsProductReq$Variants$Item$Prices$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductReq$Variants$Item$Prices$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductReq$Variants$Item$Prices$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductReq$Variants$Item$Prices$ItemToJson(this);

  @JsonKey(name: 'id', includeIfNull: false, defaultValue: 'default')
  final String? id;
  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String? currencyCode;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'min_quantity', includeIfNull: false, defaultValue: 36)
  final int? minQuantity;
  @JsonKey(name: 'max_quantity', includeIfNull: false, defaultValue: 36)
  final int? maxQuantity;
  static const fromJsonFactory =
      _$AdminPostProductsProductReq$Variants$Item$Prices$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductReq$Variants$Item$Prices$ItemExtension
    on AdminPostProductsProductReq$Variants$Item$Prices$Item {
  AdminPostProductsProductReq$Variants$Item$Prices$Item copyWith(
      {String? id,
      String? regionId,
      String? currencyCode,
      int? amount,
      int? minQuantity,
      int? maxQuantity}) {
    return AdminPostProductsProductReq$Variants$Item$Prices$Item(
        id: id ?? this.id,
        regionId: regionId ?? this.regionId,
        currencyCode: currencyCode ?? this.currencyCode,
        amount: amount ?? this.amount,
        minQuantity: minQuantity ?? this.minQuantity,
        maxQuantity: maxQuantity ?? this.maxQuantity);
  }

  AdminPostProductsProductReq$Variants$Item$Prices$Item copyWithWrapped(
      {Wrapped<String?>? id,
      Wrapped<String?>? regionId,
      Wrapped<String?>? currencyCode,
      Wrapped<int>? amount,
      Wrapped<int?>? minQuantity,
      Wrapped<int?>? maxQuantity}) {
    return AdminPostProductsProductReq$Variants$Item$Prices$Item(
        id: (id != null ? id.value : this.id),
        regionId: (regionId != null ? regionId.value : this.regionId),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        amount: (amount != null ? amount.value : this.amount),
        minQuantity:
            (minQuantity != null ? minQuantity.value : this.minQuantity),
        maxQuantity:
            (maxQuantity != null ? maxQuantity.value : this.maxQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsProductReq$Variants$Item$Options$Item {
  const AdminPostProductsProductReq$Variants$Item$Options$Item({
    required this.optionId,
    required this.value,
  });

  factory AdminPostProductsProductReq$Variants$Item$Options$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsProductReq$Variants$Item$Options$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsProductReq$Variants$Item$Options$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsProductReq$Variants$Item$Options$ItemToJson(this);

  @JsonKey(name: 'option_id', includeIfNull: false, defaultValue: 'default')
  final String optionId;
  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory =
      _$AdminPostProductsProductReq$Variants$Item$Options$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsProductReq$Variants$Item$Options$ItemExtension
    on AdminPostProductsProductReq$Variants$Item$Options$Item {
  AdminPostProductsProductReq$Variants$Item$Options$Item copyWith(
      {String? optionId, String? value}) {
    return AdminPostProductsProductReq$Variants$Item$Options$Item(
        optionId: optionId ?? this.optionId, value: value ?? this.value);
  }

  AdminPostProductsProductReq$Variants$Item$Options$Item copyWithWrapped(
      {Wrapped<String>? optionId, Wrapped<String>? value}) {
    return AdminPostProductsProductReq$Variants$Item$Options$Item(
        optionId: (optionId != null ? optionId.value : this.optionId),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq$Variants$Item$Prices$Item {
  const AdminPostProductsReq$Variants$Item$Prices$Item({
    this.regionId,
    this.currencyCode,
    required this.amount,
    this.minQuantity,
    this.maxQuantity,
  });

  factory AdminPostProductsReq$Variants$Item$Prices$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsReq$Variants$Item$Prices$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsReq$Variants$Item$Prices$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsReq$Variants$Item$Prices$ItemToJson(this);

  @JsonKey(name: 'region_id', includeIfNull: false, defaultValue: 'default')
  final String? regionId;
  @JsonKey(name: 'currency_code', includeIfNull: false, defaultValue: 'default')
  final String? currencyCode;
  @JsonKey(name: 'amount', includeIfNull: false, defaultValue: 36)
  final int amount;
  @JsonKey(name: 'min_quantity', includeIfNull: false, defaultValue: 36)
  final int? minQuantity;
  @JsonKey(name: 'max_quantity', includeIfNull: false, defaultValue: 36)
  final int? maxQuantity;
  static const fromJsonFactory =
      _$AdminPostProductsReq$Variants$Item$Prices$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReq$Variants$Item$Prices$ItemExtension
    on AdminPostProductsReq$Variants$Item$Prices$Item {
  AdminPostProductsReq$Variants$Item$Prices$Item copyWith(
      {String? regionId,
      String? currencyCode,
      int? amount,
      int? minQuantity,
      int? maxQuantity}) {
    return AdminPostProductsReq$Variants$Item$Prices$Item(
        regionId: regionId ?? this.regionId,
        currencyCode: currencyCode ?? this.currencyCode,
        amount: amount ?? this.amount,
        minQuantity: minQuantity ?? this.minQuantity,
        maxQuantity: maxQuantity ?? this.maxQuantity);
  }

  AdminPostProductsReq$Variants$Item$Prices$Item copyWithWrapped(
      {Wrapped<String?>? regionId,
      Wrapped<String?>? currencyCode,
      Wrapped<int>? amount,
      Wrapped<int?>? minQuantity,
      Wrapped<int?>? maxQuantity}) {
    return AdminPostProductsReq$Variants$Item$Prices$Item(
        regionId: (regionId != null ? regionId.value : this.regionId),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        amount: (amount != null ? amount.value : this.amount),
        minQuantity:
            (minQuantity != null ? minQuantity.value : this.minQuantity),
        maxQuantity:
            (maxQuantity != null ? maxQuantity.value : this.maxQuantity));
  }
}

@JsonSerializable(explicitToJson: true)
class AdminPostProductsReq$Variants$Item$Options$Item {
  const AdminPostProductsReq$Variants$Item$Options$Item({
    required this.value,
  });

  factory AdminPostProductsReq$Variants$Item$Options$Item.fromJson(
          Map<String, dynamic> json) =>
      _$AdminPostProductsReq$Variants$Item$Options$ItemFromJson(json);

  static const toJsonFactory =
      _$AdminPostProductsReq$Variants$Item$Options$ItemToJson;
  Map<String, dynamic> toJson() =>
      _$AdminPostProductsReq$Variants$Item$Options$ItemToJson(this);

  @JsonKey(name: 'value', includeIfNull: false, defaultValue: 'default')
  final String value;
  static const fromJsonFactory =
      _$AdminPostProductsReq$Variants$Item$Options$ItemFromJson;

  @override
  String toString() => jsonEncode(this);
}

extension $AdminPostProductsReq$Variants$Item$Options$ItemExtension
    on AdminPostProductsReq$Variants$Item$Options$Item {
  AdminPostProductsReq$Variants$Item$Options$Item copyWith({String? value}) {
    return AdminPostProductsReq$Variants$Item$Options$Item(
        value: value ?? this.value);
  }

  AdminPostProductsReq$Variants$Item$Options$Item copyWithWrapped(
      {Wrapped<String>? value}) {
    return AdminPostProductsReq$Variants$Item$Options$Item(
        value: (value != null ? value.value : this.value));
  }
}

String? adminCreateUserRequestRoleNullableToJson(
    enums.AdminCreateUserRequestRole? adminCreateUserRequestRole) {
  return adminCreateUserRequestRole?.value;
}

String? adminCreateUserRequestRoleToJson(
    enums.AdminCreateUserRequestRole adminCreateUserRequestRole) {
  return adminCreateUserRequestRole.value;
}

enums.AdminCreateUserRequestRole adminCreateUserRequestRoleFromJson(
  Object? adminCreateUserRequestRole, [
  enums.AdminCreateUserRequestRole? defaultValue,
]) {
  return enums.AdminCreateUserRequestRole.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminCreateUserRequestRole?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminCreateUserRequestRole.swaggerGeneratedUnknown;
}

enums.AdminCreateUserRequestRole? adminCreateUserRequestRoleNullableFromJson(
  Object? adminCreateUserRequestRole, [
  enums.AdminCreateUserRequestRole? defaultValue,
]) {
  if (adminCreateUserRequestRole == null) {
    return null;
  }
  return enums.AdminCreateUserRequestRole.values
          .firstWhereOrNull((e) => e.value == adminCreateUserRequestRole) ??
      defaultValue;
}

String adminCreateUserRequestRoleExplodedListToJson(
    List<enums.AdminCreateUserRequestRole>? adminCreateUserRequestRole) {
  return adminCreateUserRequestRole?.map((e) => e.value!).join(',') ?? '';
}

List<String> adminCreateUserRequestRoleListToJson(
    List<enums.AdminCreateUserRequestRole>? adminCreateUserRequestRole) {
  if (adminCreateUserRequestRole == null) {
    return [];
  }

  return adminCreateUserRequestRole.map((e) => e.value!).toList();
}

List<enums.AdminCreateUserRequestRole> adminCreateUserRequestRoleListFromJson(
  List? adminCreateUserRequestRole, [
  List<enums.AdminCreateUserRequestRole>? defaultValue,
]) {
  if (adminCreateUserRequestRole == null) {
    return defaultValue ?? [];
  }

  return adminCreateUserRequestRole
      .map((e) => adminCreateUserRequestRoleFromJson(e.toString()))
      .toList();
}

List<enums.AdminCreateUserRequestRole>?
    adminCreateUserRequestRoleNullableListFromJson(
  List? adminCreateUserRequestRole, [
  List<enums.AdminCreateUserRequestRole>? defaultValue,
]) {
  if (adminCreateUserRequestRole == null) {
    return defaultValue;
  }

  return adminCreateUserRequestRole
      .map((e) => adminCreateUserRequestRoleFromJson(e.toString()))
      .toList();
}

String? adminPostDiscountsDiscountConditionsOperatorNullableToJson(
    enums.AdminPostDiscountsDiscountConditionsOperator?
        adminPostDiscountsDiscountConditionsOperator) {
  return adminPostDiscountsDiscountConditionsOperator?.value;
}

String? adminPostDiscountsDiscountConditionsOperatorToJson(
    enums.AdminPostDiscountsDiscountConditionsOperator
        adminPostDiscountsDiscountConditionsOperator) {
  return adminPostDiscountsDiscountConditionsOperator.value;
}

enums.AdminPostDiscountsDiscountConditionsOperator
    adminPostDiscountsDiscountConditionsOperatorFromJson(
  Object? adminPostDiscountsDiscountConditionsOperator, [
  enums.AdminPostDiscountsDiscountConditionsOperator? defaultValue,
]) {
  return enums.AdminPostDiscountsDiscountConditionsOperator.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostDiscountsDiscountConditionsOperator
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums
          .AdminPostDiscountsDiscountConditionsOperator.swaggerGeneratedUnknown;
}

enums.AdminPostDiscountsDiscountConditionsOperator?
    adminPostDiscountsDiscountConditionsOperatorNullableFromJson(
  Object? adminPostDiscountsDiscountConditionsOperator, [
  enums.AdminPostDiscountsDiscountConditionsOperator? defaultValue,
]) {
  if (adminPostDiscountsDiscountConditionsOperator == null) {
    return null;
  }
  return enums.AdminPostDiscountsDiscountConditionsOperator.values
          .firstWhereOrNull(
              (e) => e.value == adminPostDiscountsDiscountConditionsOperator) ??
      defaultValue;
}

String adminPostDiscountsDiscountConditionsOperatorExplodedListToJson(
    List<enums.AdminPostDiscountsDiscountConditionsOperator>?
        adminPostDiscountsDiscountConditionsOperator) {
  return adminPostDiscountsDiscountConditionsOperator
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostDiscountsDiscountConditionsOperatorListToJson(
    List<enums.AdminPostDiscountsDiscountConditionsOperator>?
        adminPostDiscountsDiscountConditionsOperator) {
  if (adminPostDiscountsDiscountConditionsOperator == null) {
    return [];
  }

  return adminPostDiscountsDiscountConditionsOperator
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostDiscountsDiscountConditionsOperator>
    adminPostDiscountsDiscountConditionsOperatorListFromJson(
  List? adminPostDiscountsDiscountConditionsOperator, [
  List<enums.AdminPostDiscountsDiscountConditionsOperator>? defaultValue,
]) {
  if (adminPostDiscountsDiscountConditionsOperator == null) {
    return defaultValue ?? [];
  }

  return adminPostDiscountsDiscountConditionsOperator
      .map((e) =>
          adminPostDiscountsDiscountConditionsOperatorFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostDiscountsDiscountConditionsOperator>?
    adminPostDiscountsDiscountConditionsOperatorNullableListFromJson(
  List? adminPostDiscountsDiscountConditionsOperator, [
  List<enums.AdminPostDiscountsDiscountConditionsOperator>? defaultValue,
]) {
  if (adminPostDiscountsDiscountConditionsOperator == null) {
    return defaultValue;
  }

  return adminPostDiscountsDiscountConditionsOperator
      .map((e) =>
          adminPostDiscountsDiscountConditionsOperatorFromJson(e.toString()))
      .toList();
}

String? adminPostDiscountsDiscountReq$RuleAllocationNullableToJson(
    enums.AdminPostDiscountsDiscountReq$RuleAllocation?
        adminPostDiscountsDiscountReq$RuleAllocation) {
  return adminPostDiscountsDiscountReq$RuleAllocation?.value;
}

String? adminPostDiscountsDiscountReq$RuleAllocationToJson(
    enums.AdminPostDiscountsDiscountReq$RuleAllocation
        adminPostDiscountsDiscountReq$RuleAllocation) {
  return adminPostDiscountsDiscountReq$RuleAllocation.value;
}

enums.AdminPostDiscountsDiscountReq$RuleAllocation
    adminPostDiscountsDiscountReq$RuleAllocationFromJson(
  Object? adminPostDiscountsDiscountReq$RuleAllocation, [
  enums.AdminPostDiscountsDiscountReq$RuleAllocation? defaultValue,
]) {
  return enums.AdminPostDiscountsDiscountReq$RuleAllocation.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostDiscountsDiscountReq$RuleAllocation
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums
          .AdminPostDiscountsDiscountReq$RuleAllocation.swaggerGeneratedUnknown;
}

enums.AdminPostDiscountsDiscountReq$RuleAllocation?
    adminPostDiscountsDiscountReq$RuleAllocationNullableFromJson(
  Object? adminPostDiscountsDiscountReq$RuleAllocation, [
  enums.AdminPostDiscountsDiscountReq$RuleAllocation? defaultValue,
]) {
  if (adminPostDiscountsDiscountReq$RuleAllocation == null) {
    return null;
  }
  return enums.AdminPostDiscountsDiscountReq$RuleAllocation.values
          .firstWhereOrNull(
              (e) => e.value == adminPostDiscountsDiscountReq$RuleAllocation) ??
      defaultValue;
}

String adminPostDiscountsDiscountReq$RuleAllocationExplodedListToJson(
    List<enums.AdminPostDiscountsDiscountReq$RuleAllocation>?
        adminPostDiscountsDiscountReq$RuleAllocation) {
  return adminPostDiscountsDiscountReq$RuleAllocation
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostDiscountsDiscountReq$RuleAllocationListToJson(
    List<enums.AdminPostDiscountsDiscountReq$RuleAllocation>?
        adminPostDiscountsDiscountReq$RuleAllocation) {
  if (adminPostDiscountsDiscountReq$RuleAllocation == null) {
    return [];
  }

  return adminPostDiscountsDiscountReq$RuleAllocation
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostDiscountsDiscountReq$RuleAllocation>
    adminPostDiscountsDiscountReq$RuleAllocationListFromJson(
  List? adminPostDiscountsDiscountReq$RuleAllocation, [
  List<enums.AdminPostDiscountsDiscountReq$RuleAllocation>? defaultValue,
]) {
  if (adminPostDiscountsDiscountReq$RuleAllocation == null) {
    return defaultValue ?? [];
  }

  return adminPostDiscountsDiscountReq$RuleAllocation
      .map((e) =>
          adminPostDiscountsDiscountReq$RuleAllocationFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostDiscountsDiscountReq$RuleAllocation>?
    adminPostDiscountsDiscountReq$RuleAllocationNullableListFromJson(
  List? adminPostDiscountsDiscountReq$RuleAllocation, [
  List<enums.AdminPostDiscountsDiscountReq$RuleAllocation>? defaultValue,
]) {
  if (adminPostDiscountsDiscountReq$RuleAllocation == null) {
    return defaultValue;
  }

  return adminPostDiscountsDiscountReq$RuleAllocation
      .map((e) =>
          adminPostDiscountsDiscountReq$RuleAllocationFromJson(e.toString()))
      .toList();
}

String?
    adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorNullableToJson(
        enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator?
            adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator) {
  return adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator?.value;
}

String? adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorToJson(
    enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
        adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator) {
  return adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator.value;
}

enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
    adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorFromJson(
  Object? adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator, [
  enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator?
      defaultValue,
]) {
  return enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
          .swaggerGeneratedUnknown;
}

enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator?
    adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorNullableFromJson(
  Object? adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator, [
  enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator?
      defaultValue,
]) {
  if (adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator == null) {
    return null;
  }
  return enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator.values
          .firstWhereOrNull((e) =>
              e.value ==
              adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator) ??
      defaultValue;
}

String
    adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorExplodedListToJson(
        List<enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator>?
            adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator) {
  return adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String>
    adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorListToJson(
        List<enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator>?
            adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator) {
  if (adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator == null) {
    return [];
  }

  return adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator>
    adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorListFromJson(
  List? adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator, [
  List<enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator>?
      defaultValue,
]) {
  if (adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator == null) {
    return defaultValue ?? [];
  }

  return adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
      .map((e) =>
          adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorFromJson(
              e.toString()))
      .toList();
}

List<enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator>?
    adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorNullableListFromJson(
  List? adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator, [
  List<enums.AdminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator>?
      defaultValue,
]) {
  if (adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator == null) {
    return defaultValue;
  }

  return adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperator
      .map((e) =>
          adminPostDiscountsDiscountReq$Rule$Conditions$ItemOperatorFromJson(
              e.toString()))
      .toList();
}

String? adminPostDiscountsReq$RuleTypeNullableToJson(
    enums.AdminPostDiscountsReq$RuleType? adminPostDiscountsReq$RuleType) {
  return adminPostDiscountsReq$RuleType?.value;
}

String? adminPostDiscountsReq$RuleTypeToJson(
    enums.AdminPostDiscountsReq$RuleType adminPostDiscountsReq$RuleType) {
  return adminPostDiscountsReq$RuleType.value;
}

enums.AdminPostDiscountsReq$RuleType adminPostDiscountsReq$RuleTypeFromJson(
  Object? adminPostDiscountsReq$RuleType, [
  enums.AdminPostDiscountsReq$RuleType? defaultValue,
]) {
  return enums.AdminPostDiscountsReq$RuleType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminPostDiscountsReq$RuleType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostDiscountsReq$RuleType.swaggerGeneratedUnknown;
}

enums.AdminPostDiscountsReq$RuleType?
    adminPostDiscountsReq$RuleTypeNullableFromJson(
  Object? adminPostDiscountsReq$RuleType, [
  enums.AdminPostDiscountsReq$RuleType? defaultValue,
]) {
  if (adminPostDiscountsReq$RuleType == null) {
    return null;
  }
  return enums.AdminPostDiscountsReq$RuleType.values
          .firstWhereOrNull((e) => e.value == adminPostDiscountsReq$RuleType) ??
      defaultValue;
}

String adminPostDiscountsReq$RuleTypeExplodedListToJson(
    List<enums.AdminPostDiscountsReq$RuleType>?
        adminPostDiscountsReq$RuleType) {
  return adminPostDiscountsReq$RuleType?.map((e) => e.value!).join(',') ?? '';
}

List<String> adminPostDiscountsReq$RuleTypeListToJson(
    List<enums.AdminPostDiscountsReq$RuleType>?
        adminPostDiscountsReq$RuleType) {
  if (adminPostDiscountsReq$RuleType == null) {
    return [];
  }

  return adminPostDiscountsReq$RuleType.map((e) => e.value!).toList();
}

List<enums.AdminPostDiscountsReq$RuleType>
    adminPostDiscountsReq$RuleTypeListFromJson(
  List? adminPostDiscountsReq$RuleType, [
  List<enums.AdminPostDiscountsReq$RuleType>? defaultValue,
]) {
  if (adminPostDiscountsReq$RuleType == null) {
    return defaultValue ?? [];
  }

  return adminPostDiscountsReq$RuleType
      .map((e) => adminPostDiscountsReq$RuleTypeFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostDiscountsReq$RuleType>?
    adminPostDiscountsReq$RuleTypeNullableListFromJson(
  List? adminPostDiscountsReq$RuleType, [
  List<enums.AdminPostDiscountsReq$RuleType>? defaultValue,
]) {
  if (adminPostDiscountsReq$RuleType == null) {
    return defaultValue;
  }

  return adminPostDiscountsReq$RuleType
      .map((e) => adminPostDiscountsReq$RuleTypeFromJson(e.toString()))
      .toList();
}

String? adminPostDiscountsReq$RuleAllocationNullableToJson(
    enums.AdminPostDiscountsReq$RuleAllocation?
        adminPostDiscountsReq$RuleAllocation) {
  return adminPostDiscountsReq$RuleAllocation?.value;
}

String? adminPostDiscountsReq$RuleAllocationToJson(
    enums.AdminPostDiscountsReq$RuleAllocation
        adminPostDiscountsReq$RuleAllocation) {
  return adminPostDiscountsReq$RuleAllocation.value;
}

enums.AdminPostDiscountsReq$RuleAllocation
    adminPostDiscountsReq$RuleAllocationFromJson(
  Object? adminPostDiscountsReq$RuleAllocation, [
  enums.AdminPostDiscountsReq$RuleAllocation? defaultValue,
]) {
  return enums.AdminPostDiscountsReq$RuleAllocation.values.firstWhereOrNull(
          (e) =>
              e.value.toString().toLowerCase() ==
              adminPostDiscountsReq$RuleAllocation?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostDiscountsReq$RuleAllocation.swaggerGeneratedUnknown;
}

enums.AdminPostDiscountsReq$RuleAllocation?
    adminPostDiscountsReq$RuleAllocationNullableFromJson(
  Object? adminPostDiscountsReq$RuleAllocation, [
  enums.AdminPostDiscountsReq$RuleAllocation? defaultValue,
]) {
  if (adminPostDiscountsReq$RuleAllocation == null) {
    return null;
  }
  return enums.AdminPostDiscountsReq$RuleAllocation.values.firstWhereOrNull(
          (e) => e.value == adminPostDiscountsReq$RuleAllocation) ??
      defaultValue;
}

String adminPostDiscountsReq$RuleAllocationExplodedListToJson(
    List<enums.AdminPostDiscountsReq$RuleAllocation>?
        adminPostDiscountsReq$RuleAllocation) {
  return adminPostDiscountsReq$RuleAllocation?.map((e) => e.value!).join(',') ??
      '';
}

List<String> adminPostDiscountsReq$RuleAllocationListToJson(
    List<enums.AdminPostDiscountsReq$RuleAllocation>?
        adminPostDiscountsReq$RuleAllocation) {
  if (adminPostDiscountsReq$RuleAllocation == null) {
    return [];
  }

  return adminPostDiscountsReq$RuleAllocation.map((e) => e.value!).toList();
}

List<enums.AdminPostDiscountsReq$RuleAllocation>
    adminPostDiscountsReq$RuleAllocationListFromJson(
  List? adminPostDiscountsReq$RuleAllocation, [
  List<enums.AdminPostDiscountsReq$RuleAllocation>? defaultValue,
]) {
  if (adminPostDiscountsReq$RuleAllocation == null) {
    return defaultValue ?? [];
  }

  return adminPostDiscountsReq$RuleAllocation
      .map((e) => adminPostDiscountsReq$RuleAllocationFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostDiscountsReq$RuleAllocation>?
    adminPostDiscountsReq$RuleAllocationNullableListFromJson(
  List? adminPostDiscountsReq$RuleAllocation, [
  List<enums.AdminPostDiscountsReq$RuleAllocation>? defaultValue,
]) {
  if (adminPostDiscountsReq$RuleAllocation == null) {
    return defaultValue;
  }

  return adminPostDiscountsReq$RuleAllocation
      .map((e) => adminPostDiscountsReq$RuleAllocationFromJson(e.toString()))
      .toList();
}

String? adminPostDiscountsReq$Rule$Conditions$ItemOperatorNullableToJson(
    enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator?
        adminPostDiscountsReq$Rule$Conditions$ItemOperator) {
  return adminPostDiscountsReq$Rule$Conditions$ItemOperator?.value;
}

String? adminPostDiscountsReq$Rule$Conditions$ItemOperatorToJson(
    enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator
        adminPostDiscountsReq$Rule$Conditions$ItemOperator) {
  return adminPostDiscountsReq$Rule$Conditions$ItemOperator.value;
}

enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator
    adminPostDiscountsReq$Rule$Conditions$ItemOperatorFromJson(
  Object? adminPostDiscountsReq$Rule$Conditions$ItemOperator, [
  enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator? defaultValue,
]) {
  return enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostDiscountsReq$Rule$Conditions$ItemOperator
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator
          .swaggerGeneratedUnknown;
}

enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator?
    adminPostDiscountsReq$Rule$Conditions$ItemOperatorNullableFromJson(
  Object? adminPostDiscountsReq$Rule$Conditions$ItemOperator, [
  enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator? defaultValue,
]) {
  if (adminPostDiscountsReq$Rule$Conditions$ItemOperator == null) {
    return null;
  }
  return enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator.values
          .firstWhereOrNull((e) =>
              e.value == adminPostDiscountsReq$Rule$Conditions$ItemOperator) ??
      defaultValue;
}

String adminPostDiscountsReq$Rule$Conditions$ItemOperatorExplodedListToJson(
    List<enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator>?
        adminPostDiscountsReq$Rule$Conditions$ItemOperator) {
  return adminPostDiscountsReq$Rule$Conditions$ItemOperator
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostDiscountsReq$Rule$Conditions$ItemOperatorListToJson(
    List<enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator>?
        adminPostDiscountsReq$Rule$Conditions$ItemOperator) {
  if (adminPostDiscountsReq$Rule$Conditions$ItemOperator == null) {
    return [];
  }

  return adminPostDiscountsReq$Rule$Conditions$ItemOperator
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator>
    adminPostDiscountsReq$Rule$Conditions$ItemOperatorListFromJson(
  List? adminPostDiscountsReq$Rule$Conditions$ItemOperator, [
  List<enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator>? defaultValue,
]) {
  if (adminPostDiscountsReq$Rule$Conditions$ItemOperator == null) {
    return defaultValue ?? [];
  }

  return adminPostDiscountsReq$Rule$Conditions$ItemOperator
      .map((e) => adminPostDiscountsReq$Rule$Conditions$ItemOperatorFromJson(
          e.toString()))
      .toList();
}

List<enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator>?
    adminPostDiscountsReq$Rule$Conditions$ItemOperatorNullableListFromJson(
  List? adminPostDiscountsReq$Rule$Conditions$ItemOperator, [
  List<enums.AdminPostDiscountsReq$Rule$Conditions$ItemOperator>? defaultValue,
]) {
  if (adminPostDiscountsReq$Rule$Conditions$ItemOperator == null) {
    return defaultValue;
  }

  return adminPostDiscountsReq$Rule$Conditions$ItemOperator
      .map((e) => adminPostDiscountsReq$Rule$Conditions$ItemOperatorFromJson(
          e.toString()))
      .toList();
}

String? adminPostDraftOrdersReqStatusNullableToJson(
    enums.AdminPostDraftOrdersReqStatus? adminPostDraftOrdersReqStatus) {
  return adminPostDraftOrdersReqStatus?.value;
}

String? adminPostDraftOrdersReqStatusToJson(
    enums.AdminPostDraftOrdersReqStatus adminPostDraftOrdersReqStatus) {
  return adminPostDraftOrdersReqStatus.value;
}

enums.AdminPostDraftOrdersReqStatus adminPostDraftOrdersReqStatusFromJson(
  Object? adminPostDraftOrdersReqStatus, [
  enums.AdminPostDraftOrdersReqStatus? defaultValue,
]) {
  return enums.AdminPostDraftOrdersReqStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminPostDraftOrdersReqStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostDraftOrdersReqStatus.swaggerGeneratedUnknown;
}

enums.AdminPostDraftOrdersReqStatus?
    adminPostDraftOrdersReqStatusNullableFromJson(
  Object? adminPostDraftOrdersReqStatus, [
  enums.AdminPostDraftOrdersReqStatus? defaultValue,
]) {
  if (adminPostDraftOrdersReqStatus == null) {
    return null;
  }
  return enums.AdminPostDraftOrdersReqStatus.values
          .firstWhereOrNull((e) => e.value == adminPostDraftOrdersReqStatus) ??
      defaultValue;
}

String adminPostDraftOrdersReqStatusExplodedListToJson(
    List<enums.AdminPostDraftOrdersReqStatus>? adminPostDraftOrdersReqStatus) {
  return adminPostDraftOrdersReqStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> adminPostDraftOrdersReqStatusListToJson(
    List<enums.AdminPostDraftOrdersReqStatus>? adminPostDraftOrdersReqStatus) {
  if (adminPostDraftOrdersReqStatus == null) {
    return [];
  }

  return adminPostDraftOrdersReqStatus.map((e) => e.value!).toList();
}

List<enums.AdminPostDraftOrdersReqStatus>
    adminPostDraftOrdersReqStatusListFromJson(
  List? adminPostDraftOrdersReqStatus, [
  List<enums.AdminPostDraftOrdersReqStatus>? defaultValue,
]) {
  if (adminPostDraftOrdersReqStatus == null) {
    return defaultValue ?? [];
  }

  return adminPostDraftOrdersReqStatus
      .map((e) => adminPostDraftOrdersReqStatusFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostDraftOrdersReqStatus>?
    adminPostDraftOrdersReqStatusNullableListFromJson(
  List? adminPostDraftOrdersReqStatus, [
  List<enums.AdminPostDraftOrdersReqStatus>? defaultValue,
]) {
  if (adminPostDraftOrdersReqStatus == null) {
    return defaultValue;
  }

  return adminPostDraftOrdersReqStatus
      .map((e) => adminPostDraftOrdersReqStatusFromJson(e.toString()))
      .toList();
}

String? adminPostInvitesReqRoleNullableToJson(
    enums.AdminPostInvitesReqRole? adminPostInvitesReqRole) {
  return adminPostInvitesReqRole?.value;
}

String? adminPostInvitesReqRoleToJson(
    enums.AdminPostInvitesReqRole adminPostInvitesReqRole) {
  return adminPostInvitesReqRole.value;
}

enums.AdminPostInvitesReqRole adminPostInvitesReqRoleFromJson(
  Object? adminPostInvitesReqRole, [
  enums.AdminPostInvitesReqRole? defaultValue,
]) {
  return enums.AdminPostInvitesReqRole.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminPostInvitesReqRole?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostInvitesReqRole.swaggerGeneratedUnknown;
}

enums.AdminPostInvitesReqRole? adminPostInvitesReqRoleNullableFromJson(
  Object? adminPostInvitesReqRole, [
  enums.AdminPostInvitesReqRole? defaultValue,
]) {
  if (adminPostInvitesReqRole == null) {
    return null;
  }
  return enums.AdminPostInvitesReqRole.values
          .firstWhereOrNull((e) => e.value == adminPostInvitesReqRole) ??
      defaultValue;
}

String adminPostInvitesReqRoleExplodedListToJson(
    List<enums.AdminPostInvitesReqRole>? adminPostInvitesReqRole) {
  return adminPostInvitesReqRole?.map((e) => e.value!).join(',') ?? '';
}

List<String> adminPostInvitesReqRoleListToJson(
    List<enums.AdminPostInvitesReqRole>? adminPostInvitesReqRole) {
  if (adminPostInvitesReqRole == null) {
    return [];
  }

  return adminPostInvitesReqRole.map((e) => e.value!).toList();
}

List<enums.AdminPostInvitesReqRole> adminPostInvitesReqRoleListFromJson(
  List? adminPostInvitesReqRole, [
  List<enums.AdminPostInvitesReqRole>? defaultValue,
]) {
  if (adminPostInvitesReqRole == null) {
    return defaultValue ?? [];
  }

  return adminPostInvitesReqRole
      .map((e) => adminPostInvitesReqRoleFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostInvitesReqRole>?
    adminPostInvitesReqRoleNullableListFromJson(
  List? adminPostInvitesReqRole, [
  List<enums.AdminPostInvitesReqRole>? defaultValue,
]) {
  if (adminPostInvitesReqRole == null) {
    return defaultValue;
  }

  return adminPostInvitesReqRole
      .map((e) => adminPostInvitesReqRoleFromJson(e.toString()))
      .toList();
}

String? adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonNullableToJson(
    enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason?
        adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason) {
  return adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason?.value;
}

String? adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonToJson(
    enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason
        adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason) {
  return adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason.value;
}

enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason
    adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonFromJson(
  Object? adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason, [
  enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason? defaultValue,
]) {
  return enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason
          .swaggerGeneratedUnknown;
}

enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason?
    adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonNullableFromJson(
  Object? adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason, [
  enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason? defaultValue,
]) {
  if (adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason == null) {
    return null;
  }
  return enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason.values
          .firstWhereOrNull((e) =>
              e.value ==
              adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason) ??
      defaultValue;
}

String
    adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonExplodedListToJson(
        List<enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason>?
            adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason) {
  return adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonListToJson(
    List<enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason>?
        adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason) {
  if (adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason == null) {
    return [];
  }

  return adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason>
    adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonListFromJson(
  List? adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason, [
  List<enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason>?
      defaultValue,
]) {
  if (adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason == null) {
    return defaultValue ?? [];
  }

  return adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason
      .map((e) =>
          adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonFromJson(
              e.toString()))
      .toList();
}

List<enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason>?
    adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonNullableListFromJson(
  List? adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason, [
  List<enums.AdminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason>?
      defaultValue,
]) {
  if (adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason == null) {
    return defaultValue;
  }

  return adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReason
      .map((e) =>
          adminPostOrdersOrderClaimsClaimReq$ClaimItems$ItemReasonFromJson(
              e.toString()))
      .toList();
}

String? adminPostOrdersOrderClaimsReqTypeNullableToJson(
    enums.AdminPostOrdersOrderClaimsReqType?
        adminPostOrdersOrderClaimsReqType) {
  return adminPostOrdersOrderClaimsReqType?.value;
}

String? adminPostOrdersOrderClaimsReqTypeToJson(
    enums.AdminPostOrdersOrderClaimsReqType adminPostOrdersOrderClaimsReqType) {
  return adminPostOrdersOrderClaimsReqType.value;
}

enums.AdminPostOrdersOrderClaimsReqType
    adminPostOrdersOrderClaimsReqTypeFromJson(
  Object? adminPostOrdersOrderClaimsReqType, [
  enums.AdminPostOrdersOrderClaimsReqType? defaultValue,
]) {
  return enums.AdminPostOrdersOrderClaimsReqType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminPostOrdersOrderClaimsReqType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostOrdersOrderClaimsReqType.swaggerGeneratedUnknown;
}

enums.AdminPostOrdersOrderClaimsReqType?
    adminPostOrdersOrderClaimsReqTypeNullableFromJson(
  Object? adminPostOrdersOrderClaimsReqType, [
  enums.AdminPostOrdersOrderClaimsReqType? defaultValue,
]) {
  if (adminPostOrdersOrderClaimsReqType == null) {
    return null;
  }
  return enums.AdminPostOrdersOrderClaimsReqType.values.firstWhereOrNull(
          (e) => e.value == adminPostOrdersOrderClaimsReqType) ??
      defaultValue;
}

String adminPostOrdersOrderClaimsReqTypeExplodedListToJson(
    List<enums.AdminPostOrdersOrderClaimsReqType>?
        adminPostOrdersOrderClaimsReqType) {
  return adminPostOrdersOrderClaimsReqType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> adminPostOrdersOrderClaimsReqTypeListToJson(
    List<enums.AdminPostOrdersOrderClaimsReqType>?
        adminPostOrdersOrderClaimsReqType) {
  if (adminPostOrdersOrderClaimsReqType == null) {
    return [];
  }

  return adminPostOrdersOrderClaimsReqType.map((e) => e.value!).toList();
}

List<enums.AdminPostOrdersOrderClaimsReqType>
    adminPostOrdersOrderClaimsReqTypeListFromJson(
  List? adminPostOrdersOrderClaimsReqType, [
  List<enums.AdminPostOrdersOrderClaimsReqType>? defaultValue,
]) {
  if (adminPostOrdersOrderClaimsReqType == null) {
    return defaultValue ?? [];
  }

  return adminPostOrdersOrderClaimsReqType
      .map((e) => adminPostOrdersOrderClaimsReqTypeFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostOrdersOrderClaimsReqType>?
    adminPostOrdersOrderClaimsReqTypeNullableListFromJson(
  List? adminPostOrdersOrderClaimsReqType, [
  List<enums.AdminPostOrdersOrderClaimsReqType>? defaultValue,
]) {
  if (adminPostOrdersOrderClaimsReqType == null) {
    return defaultValue;
  }

  return adminPostOrdersOrderClaimsReqType
      .map((e) => adminPostOrdersOrderClaimsReqTypeFromJson(e.toString()))
      .toList();
}

String? adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonNullableToJson(
    enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason?
        adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason) {
  return adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason?.value;
}

String? adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonToJson(
    enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason
        adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason) {
  return adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason.value;
}

enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason
    adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonFromJson(
  Object? adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason, [
  enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason? defaultValue,
]) {
  return enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason
          .swaggerGeneratedUnknown;
}

enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason?
    adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonNullableFromJson(
  Object? adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason, [
  enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason? defaultValue,
]) {
  if (adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason == null) {
    return null;
  }
  return enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason.values
          .firstWhereOrNull((e) =>
              e.value == adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason) ??
      defaultValue;
}

String adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonExplodedListToJson(
    List<enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason>?
        adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason) {
  return adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonListToJson(
    List<enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason>?
        adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason) {
  if (adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason == null) {
    return [];
  }

  return adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason>
    adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonListFromJson(
  List? adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason, [
  List<enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason>? defaultValue,
]) {
  if (adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason == null) {
    return defaultValue ?? [];
  }

  return adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason
      .map((e) => adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonFromJson(
          e.toString()))
      .toList();
}

List<enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason>?
    adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonNullableListFromJson(
  List? adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason, [
  List<enums.AdminPostOrdersOrderClaimsReq$ClaimItems$ItemReason>? defaultValue,
]) {
  if (adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason == null) {
    return defaultValue;
  }

  return adminPostOrdersOrderClaimsReq$ClaimItems$ItemReason
      .map((e) => adminPostOrdersOrderClaimsReq$ClaimItems$ItemReasonFromJson(
          e.toString()))
      .toList();
}

String? adminPostPriceListsPriceListPriceListReqTypeNullableToJson(
    enums.AdminPostPriceListsPriceListPriceListReqType?
        adminPostPriceListsPriceListPriceListReqType) {
  return adminPostPriceListsPriceListPriceListReqType?.value;
}

String? adminPostPriceListsPriceListPriceListReqTypeToJson(
    enums.AdminPostPriceListsPriceListPriceListReqType
        adminPostPriceListsPriceListPriceListReqType) {
  return adminPostPriceListsPriceListPriceListReqType.value;
}

enums.AdminPostPriceListsPriceListPriceListReqType
    adminPostPriceListsPriceListPriceListReqTypeFromJson(
  Object? adminPostPriceListsPriceListPriceListReqType, [
  enums.AdminPostPriceListsPriceListPriceListReqType? defaultValue,
]) {
  return enums.AdminPostPriceListsPriceListPriceListReqType.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostPriceListsPriceListPriceListReqType
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums
          .AdminPostPriceListsPriceListPriceListReqType.swaggerGeneratedUnknown;
}

enums.AdminPostPriceListsPriceListPriceListReqType?
    adminPostPriceListsPriceListPriceListReqTypeNullableFromJson(
  Object? adminPostPriceListsPriceListPriceListReqType, [
  enums.AdminPostPriceListsPriceListPriceListReqType? defaultValue,
]) {
  if (adminPostPriceListsPriceListPriceListReqType == null) {
    return null;
  }
  return enums.AdminPostPriceListsPriceListPriceListReqType.values
          .firstWhereOrNull(
              (e) => e.value == adminPostPriceListsPriceListPriceListReqType) ??
      defaultValue;
}

String adminPostPriceListsPriceListPriceListReqTypeExplodedListToJson(
    List<enums.AdminPostPriceListsPriceListPriceListReqType>?
        adminPostPriceListsPriceListPriceListReqType) {
  return adminPostPriceListsPriceListPriceListReqType
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostPriceListsPriceListPriceListReqTypeListToJson(
    List<enums.AdminPostPriceListsPriceListPriceListReqType>?
        adminPostPriceListsPriceListPriceListReqType) {
  if (adminPostPriceListsPriceListPriceListReqType == null) {
    return [];
  }

  return adminPostPriceListsPriceListPriceListReqType
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostPriceListsPriceListPriceListReqType>
    adminPostPriceListsPriceListPriceListReqTypeListFromJson(
  List? adminPostPriceListsPriceListPriceListReqType, [
  List<enums.AdminPostPriceListsPriceListPriceListReqType>? defaultValue,
]) {
  if (adminPostPriceListsPriceListPriceListReqType == null) {
    return defaultValue ?? [];
  }

  return adminPostPriceListsPriceListPriceListReqType
      .map((e) =>
          adminPostPriceListsPriceListPriceListReqTypeFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostPriceListsPriceListPriceListReqType>?
    adminPostPriceListsPriceListPriceListReqTypeNullableListFromJson(
  List? adminPostPriceListsPriceListPriceListReqType, [
  List<enums.AdminPostPriceListsPriceListPriceListReqType>? defaultValue,
]) {
  if (adminPostPriceListsPriceListPriceListReqType == null) {
    return defaultValue;
  }

  return adminPostPriceListsPriceListPriceListReqType
      .map((e) =>
          adminPostPriceListsPriceListPriceListReqTypeFromJson(e.toString()))
      .toList();
}

String? adminPostPriceListsPriceListPriceListReqStatusNullableToJson(
    enums.AdminPostPriceListsPriceListPriceListReqStatus?
        adminPostPriceListsPriceListPriceListReqStatus) {
  return adminPostPriceListsPriceListPriceListReqStatus?.value;
}

String? adminPostPriceListsPriceListPriceListReqStatusToJson(
    enums.AdminPostPriceListsPriceListPriceListReqStatus
        adminPostPriceListsPriceListPriceListReqStatus) {
  return adminPostPriceListsPriceListPriceListReqStatus.value;
}

enums.AdminPostPriceListsPriceListPriceListReqStatus
    adminPostPriceListsPriceListPriceListReqStatusFromJson(
  Object? adminPostPriceListsPriceListPriceListReqStatus, [
  enums.AdminPostPriceListsPriceListPriceListReqStatus? defaultValue,
]) {
  return enums.AdminPostPriceListsPriceListPriceListReqStatus.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostPriceListsPriceListPriceListReqStatus
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostPriceListsPriceListPriceListReqStatus
          .swaggerGeneratedUnknown;
}

enums.AdminPostPriceListsPriceListPriceListReqStatus?
    adminPostPriceListsPriceListPriceListReqStatusNullableFromJson(
  Object? adminPostPriceListsPriceListPriceListReqStatus, [
  enums.AdminPostPriceListsPriceListPriceListReqStatus? defaultValue,
]) {
  if (adminPostPriceListsPriceListPriceListReqStatus == null) {
    return null;
  }
  return enums.AdminPostPriceListsPriceListPriceListReqStatus.values
          .firstWhereOrNull((e) =>
              e.value == adminPostPriceListsPriceListPriceListReqStatus) ??
      defaultValue;
}

String adminPostPriceListsPriceListPriceListReqStatusExplodedListToJson(
    List<enums.AdminPostPriceListsPriceListPriceListReqStatus>?
        adminPostPriceListsPriceListPriceListReqStatus) {
  return adminPostPriceListsPriceListPriceListReqStatus
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostPriceListsPriceListPriceListReqStatusListToJson(
    List<enums.AdminPostPriceListsPriceListPriceListReqStatus>?
        adminPostPriceListsPriceListPriceListReqStatus) {
  if (adminPostPriceListsPriceListPriceListReqStatus == null) {
    return [];
  }

  return adminPostPriceListsPriceListPriceListReqStatus
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostPriceListsPriceListPriceListReqStatus>
    adminPostPriceListsPriceListPriceListReqStatusListFromJson(
  List? adminPostPriceListsPriceListPriceListReqStatus, [
  List<enums.AdminPostPriceListsPriceListPriceListReqStatus>? defaultValue,
]) {
  if (adminPostPriceListsPriceListPriceListReqStatus == null) {
    return defaultValue ?? [];
  }

  return adminPostPriceListsPriceListPriceListReqStatus
      .map((e) =>
          adminPostPriceListsPriceListPriceListReqStatusFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostPriceListsPriceListPriceListReqStatus>?
    adminPostPriceListsPriceListPriceListReqStatusNullableListFromJson(
  List? adminPostPriceListsPriceListPriceListReqStatus, [
  List<enums.AdminPostPriceListsPriceListPriceListReqStatus>? defaultValue,
]) {
  if (adminPostPriceListsPriceListPriceListReqStatus == null) {
    return defaultValue;
  }

  return adminPostPriceListsPriceListPriceListReqStatus
      .map((e) =>
          adminPostPriceListsPriceListPriceListReqStatusFromJson(e.toString()))
      .toList();
}

String? adminPostPriceListsPriceListReqTypeNullableToJson(
    enums.AdminPostPriceListsPriceListReqType?
        adminPostPriceListsPriceListReqType) {
  return adminPostPriceListsPriceListReqType?.value;
}

String? adminPostPriceListsPriceListReqTypeToJson(
    enums.AdminPostPriceListsPriceListReqType
        adminPostPriceListsPriceListReqType) {
  return adminPostPriceListsPriceListReqType.value;
}

enums.AdminPostPriceListsPriceListReqType
    adminPostPriceListsPriceListReqTypeFromJson(
  Object? adminPostPriceListsPriceListReqType, [
  enums.AdminPostPriceListsPriceListReqType? defaultValue,
]) {
  return enums.AdminPostPriceListsPriceListReqType.values.firstWhereOrNull(
          (e) =>
              e.value.toString().toLowerCase() ==
              adminPostPriceListsPriceListReqType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostPriceListsPriceListReqType.swaggerGeneratedUnknown;
}

enums.AdminPostPriceListsPriceListReqType?
    adminPostPriceListsPriceListReqTypeNullableFromJson(
  Object? adminPostPriceListsPriceListReqType, [
  enums.AdminPostPriceListsPriceListReqType? defaultValue,
]) {
  if (adminPostPriceListsPriceListReqType == null) {
    return null;
  }
  return enums.AdminPostPriceListsPriceListReqType.values.firstWhereOrNull(
          (e) => e.value == adminPostPriceListsPriceListReqType) ??
      defaultValue;
}

String adminPostPriceListsPriceListReqTypeExplodedListToJson(
    List<enums.AdminPostPriceListsPriceListReqType>?
        adminPostPriceListsPriceListReqType) {
  return adminPostPriceListsPriceListReqType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> adminPostPriceListsPriceListReqTypeListToJson(
    List<enums.AdminPostPriceListsPriceListReqType>?
        adminPostPriceListsPriceListReqType) {
  if (adminPostPriceListsPriceListReqType == null) {
    return [];
  }

  return adminPostPriceListsPriceListReqType.map((e) => e.value!).toList();
}

List<enums.AdminPostPriceListsPriceListReqType>
    adminPostPriceListsPriceListReqTypeListFromJson(
  List? adminPostPriceListsPriceListReqType, [
  List<enums.AdminPostPriceListsPriceListReqType>? defaultValue,
]) {
  if (adminPostPriceListsPriceListReqType == null) {
    return defaultValue ?? [];
  }

  return adminPostPriceListsPriceListReqType
      .map((e) => adminPostPriceListsPriceListReqTypeFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostPriceListsPriceListReqType>?
    adminPostPriceListsPriceListReqTypeNullableListFromJson(
  List? adminPostPriceListsPriceListReqType, [
  List<enums.AdminPostPriceListsPriceListReqType>? defaultValue,
]) {
  if (adminPostPriceListsPriceListReqType == null) {
    return defaultValue;
  }

  return adminPostPriceListsPriceListReqType
      .map((e) => adminPostPriceListsPriceListReqTypeFromJson(e.toString()))
      .toList();
}

String? adminPostPriceListsPriceListReqStatusNullableToJson(
    enums.AdminPostPriceListsPriceListReqStatus?
        adminPostPriceListsPriceListReqStatus) {
  return adminPostPriceListsPriceListReqStatus?.value;
}

String? adminPostPriceListsPriceListReqStatusToJson(
    enums.AdminPostPriceListsPriceListReqStatus
        adminPostPriceListsPriceListReqStatus) {
  return adminPostPriceListsPriceListReqStatus.value;
}

enums.AdminPostPriceListsPriceListReqStatus
    adminPostPriceListsPriceListReqStatusFromJson(
  Object? adminPostPriceListsPriceListReqStatus, [
  enums.AdminPostPriceListsPriceListReqStatus? defaultValue,
]) {
  return enums.AdminPostPriceListsPriceListReqStatus.values.firstWhereOrNull(
          (e) =>
              e.value.toString().toLowerCase() ==
              adminPostPriceListsPriceListReqStatus
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostPriceListsPriceListReqStatus.swaggerGeneratedUnknown;
}

enums.AdminPostPriceListsPriceListReqStatus?
    adminPostPriceListsPriceListReqStatusNullableFromJson(
  Object? adminPostPriceListsPriceListReqStatus, [
  enums.AdminPostPriceListsPriceListReqStatus? defaultValue,
]) {
  if (adminPostPriceListsPriceListReqStatus == null) {
    return null;
  }
  return enums.AdminPostPriceListsPriceListReqStatus.values.firstWhereOrNull(
          (e) => e.value == adminPostPriceListsPriceListReqStatus) ??
      defaultValue;
}

String adminPostPriceListsPriceListReqStatusExplodedListToJson(
    List<enums.AdminPostPriceListsPriceListReqStatus>?
        adminPostPriceListsPriceListReqStatus) {
  return adminPostPriceListsPriceListReqStatus
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostPriceListsPriceListReqStatusListToJson(
    List<enums.AdminPostPriceListsPriceListReqStatus>?
        adminPostPriceListsPriceListReqStatus) {
  if (adminPostPriceListsPriceListReqStatus == null) {
    return [];
  }

  return adminPostPriceListsPriceListReqStatus.map((e) => e.value!).toList();
}

List<enums.AdminPostPriceListsPriceListReqStatus>
    adminPostPriceListsPriceListReqStatusListFromJson(
  List? adminPostPriceListsPriceListReqStatus, [
  List<enums.AdminPostPriceListsPriceListReqStatus>? defaultValue,
]) {
  if (adminPostPriceListsPriceListReqStatus == null) {
    return defaultValue ?? [];
  }

  return adminPostPriceListsPriceListReqStatus
      .map((e) => adminPostPriceListsPriceListReqStatusFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostPriceListsPriceListReqStatus>?
    adminPostPriceListsPriceListReqStatusNullableListFromJson(
  List? adminPostPriceListsPriceListReqStatus, [
  List<enums.AdminPostPriceListsPriceListReqStatus>? defaultValue,
]) {
  if (adminPostPriceListsPriceListReqStatus == null) {
    return defaultValue;
  }

  return adminPostPriceListsPriceListReqStatus
      .map((e) => adminPostPriceListsPriceListReqStatusFromJson(e.toString()))
      .toList();
}

String? adminPostProductsProductReqStatusNullableToJson(
    enums.AdminPostProductsProductReqStatus?
        adminPostProductsProductReqStatus) {
  return adminPostProductsProductReqStatus?.value;
}

String? adminPostProductsProductReqStatusToJson(
    enums.AdminPostProductsProductReqStatus adminPostProductsProductReqStatus) {
  return adminPostProductsProductReqStatus.value;
}

enums.AdminPostProductsProductReqStatus
    adminPostProductsProductReqStatusFromJson(
  Object? adminPostProductsProductReqStatus, [
  enums.AdminPostProductsProductReqStatus? defaultValue,
]) {
  return enums.AdminPostProductsProductReqStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminPostProductsProductReqStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostProductsProductReqStatus.swaggerGeneratedUnknown;
}

enums.AdminPostProductsProductReqStatus?
    adminPostProductsProductReqStatusNullableFromJson(
  Object? adminPostProductsProductReqStatus, [
  enums.AdminPostProductsProductReqStatus? defaultValue,
]) {
  if (adminPostProductsProductReqStatus == null) {
    return null;
  }
  return enums.AdminPostProductsProductReqStatus.values.firstWhereOrNull(
          (e) => e.value == adminPostProductsProductReqStatus) ??
      defaultValue;
}

String adminPostProductsProductReqStatusExplodedListToJson(
    List<enums.AdminPostProductsProductReqStatus>?
        adminPostProductsProductReqStatus) {
  return adminPostProductsProductReqStatus?.map((e) => e.value!).join(',') ??
      '';
}

List<String> adminPostProductsProductReqStatusListToJson(
    List<enums.AdminPostProductsProductReqStatus>?
        adminPostProductsProductReqStatus) {
  if (adminPostProductsProductReqStatus == null) {
    return [];
  }

  return adminPostProductsProductReqStatus.map((e) => e.value!).toList();
}

List<enums.AdminPostProductsProductReqStatus>
    adminPostProductsProductReqStatusListFromJson(
  List? adminPostProductsProductReqStatus, [
  List<enums.AdminPostProductsProductReqStatus>? defaultValue,
]) {
  if (adminPostProductsProductReqStatus == null) {
    return defaultValue ?? [];
  }

  return adminPostProductsProductReqStatus
      .map((e) => adminPostProductsProductReqStatusFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostProductsProductReqStatus>?
    adminPostProductsProductReqStatusNullableListFromJson(
  List? adminPostProductsProductReqStatus, [
  List<enums.AdminPostProductsProductReqStatus>? defaultValue,
]) {
  if (adminPostProductsProductReqStatus == null) {
    return defaultValue;
  }

  return adminPostProductsProductReqStatus
      .map((e) => adminPostProductsProductReqStatusFromJson(e.toString()))
      .toList();
}

String? adminPostProductsReqStatusNullableToJson(
    enums.AdminPostProductsReqStatus? adminPostProductsReqStatus) {
  return adminPostProductsReqStatus?.value;
}

String? adminPostProductsReqStatusToJson(
    enums.AdminPostProductsReqStatus adminPostProductsReqStatus) {
  return adminPostProductsReqStatus.value;
}

enums.AdminPostProductsReqStatus adminPostProductsReqStatusFromJson(
  Object? adminPostProductsReqStatus, [
  enums.AdminPostProductsReqStatus? defaultValue,
]) {
  return enums.AdminPostProductsReqStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminPostProductsReqStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostProductsReqStatus.swaggerGeneratedUnknown;
}

enums.AdminPostProductsReqStatus? adminPostProductsReqStatusNullableFromJson(
  Object? adminPostProductsReqStatus, [
  enums.AdminPostProductsReqStatus? defaultValue,
]) {
  if (adminPostProductsReqStatus == null) {
    return null;
  }
  return enums.AdminPostProductsReqStatus.values
          .firstWhereOrNull((e) => e.value == adminPostProductsReqStatus) ??
      defaultValue;
}

String adminPostProductsReqStatusExplodedListToJson(
    List<enums.AdminPostProductsReqStatus>? adminPostProductsReqStatus) {
  return adminPostProductsReqStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> adminPostProductsReqStatusListToJson(
    List<enums.AdminPostProductsReqStatus>? adminPostProductsReqStatus) {
  if (adminPostProductsReqStatus == null) {
    return [];
  }

  return adminPostProductsReqStatus.map((e) => e.value!).toList();
}

List<enums.AdminPostProductsReqStatus> adminPostProductsReqStatusListFromJson(
  List? adminPostProductsReqStatus, [
  List<enums.AdminPostProductsReqStatus>? defaultValue,
]) {
  if (adminPostProductsReqStatus == null) {
    return defaultValue ?? [];
  }

  return adminPostProductsReqStatus
      .map((e) => adminPostProductsReqStatusFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostProductsReqStatus>?
    adminPostProductsReqStatusNullableListFromJson(
  List? adminPostProductsReqStatus, [
  List<enums.AdminPostProductsReqStatus>? defaultValue,
]) {
  if (adminPostProductsReqStatus == null) {
    return defaultValue;
  }

  return adminPostProductsReqStatus
      .map((e) => adminPostProductsReqStatusFromJson(e.toString()))
      .toList();
}

String? adminPostShippingOptionsOptionReq$Requirements$ItemTypeNullableToJson(
    enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType?
        adminPostShippingOptionsOptionReq$Requirements$ItemType) {
  return adminPostShippingOptionsOptionReq$Requirements$ItemType?.value;
}

String? adminPostShippingOptionsOptionReq$Requirements$ItemTypeToJson(
    enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType
        adminPostShippingOptionsOptionReq$Requirements$ItemType) {
  return adminPostShippingOptionsOptionReq$Requirements$ItemType.value;
}

enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType
    adminPostShippingOptionsOptionReq$Requirements$ItemTypeFromJson(
  Object? adminPostShippingOptionsOptionReq$Requirements$ItemType, [
  enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType? defaultValue,
]) {
  return enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostShippingOptionsOptionReq$Requirements$ItemType
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType
          .swaggerGeneratedUnknown;
}

enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType?
    adminPostShippingOptionsOptionReq$Requirements$ItemTypeNullableFromJson(
  Object? adminPostShippingOptionsOptionReq$Requirements$ItemType, [
  enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType? defaultValue,
]) {
  if (adminPostShippingOptionsOptionReq$Requirements$ItemType == null) {
    return null;
  }
  return enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType.values
          .firstWhereOrNull((e) =>
              e.value ==
              adminPostShippingOptionsOptionReq$Requirements$ItemType) ??
      defaultValue;
}

String
    adminPostShippingOptionsOptionReq$Requirements$ItemTypeExplodedListToJson(
        List<enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType>?
            adminPostShippingOptionsOptionReq$Requirements$ItemType) {
  return adminPostShippingOptionsOptionReq$Requirements$ItemType
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostShippingOptionsOptionReq$Requirements$ItemTypeListToJson(
    List<enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType>?
        adminPostShippingOptionsOptionReq$Requirements$ItemType) {
  if (adminPostShippingOptionsOptionReq$Requirements$ItemType == null) {
    return [];
  }

  return adminPostShippingOptionsOptionReq$Requirements$ItemType
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType>
    adminPostShippingOptionsOptionReq$Requirements$ItemTypeListFromJson(
  List? adminPostShippingOptionsOptionReq$Requirements$ItemType, [
  List<enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType>?
      defaultValue,
]) {
  if (adminPostShippingOptionsOptionReq$Requirements$ItemType == null) {
    return defaultValue ?? [];
  }

  return adminPostShippingOptionsOptionReq$Requirements$ItemType
      .map((e) =>
          adminPostShippingOptionsOptionReq$Requirements$ItemTypeFromJson(
              e.toString()))
      .toList();
}

List<enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType>?
    adminPostShippingOptionsOptionReq$Requirements$ItemTypeNullableListFromJson(
  List? adminPostShippingOptionsOptionReq$Requirements$ItemType, [
  List<enums.AdminPostShippingOptionsOptionReq$Requirements$ItemType>?
      defaultValue,
]) {
  if (adminPostShippingOptionsOptionReq$Requirements$ItemType == null) {
    return defaultValue;
  }

  return adminPostShippingOptionsOptionReq$Requirements$ItemType
      .map((e) =>
          adminPostShippingOptionsOptionReq$Requirements$ItemTypeFromJson(
              e.toString()))
      .toList();
}

String? adminPostShippingOptionsReqPriceTypeNullableToJson(
    enums.AdminPostShippingOptionsReqPriceType?
        adminPostShippingOptionsReqPriceType) {
  return adminPostShippingOptionsReqPriceType?.value;
}

String? adminPostShippingOptionsReqPriceTypeToJson(
    enums.AdminPostShippingOptionsReqPriceType
        adminPostShippingOptionsReqPriceType) {
  return adminPostShippingOptionsReqPriceType.value;
}

enums.AdminPostShippingOptionsReqPriceType
    adminPostShippingOptionsReqPriceTypeFromJson(
  Object? adminPostShippingOptionsReqPriceType, [
  enums.AdminPostShippingOptionsReqPriceType? defaultValue,
]) {
  return enums.AdminPostShippingOptionsReqPriceType.values.firstWhereOrNull(
          (e) =>
              e.value.toString().toLowerCase() ==
              adminPostShippingOptionsReqPriceType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostShippingOptionsReqPriceType.swaggerGeneratedUnknown;
}

enums.AdminPostShippingOptionsReqPriceType?
    adminPostShippingOptionsReqPriceTypeNullableFromJson(
  Object? adminPostShippingOptionsReqPriceType, [
  enums.AdminPostShippingOptionsReqPriceType? defaultValue,
]) {
  if (adminPostShippingOptionsReqPriceType == null) {
    return null;
  }
  return enums.AdminPostShippingOptionsReqPriceType.values.firstWhereOrNull(
          (e) => e.value == adminPostShippingOptionsReqPriceType) ??
      defaultValue;
}

String adminPostShippingOptionsReqPriceTypeExplodedListToJson(
    List<enums.AdminPostShippingOptionsReqPriceType>?
        adminPostShippingOptionsReqPriceType) {
  return adminPostShippingOptionsReqPriceType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> adminPostShippingOptionsReqPriceTypeListToJson(
    List<enums.AdminPostShippingOptionsReqPriceType>?
        adminPostShippingOptionsReqPriceType) {
  if (adminPostShippingOptionsReqPriceType == null) {
    return [];
  }

  return adminPostShippingOptionsReqPriceType.map((e) => e.value!).toList();
}

List<enums.AdminPostShippingOptionsReqPriceType>
    adminPostShippingOptionsReqPriceTypeListFromJson(
  List? adminPostShippingOptionsReqPriceType, [
  List<enums.AdminPostShippingOptionsReqPriceType>? defaultValue,
]) {
  if (adminPostShippingOptionsReqPriceType == null) {
    return defaultValue ?? [];
  }

  return adminPostShippingOptionsReqPriceType
      .map((e) => adminPostShippingOptionsReqPriceTypeFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostShippingOptionsReqPriceType>?
    adminPostShippingOptionsReqPriceTypeNullableListFromJson(
  List? adminPostShippingOptionsReqPriceType, [
  List<enums.AdminPostShippingOptionsReqPriceType>? defaultValue,
]) {
  if (adminPostShippingOptionsReqPriceType == null) {
    return defaultValue;
  }

  return adminPostShippingOptionsReqPriceType
      .map((e) => adminPostShippingOptionsReqPriceTypeFromJson(e.toString()))
      .toList();
}

String? adminPostShippingOptionsReq$Requirements$ItemTypeNullableToJson(
    enums.AdminPostShippingOptionsReq$Requirements$ItemType?
        adminPostShippingOptionsReq$Requirements$ItemType) {
  return adminPostShippingOptionsReq$Requirements$ItemType?.value;
}

String? adminPostShippingOptionsReq$Requirements$ItemTypeToJson(
    enums.AdminPostShippingOptionsReq$Requirements$ItemType
        adminPostShippingOptionsReq$Requirements$ItemType) {
  return adminPostShippingOptionsReq$Requirements$ItemType.value;
}

enums.AdminPostShippingOptionsReq$Requirements$ItemType
    adminPostShippingOptionsReq$Requirements$ItemTypeFromJson(
  Object? adminPostShippingOptionsReq$Requirements$ItemType, [
  enums.AdminPostShippingOptionsReq$Requirements$ItemType? defaultValue,
]) {
  return enums.AdminPostShippingOptionsReq$Requirements$ItemType.values
          .firstWhereOrNull((e) =>
              e.value.toString().toLowerCase() ==
              adminPostShippingOptionsReq$Requirements$ItemType
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostShippingOptionsReq$Requirements$ItemType
          .swaggerGeneratedUnknown;
}

enums.AdminPostShippingOptionsReq$Requirements$ItemType?
    adminPostShippingOptionsReq$Requirements$ItemTypeNullableFromJson(
  Object? adminPostShippingOptionsReq$Requirements$ItemType, [
  enums.AdminPostShippingOptionsReq$Requirements$ItemType? defaultValue,
]) {
  if (adminPostShippingOptionsReq$Requirements$ItemType == null) {
    return null;
  }
  return enums.AdminPostShippingOptionsReq$Requirements$ItemType.values
          .firstWhereOrNull((e) =>
              e.value == adminPostShippingOptionsReq$Requirements$ItemType) ??
      defaultValue;
}

String adminPostShippingOptionsReq$Requirements$ItemTypeExplodedListToJson(
    List<enums.AdminPostShippingOptionsReq$Requirements$ItemType>?
        adminPostShippingOptionsReq$Requirements$ItemType) {
  return adminPostShippingOptionsReq$Requirements$ItemType
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostShippingOptionsReq$Requirements$ItemTypeListToJson(
    List<enums.AdminPostShippingOptionsReq$Requirements$ItemType>?
        adminPostShippingOptionsReq$Requirements$ItemType) {
  if (adminPostShippingOptionsReq$Requirements$ItemType == null) {
    return [];
  }

  return adminPostShippingOptionsReq$Requirements$ItemType
      .map((e) => e.value!)
      .toList();
}

List<enums.AdminPostShippingOptionsReq$Requirements$ItemType>
    adminPostShippingOptionsReq$Requirements$ItemTypeListFromJson(
  List? adminPostShippingOptionsReq$Requirements$ItemType, [
  List<enums.AdminPostShippingOptionsReq$Requirements$ItemType>? defaultValue,
]) {
  if (adminPostShippingOptionsReq$Requirements$ItemType == null) {
    return defaultValue ?? [];
  }

  return adminPostShippingOptionsReq$Requirements$ItemType
      .map((e) => adminPostShippingOptionsReq$Requirements$ItemTypeFromJson(
          e.toString()))
      .toList();
}

List<enums.AdminPostShippingOptionsReq$Requirements$ItemType>?
    adminPostShippingOptionsReq$Requirements$ItemTypeNullableListFromJson(
  List? adminPostShippingOptionsReq$Requirements$ItemType, [
  List<enums.AdminPostShippingOptionsReq$Requirements$ItemType>? defaultValue,
]) {
  if (adminPostShippingOptionsReq$Requirements$ItemType == null) {
    return defaultValue;
  }

  return adminPostShippingOptionsReq$Requirements$ItemType
      .map((e) => adminPostShippingOptionsReq$Requirements$ItemTypeFromJson(
          e.toString()))
      .toList();
}

String? adminPostShippingProfilesProfileReqTypeNullableToJson(
    enums.AdminPostShippingProfilesProfileReqType?
        adminPostShippingProfilesProfileReqType) {
  return adminPostShippingProfilesProfileReqType?.value;
}

String? adminPostShippingProfilesProfileReqTypeToJson(
    enums.AdminPostShippingProfilesProfileReqType
        adminPostShippingProfilesProfileReqType) {
  return adminPostShippingProfilesProfileReqType.value;
}

enums.AdminPostShippingProfilesProfileReqType
    adminPostShippingProfilesProfileReqTypeFromJson(
  Object? adminPostShippingProfilesProfileReqType, [
  enums.AdminPostShippingProfilesProfileReqType? defaultValue,
]) {
  return enums.AdminPostShippingProfilesProfileReqType.values.firstWhereOrNull(
          (e) =>
              e.value.toString().toLowerCase() ==
              adminPostShippingProfilesProfileReqType
                  ?.toString()
                  .toLowerCase()) ??
      defaultValue ??
      enums.AdminPostShippingProfilesProfileReqType.swaggerGeneratedUnknown;
}

enums.AdminPostShippingProfilesProfileReqType?
    adminPostShippingProfilesProfileReqTypeNullableFromJson(
  Object? adminPostShippingProfilesProfileReqType, [
  enums.AdminPostShippingProfilesProfileReqType? defaultValue,
]) {
  if (adminPostShippingProfilesProfileReqType == null) {
    return null;
  }
  return enums.AdminPostShippingProfilesProfileReqType.values.firstWhereOrNull(
          (e) => e.value == adminPostShippingProfilesProfileReqType) ??
      defaultValue;
}

String adminPostShippingProfilesProfileReqTypeExplodedListToJson(
    List<enums.AdminPostShippingProfilesProfileReqType>?
        adminPostShippingProfilesProfileReqType) {
  return adminPostShippingProfilesProfileReqType
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> adminPostShippingProfilesProfileReqTypeListToJson(
    List<enums.AdminPostShippingProfilesProfileReqType>?
        adminPostShippingProfilesProfileReqType) {
  if (adminPostShippingProfilesProfileReqType == null) {
    return [];
  }

  return adminPostShippingProfilesProfileReqType.map((e) => e.value!).toList();
}

List<enums.AdminPostShippingProfilesProfileReqType>
    adminPostShippingProfilesProfileReqTypeListFromJson(
  List? adminPostShippingProfilesProfileReqType, [
  List<enums.AdminPostShippingProfilesProfileReqType>? defaultValue,
]) {
  if (adminPostShippingProfilesProfileReqType == null) {
    return defaultValue ?? [];
  }

  return adminPostShippingProfilesProfileReqType
      .map((e) => adminPostShippingProfilesProfileReqTypeFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostShippingProfilesProfileReqType>?
    adminPostShippingProfilesProfileReqTypeNullableListFromJson(
  List? adminPostShippingProfilesProfileReqType, [
  List<enums.AdminPostShippingProfilesProfileReqType>? defaultValue,
]) {
  if (adminPostShippingProfilesProfileReqType == null) {
    return defaultValue;
  }

  return adminPostShippingProfilesProfileReqType
      .map((e) => adminPostShippingProfilesProfileReqTypeFromJson(e.toString()))
      .toList();
}

String? adminPostShippingProfilesReqTypeNullableToJson(
    enums.AdminPostShippingProfilesReqType? adminPostShippingProfilesReqType) {
  return adminPostShippingProfilesReqType?.value;
}

String? adminPostShippingProfilesReqTypeToJson(
    enums.AdminPostShippingProfilesReqType adminPostShippingProfilesReqType) {
  return adminPostShippingProfilesReqType.value;
}

enums.AdminPostShippingProfilesReqType adminPostShippingProfilesReqTypeFromJson(
  Object? adminPostShippingProfilesReqType, [
  enums.AdminPostShippingProfilesReqType? defaultValue,
]) {
  return enums.AdminPostShippingProfilesReqType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminPostShippingProfilesReqType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminPostShippingProfilesReqType.swaggerGeneratedUnknown;
}

enums.AdminPostShippingProfilesReqType?
    adminPostShippingProfilesReqTypeNullableFromJson(
  Object? adminPostShippingProfilesReqType, [
  enums.AdminPostShippingProfilesReqType? defaultValue,
]) {
  if (adminPostShippingProfilesReqType == null) {
    return null;
  }
  return enums.AdminPostShippingProfilesReqType.values.firstWhereOrNull(
          (e) => e.value == adminPostShippingProfilesReqType) ??
      defaultValue;
}

String adminPostShippingProfilesReqTypeExplodedListToJson(
    List<enums.AdminPostShippingProfilesReqType>?
        adminPostShippingProfilesReqType) {
  return adminPostShippingProfilesReqType?.map((e) => e.value!).join(',') ?? '';
}

List<String> adminPostShippingProfilesReqTypeListToJson(
    List<enums.AdminPostShippingProfilesReqType>?
        adminPostShippingProfilesReqType) {
  if (adminPostShippingProfilesReqType == null) {
    return [];
  }

  return adminPostShippingProfilesReqType.map((e) => e.value!).toList();
}

List<enums.AdminPostShippingProfilesReqType>
    adminPostShippingProfilesReqTypeListFromJson(
  List? adminPostShippingProfilesReqType, [
  List<enums.AdminPostShippingProfilesReqType>? defaultValue,
]) {
  if (adminPostShippingProfilesReqType == null) {
    return defaultValue ?? [];
  }

  return adminPostShippingProfilesReqType
      .map((e) => adminPostShippingProfilesReqTypeFromJson(e.toString()))
      .toList();
}

List<enums.AdminPostShippingProfilesReqType>?
    adminPostShippingProfilesReqTypeNullableListFromJson(
  List? adminPostShippingProfilesReqType, [
  List<enums.AdminPostShippingProfilesReqType>? defaultValue,
]) {
  if (adminPostShippingProfilesReqType == null) {
    return defaultValue;
  }

  return adminPostShippingProfilesReqType
      .map((e) => adminPostShippingProfilesReqTypeFromJson(e.toString()))
      .toList();
}

String? adminUpdateUserRequestRoleNullableToJson(
    enums.AdminUpdateUserRequestRole? adminUpdateUserRequestRole) {
  return adminUpdateUserRequestRole?.value;
}

String? adminUpdateUserRequestRoleToJson(
    enums.AdminUpdateUserRequestRole adminUpdateUserRequestRole) {
  return adminUpdateUserRequestRole.value;
}

enums.AdminUpdateUserRequestRole adminUpdateUserRequestRoleFromJson(
  Object? adminUpdateUserRequestRole, [
  enums.AdminUpdateUserRequestRole? defaultValue,
]) {
  return enums.AdminUpdateUserRequestRole.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          adminUpdateUserRequestRole?.toString().toLowerCase()) ??
      defaultValue ??
      enums.AdminUpdateUserRequestRole.swaggerGeneratedUnknown;
}

enums.AdminUpdateUserRequestRole? adminUpdateUserRequestRoleNullableFromJson(
  Object? adminUpdateUserRequestRole, [
  enums.AdminUpdateUserRequestRole? defaultValue,
]) {
  if (adminUpdateUserRequestRole == null) {
    return null;
  }
  return enums.AdminUpdateUserRequestRole.values
          .firstWhereOrNull((e) => e.value == adminUpdateUserRequestRole) ??
      defaultValue;
}

String adminUpdateUserRequestRoleExplodedListToJson(
    List<enums.AdminUpdateUserRequestRole>? adminUpdateUserRequestRole) {
  return adminUpdateUserRequestRole?.map((e) => e.value!).join(',') ?? '';
}

List<String> adminUpdateUserRequestRoleListToJson(
    List<enums.AdminUpdateUserRequestRole>? adminUpdateUserRequestRole) {
  if (adminUpdateUserRequestRole == null) {
    return [];
  }

  return adminUpdateUserRequestRole.map((e) => e.value!).toList();
}

List<enums.AdminUpdateUserRequestRole> adminUpdateUserRequestRoleListFromJson(
  List? adminUpdateUserRequestRole, [
  List<enums.AdminUpdateUserRequestRole>? defaultValue,
]) {
  if (adminUpdateUserRequestRole == null) {
    return defaultValue ?? [];
  }

  return adminUpdateUserRequestRole
      .map((e) => adminUpdateUserRequestRoleFromJson(e.toString()))
      .toList();
}

List<enums.AdminUpdateUserRequestRole>?
    adminUpdateUserRequestRoleNullableListFromJson(
  List? adminUpdateUserRequestRole, [
  List<enums.AdminUpdateUserRequestRole>? defaultValue,
]) {
  if (adminUpdateUserRequestRole == null) {
    return defaultValue;
  }

  return adminUpdateUserRequestRole
      .map((e) => adminUpdateUserRequestRoleFromJson(e.toString()))
      .toList();
}

String? batchJobTypeNullableToJson(enums.BatchJobType? batchJobType) {
  return batchJobType?.value;
}

String? batchJobTypeToJson(enums.BatchJobType batchJobType) {
  return batchJobType.value;
}

enums.BatchJobType batchJobTypeFromJson(
  Object? batchJobType, [
  enums.BatchJobType? defaultValue,
]) {
  return enums.BatchJobType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          batchJobType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.BatchJobType.swaggerGeneratedUnknown;
}

enums.BatchJobType? batchJobTypeNullableFromJson(
  Object? batchJobType, [
  enums.BatchJobType? defaultValue,
]) {
  if (batchJobType == null) {
    return null;
  }
  return enums.BatchJobType.values
          .firstWhereOrNull((e) => e.value == batchJobType) ??
      defaultValue;
}

String batchJobTypeExplodedListToJson(List<enums.BatchJobType>? batchJobType) {
  return batchJobType?.map((e) => e.value!).join(',') ?? '';
}

List<String> batchJobTypeListToJson(List<enums.BatchJobType>? batchJobType) {
  if (batchJobType == null) {
    return [];
  }

  return batchJobType.map((e) => e.value!).toList();
}

List<enums.BatchJobType> batchJobTypeListFromJson(
  List? batchJobType, [
  List<enums.BatchJobType>? defaultValue,
]) {
  if (batchJobType == null) {
    return defaultValue ?? [];
  }

  return batchJobType.map((e) => batchJobTypeFromJson(e.toString())).toList();
}

List<enums.BatchJobType>? batchJobTypeNullableListFromJson(
  List? batchJobType, [
  List<enums.BatchJobType>? defaultValue,
]) {
  if (batchJobType == null) {
    return defaultValue;
  }

  return batchJobType.map((e) => batchJobTypeFromJson(e.toString())).toList();
}

String? batchJobStatusNullableToJson(enums.BatchJobStatus? batchJobStatus) {
  return batchJobStatus?.value;
}

String? batchJobStatusToJson(enums.BatchJobStatus batchJobStatus) {
  return batchJobStatus.value;
}

enums.BatchJobStatus batchJobStatusFromJson(
  Object? batchJobStatus, [
  enums.BatchJobStatus? defaultValue,
]) {
  return enums.BatchJobStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          batchJobStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.BatchJobStatus.swaggerGeneratedUnknown;
}

enums.BatchJobStatus? batchJobStatusNullableFromJson(
  Object? batchJobStatus, [
  enums.BatchJobStatus? defaultValue,
]) {
  if (batchJobStatus == null) {
    return null;
  }
  return enums.BatchJobStatus.values
          .firstWhereOrNull((e) => e.value == batchJobStatus) ??
      defaultValue;
}

String batchJobStatusExplodedListToJson(
    List<enums.BatchJobStatus>? batchJobStatus) {
  return batchJobStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> batchJobStatusListToJson(
    List<enums.BatchJobStatus>? batchJobStatus) {
  if (batchJobStatus == null) {
    return [];
  }

  return batchJobStatus.map((e) => e.value!).toList();
}

List<enums.BatchJobStatus> batchJobStatusListFromJson(
  List? batchJobStatus, [
  List<enums.BatchJobStatus>? defaultValue,
]) {
  if (batchJobStatus == null) {
    return defaultValue ?? [];
  }

  return batchJobStatus
      .map((e) => batchJobStatusFromJson(e.toString()))
      .toList();
}

List<enums.BatchJobStatus>? batchJobStatusNullableListFromJson(
  List? batchJobStatus, [
  List<enums.BatchJobStatus>? defaultValue,
]) {
  if (batchJobStatus == null) {
    return defaultValue;
  }

  return batchJobStatus
      .map((e) => batchJobStatusFromJson(e.toString()))
      .toList();
}

String? cartTypeNullableToJson(enums.CartType? cartType) {
  return cartType?.value;
}

String? cartTypeToJson(enums.CartType cartType) {
  return cartType.value;
}

enums.CartType cartTypeFromJson(
  Object? cartType, [
  enums.CartType? defaultValue,
]) {
  return enums.CartType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          cartType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.CartType.swaggerGeneratedUnknown;
}

enums.CartType? cartTypeNullableFromJson(
  Object? cartType, [
  enums.CartType? defaultValue,
]) {
  if (cartType == null) {
    return null;
  }
  return enums.CartType.values.firstWhereOrNull((e) => e.value == cartType) ??
      defaultValue;
}

String cartTypeExplodedListToJson(List<enums.CartType>? cartType) {
  return cartType?.map((e) => e.value!).join(',') ?? '';
}

List<String> cartTypeListToJson(List<enums.CartType>? cartType) {
  if (cartType == null) {
    return [];
  }

  return cartType.map((e) => e.value!).toList();
}

List<enums.CartType> cartTypeListFromJson(
  List? cartType, [
  List<enums.CartType>? defaultValue,
]) {
  if (cartType == null) {
    return defaultValue ?? [];
  }

  return cartType.map((e) => cartTypeFromJson(e.toString())).toList();
}

List<enums.CartType>? cartTypeNullableListFromJson(
  List? cartType, [
  List<enums.CartType>? defaultValue,
]) {
  if (cartType == null) {
    return defaultValue;
  }

  return cartType.map((e) => cartTypeFromJson(e.toString())).toList();
}

String? claimItemReasonNullableToJson(enums.ClaimItemReason? claimItemReason) {
  return claimItemReason?.value;
}

String? claimItemReasonToJson(enums.ClaimItemReason claimItemReason) {
  return claimItemReason.value;
}

enums.ClaimItemReason claimItemReasonFromJson(
  Object? claimItemReason, [
  enums.ClaimItemReason? defaultValue,
]) {
  return enums.ClaimItemReason.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          claimItemReason?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ClaimItemReason.swaggerGeneratedUnknown;
}

enums.ClaimItemReason? claimItemReasonNullableFromJson(
  Object? claimItemReason, [
  enums.ClaimItemReason? defaultValue,
]) {
  if (claimItemReason == null) {
    return null;
  }
  return enums.ClaimItemReason.values
          .firstWhereOrNull((e) => e.value == claimItemReason) ??
      defaultValue;
}

String claimItemReasonExplodedListToJson(
    List<enums.ClaimItemReason>? claimItemReason) {
  return claimItemReason?.map((e) => e.value!).join(',') ?? '';
}

List<String> claimItemReasonListToJson(
    List<enums.ClaimItemReason>? claimItemReason) {
  if (claimItemReason == null) {
    return [];
  }

  return claimItemReason.map((e) => e.value!).toList();
}

List<enums.ClaimItemReason> claimItemReasonListFromJson(
  List? claimItemReason, [
  List<enums.ClaimItemReason>? defaultValue,
]) {
  if (claimItemReason == null) {
    return defaultValue ?? [];
  }

  return claimItemReason
      .map((e) => claimItemReasonFromJson(e.toString()))
      .toList();
}

List<enums.ClaimItemReason>? claimItemReasonNullableListFromJson(
  List? claimItemReason, [
  List<enums.ClaimItemReason>? defaultValue,
]) {
  if (claimItemReason == null) {
    return defaultValue;
  }

  return claimItemReason
      .map((e) => claimItemReasonFromJson(e.toString()))
      .toList();
}

String? claimOrderTypeNullableToJson(enums.ClaimOrderType? claimOrderType) {
  return claimOrderType?.value;
}

String? claimOrderTypeToJson(enums.ClaimOrderType claimOrderType) {
  return claimOrderType.value;
}

enums.ClaimOrderType claimOrderTypeFromJson(
  Object? claimOrderType, [
  enums.ClaimOrderType? defaultValue,
]) {
  return enums.ClaimOrderType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          claimOrderType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ClaimOrderType.swaggerGeneratedUnknown;
}

enums.ClaimOrderType? claimOrderTypeNullableFromJson(
  Object? claimOrderType, [
  enums.ClaimOrderType? defaultValue,
]) {
  if (claimOrderType == null) {
    return null;
  }
  return enums.ClaimOrderType.values
          .firstWhereOrNull((e) => e.value == claimOrderType) ??
      defaultValue;
}

String claimOrderTypeExplodedListToJson(
    List<enums.ClaimOrderType>? claimOrderType) {
  return claimOrderType?.map((e) => e.value!).join(',') ?? '';
}

List<String> claimOrderTypeListToJson(
    List<enums.ClaimOrderType>? claimOrderType) {
  if (claimOrderType == null) {
    return [];
  }

  return claimOrderType.map((e) => e.value!).toList();
}

List<enums.ClaimOrderType> claimOrderTypeListFromJson(
  List? claimOrderType, [
  List<enums.ClaimOrderType>? defaultValue,
]) {
  if (claimOrderType == null) {
    return defaultValue ?? [];
  }

  return claimOrderType
      .map((e) => claimOrderTypeFromJson(e.toString()))
      .toList();
}

List<enums.ClaimOrderType>? claimOrderTypeNullableListFromJson(
  List? claimOrderType, [
  List<enums.ClaimOrderType>? defaultValue,
]) {
  if (claimOrderType == null) {
    return defaultValue;
  }

  return claimOrderType
      .map((e) => claimOrderTypeFromJson(e.toString()))
      .toList();
}

String? claimOrderPaymentStatusNullableToJson(
    enums.ClaimOrderPaymentStatus? claimOrderPaymentStatus) {
  return claimOrderPaymentStatus?.value;
}

String? claimOrderPaymentStatusToJson(
    enums.ClaimOrderPaymentStatus claimOrderPaymentStatus) {
  return claimOrderPaymentStatus.value;
}

enums.ClaimOrderPaymentStatus claimOrderPaymentStatusFromJson(
  Object? claimOrderPaymentStatus, [
  enums.ClaimOrderPaymentStatus? defaultValue,
]) {
  return enums.ClaimOrderPaymentStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          claimOrderPaymentStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ClaimOrderPaymentStatus.swaggerGeneratedUnknown;
}

enums.ClaimOrderPaymentStatus? claimOrderPaymentStatusNullableFromJson(
  Object? claimOrderPaymentStatus, [
  enums.ClaimOrderPaymentStatus? defaultValue,
]) {
  if (claimOrderPaymentStatus == null) {
    return null;
  }
  return enums.ClaimOrderPaymentStatus.values
          .firstWhereOrNull((e) => e.value == claimOrderPaymentStatus) ??
      defaultValue;
}

String claimOrderPaymentStatusExplodedListToJson(
    List<enums.ClaimOrderPaymentStatus>? claimOrderPaymentStatus) {
  return claimOrderPaymentStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> claimOrderPaymentStatusListToJson(
    List<enums.ClaimOrderPaymentStatus>? claimOrderPaymentStatus) {
  if (claimOrderPaymentStatus == null) {
    return [];
  }

  return claimOrderPaymentStatus.map((e) => e.value!).toList();
}

List<enums.ClaimOrderPaymentStatus> claimOrderPaymentStatusListFromJson(
  List? claimOrderPaymentStatus, [
  List<enums.ClaimOrderPaymentStatus>? defaultValue,
]) {
  if (claimOrderPaymentStatus == null) {
    return defaultValue ?? [];
  }

  return claimOrderPaymentStatus
      .map((e) => claimOrderPaymentStatusFromJson(e.toString()))
      .toList();
}

List<enums.ClaimOrderPaymentStatus>?
    claimOrderPaymentStatusNullableListFromJson(
  List? claimOrderPaymentStatus, [
  List<enums.ClaimOrderPaymentStatus>? defaultValue,
]) {
  if (claimOrderPaymentStatus == null) {
    return defaultValue;
  }

  return claimOrderPaymentStatus
      .map((e) => claimOrderPaymentStatusFromJson(e.toString()))
      .toList();
}

String? claimOrderFulfillmentStatusNullableToJson(
    enums.ClaimOrderFulfillmentStatus? claimOrderFulfillmentStatus) {
  return claimOrderFulfillmentStatus?.value;
}

String? claimOrderFulfillmentStatusToJson(
    enums.ClaimOrderFulfillmentStatus claimOrderFulfillmentStatus) {
  return claimOrderFulfillmentStatus.value;
}

enums.ClaimOrderFulfillmentStatus claimOrderFulfillmentStatusFromJson(
  Object? claimOrderFulfillmentStatus, [
  enums.ClaimOrderFulfillmentStatus? defaultValue,
]) {
  return enums.ClaimOrderFulfillmentStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          claimOrderFulfillmentStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ClaimOrderFulfillmentStatus.swaggerGeneratedUnknown;
}

enums.ClaimOrderFulfillmentStatus? claimOrderFulfillmentStatusNullableFromJson(
  Object? claimOrderFulfillmentStatus, [
  enums.ClaimOrderFulfillmentStatus? defaultValue,
]) {
  if (claimOrderFulfillmentStatus == null) {
    return null;
  }
  return enums.ClaimOrderFulfillmentStatus.values
          .firstWhereOrNull((e) => e.value == claimOrderFulfillmentStatus) ??
      defaultValue;
}

String claimOrderFulfillmentStatusExplodedListToJson(
    List<enums.ClaimOrderFulfillmentStatus>? claimOrderFulfillmentStatus) {
  return claimOrderFulfillmentStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> claimOrderFulfillmentStatusListToJson(
    List<enums.ClaimOrderFulfillmentStatus>? claimOrderFulfillmentStatus) {
  if (claimOrderFulfillmentStatus == null) {
    return [];
  }

  return claimOrderFulfillmentStatus.map((e) => e.value!).toList();
}

List<enums.ClaimOrderFulfillmentStatus> claimOrderFulfillmentStatusListFromJson(
  List? claimOrderFulfillmentStatus, [
  List<enums.ClaimOrderFulfillmentStatus>? defaultValue,
]) {
  if (claimOrderFulfillmentStatus == null) {
    return defaultValue ?? [];
  }

  return claimOrderFulfillmentStatus
      .map((e) => claimOrderFulfillmentStatusFromJson(e.toString()))
      .toList();
}

List<enums.ClaimOrderFulfillmentStatus>?
    claimOrderFulfillmentStatusNullableListFromJson(
  List? claimOrderFulfillmentStatus, [
  List<enums.ClaimOrderFulfillmentStatus>? defaultValue,
]) {
  if (claimOrderFulfillmentStatus == null) {
    return defaultValue;
  }

  return claimOrderFulfillmentStatus
      .map((e) => claimOrderFulfillmentStatusFromJson(e.toString()))
      .toList();
}

String? discountConditionTypeNullableToJson(
    enums.DiscountConditionType? discountConditionType) {
  return discountConditionType?.value;
}

String? discountConditionTypeToJson(
    enums.DiscountConditionType discountConditionType) {
  return discountConditionType.value;
}

enums.DiscountConditionType discountConditionTypeFromJson(
  Object? discountConditionType, [
  enums.DiscountConditionType? defaultValue,
]) {
  return enums.DiscountConditionType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          discountConditionType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.DiscountConditionType.swaggerGeneratedUnknown;
}

enums.DiscountConditionType? discountConditionTypeNullableFromJson(
  Object? discountConditionType, [
  enums.DiscountConditionType? defaultValue,
]) {
  if (discountConditionType == null) {
    return null;
  }
  return enums.DiscountConditionType.values
          .firstWhereOrNull((e) => e.value == discountConditionType) ??
      defaultValue;
}

String discountConditionTypeExplodedListToJson(
    List<enums.DiscountConditionType>? discountConditionType) {
  return discountConditionType?.map((e) => e.value!).join(',') ?? '';
}

List<String> discountConditionTypeListToJson(
    List<enums.DiscountConditionType>? discountConditionType) {
  if (discountConditionType == null) {
    return [];
  }

  return discountConditionType.map((e) => e.value!).toList();
}

List<enums.DiscountConditionType> discountConditionTypeListFromJson(
  List? discountConditionType, [
  List<enums.DiscountConditionType>? defaultValue,
]) {
  if (discountConditionType == null) {
    return defaultValue ?? [];
  }

  return discountConditionType
      .map((e) => discountConditionTypeFromJson(e.toString()))
      .toList();
}

List<enums.DiscountConditionType>? discountConditionTypeNullableListFromJson(
  List? discountConditionType, [
  List<enums.DiscountConditionType>? defaultValue,
]) {
  if (discountConditionType == null) {
    return defaultValue;
  }

  return discountConditionType
      .map((e) => discountConditionTypeFromJson(e.toString()))
      .toList();
}

String? discountConditionOperatorNullableToJson(
    enums.DiscountConditionOperator? discountConditionOperator) {
  return discountConditionOperator?.value;
}

String? discountConditionOperatorToJson(
    enums.DiscountConditionOperator discountConditionOperator) {
  return discountConditionOperator.value;
}

enums.DiscountConditionOperator discountConditionOperatorFromJson(
  Object? discountConditionOperator, [
  enums.DiscountConditionOperator? defaultValue,
]) {
  return enums.DiscountConditionOperator.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          discountConditionOperator?.toString().toLowerCase()) ??
      defaultValue ??
      enums.DiscountConditionOperator.swaggerGeneratedUnknown;
}

enums.DiscountConditionOperator? discountConditionOperatorNullableFromJson(
  Object? discountConditionOperator, [
  enums.DiscountConditionOperator? defaultValue,
]) {
  if (discountConditionOperator == null) {
    return null;
  }
  return enums.DiscountConditionOperator.values
          .firstWhereOrNull((e) => e.value == discountConditionOperator) ??
      defaultValue;
}

String discountConditionOperatorExplodedListToJson(
    List<enums.DiscountConditionOperator>? discountConditionOperator) {
  return discountConditionOperator?.map((e) => e.value!).join(',') ?? '';
}

List<String> discountConditionOperatorListToJson(
    List<enums.DiscountConditionOperator>? discountConditionOperator) {
  if (discountConditionOperator == null) {
    return [];
  }

  return discountConditionOperator.map((e) => e.value!).toList();
}

List<enums.DiscountConditionOperator> discountConditionOperatorListFromJson(
  List? discountConditionOperator, [
  List<enums.DiscountConditionOperator>? defaultValue,
]) {
  if (discountConditionOperator == null) {
    return defaultValue ?? [];
  }

  return discountConditionOperator
      .map((e) => discountConditionOperatorFromJson(e.toString()))
      .toList();
}

List<enums.DiscountConditionOperator>?
    discountConditionOperatorNullableListFromJson(
  List? discountConditionOperator, [
  List<enums.DiscountConditionOperator>? defaultValue,
]) {
  if (discountConditionOperator == null) {
    return defaultValue;
  }

  return discountConditionOperator
      .map((e) => discountConditionOperatorFromJson(e.toString()))
      .toList();
}

String? discountRuleTypeNullableToJson(
    enums.DiscountRuleType? discountRuleType) {
  return discountRuleType?.value;
}

String? discountRuleTypeToJson(enums.DiscountRuleType discountRuleType) {
  return discountRuleType.value;
}

enums.DiscountRuleType discountRuleTypeFromJson(
  Object? discountRuleType, [
  enums.DiscountRuleType? defaultValue,
]) {
  return enums.DiscountRuleType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          discountRuleType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.DiscountRuleType.swaggerGeneratedUnknown;
}

enums.DiscountRuleType? discountRuleTypeNullableFromJson(
  Object? discountRuleType, [
  enums.DiscountRuleType? defaultValue,
]) {
  if (discountRuleType == null) {
    return null;
  }
  return enums.DiscountRuleType.values
          .firstWhereOrNull((e) => e.value == discountRuleType) ??
      defaultValue;
}

String discountRuleTypeExplodedListToJson(
    List<enums.DiscountRuleType>? discountRuleType) {
  return discountRuleType?.map((e) => e.value!).join(',') ?? '';
}

List<String> discountRuleTypeListToJson(
    List<enums.DiscountRuleType>? discountRuleType) {
  if (discountRuleType == null) {
    return [];
  }

  return discountRuleType.map((e) => e.value!).toList();
}

List<enums.DiscountRuleType> discountRuleTypeListFromJson(
  List? discountRuleType, [
  List<enums.DiscountRuleType>? defaultValue,
]) {
  if (discountRuleType == null) {
    return defaultValue ?? [];
  }

  return discountRuleType
      .map((e) => discountRuleTypeFromJson(e.toString()))
      .toList();
}

List<enums.DiscountRuleType>? discountRuleTypeNullableListFromJson(
  List? discountRuleType, [
  List<enums.DiscountRuleType>? defaultValue,
]) {
  if (discountRuleType == null) {
    return defaultValue;
  }

  return discountRuleType
      .map((e) => discountRuleTypeFromJson(e.toString()))
      .toList();
}

String? discountRuleAllocationNullableToJson(
    enums.DiscountRuleAllocation? discountRuleAllocation) {
  return discountRuleAllocation?.value;
}

String? discountRuleAllocationToJson(
    enums.DiscountRuleAllocation discountRuleAllocation) {
  return discountRuleAllocation.value;
}

enums.DiscountRuleAllocation discountRuleAllocationFromJson(
  Object? discountRuleAllocation, [
  enums.DiscountRuleAllocation? defaultValue,
]) {
  return enums.DiscountRuleAllocation.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          discountRuleAllocation?.toString().toLowerCase()) ??
      defaultValue ??
      enums.DiscountRuleAllocation.swaggerGeneratedUnknown;
}

enums.DiscountRuleAllocation? discountRuleAllocationNullableFromJson(
  Object? discountRuleAllocation, [
  enums.DiscountRuleAllocation? defaultValue,
]) {
  if (discountRuleAllocation == null) {
    return null;
  }
  return enums.DiscountRuleAllocation.values
          .firstWhereOrNull((e) => e.value == discountRuleAllocation) ??
      defaultValue;
}

String discountRuleAllocationExplodedListToJson(
    List<enums.DiscountRuleAllocation>? discountRuleAllocation) {
  return discountRuleAllocation?.map((e) => e.value!).join(',') ?? '';
}

List<String> discountRuleAllocationListToJson(
    List<enums.DiscountRuleAllocation>? discountRuleAllocation) {
  if (discountRuleAllocation == null) {
    return [];
  }

  return discountRuleAllocation.map((e) => e.value!).toList();
}

List<enums.DiscountRuleAllocation> discountRuleAllocationListFromJson(
  List? discountRuleAllocation, [
  List<enums.DiscountRuleAllocation>? defaultValue,
]) {
  if (discountRuleAllocation == null) {
    return defaultValue ?? [];
  }

  return discountRuleAllocation
      .map((e) => discountRuleAllocationFromJson(e.toString()))
      .toList();
}

List<enums.DiscountRuleAllocation>? discountRuleAllocationNullableListFromJson(
  List? discountRuleAllocation, [
  List<enums.DiscountRuleAllocation>? defaultValue,
]) {
  if (discountRuleAllocation == null) {
    return defaultValue;
  }

  return discountRuleAllocation
      .map((e) => discountRuleAllocationFromJson(e.toString()))
      .toList();
}

String? draftOrderStatusNullableToJson(
    enums.DraftOrderStatus? draftOrderStatus) {
  return draftOrderStatus?.value;
}

String? draftOrderStatusToJson(enums.DraftOrderStatus draftOrderStatus) {
  return draftOrderStatus.value;
}

enums.DraftOrderStatus draftOrderStatusFromJson(
  Object? draftOrderStatus, [
  enums.DraftOrderStatus? defaultValue,
]) {
  return enums.DraftOrderStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          draftOrderStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.DraftOrderStatus.swaggerGeneratedUnknown;
}

enums.DraftOrderStatus? draftOrderStatusNullableFromJson(
  Object? draftOrderStatus, [
  enums.DraftOrderStatus? defaultValue,
]) {
  if (draftOrderStatus == null) {
    return null;
  }
  return enums.DraftOrderStatus.values
          .firstWhereOrNull((e) => e.value == draftOrderStatus) ??
      defaultValue;
}

String draftOrderStatusExplodedListToJson(
    List<enums.DraftOrderStatus>? draftOrderStatus) {
  return draftOrderStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> draftOrderStatusListToJson(
    List<enums.DraftOrderStatus>? draftOrderStatus) {
  if (draftOrderStatus == null) {
    return [];
  }

  return draftOrderStatus.map((e) => e.value!).toList();
}

List<enums.DraftOrderStatus> draftOrderStatusListFromJson(
  List? draftOrderStatus, [
  List<enums.DraftOrderStatus>? defaultValue,
]) {
  if (draftOrderStatus == null) {
    return defaultValue ?? [];
  }

  return draftOrderStatus
      .map((e) => draftOrderStatusFromJson(e.toString()))
      .toList();
}

List<enums.DraftOrderStatus>? draftOrderStatusNullableListFromJson(
  List? draftOrderStatus, [
  List<enums.DraftOrderStatus>? defaultValue,
]) {
  if (draftOrderStatus == null) {
    return defaultValue;
  }

  return draftOrderStatus
      .map((e) => draftOrderStatusFromJson(e.toString()))
      .toList();
}

String? errorCodeNullableToJson(enums.ErrorCode? errorCode) {
  return errorCode?.value;
}

String? errorCodeToJson(enums.ErrorCode errorCode) {
  return errorCode.value;
}

enums.ErrorCode errorCodeFromJson(
  Object? errorCode, [
  enums.ErrorCode? defaultValue,
]) {
  return enums.ErrorCode.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          errorCode?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ErrorCode.swaggerGeneratedUnknown;
}

enums.ErrorCode? errorCodeNullableFromJson(
  Object? errorCode, [
  enums.ErrorCode? defaultValue,
]) {
  if (errorCode == null) {
    return null;
  }
  return enums.ErrorCode.values.firstWhereOrNull((e) => e.value == errorCode) ??
      defaultValue;
}

String errorCodeExplodedListToJson(List<enums.ErrorCode>? errorCode) {
  return errorCode?.map((e) => e.value!).join(',') ?? '';
}

List<String> errorCodeListToJson(List<enums.ErrorCode>? errorCode) {
  if (errorCode == null) {
    return [];
  }

  return errorCode.map((e) => e.value!).toList();
}

List<enums.ErrorCode> errorCodeListFromJson(
  List? errorCode, [
  List<enums.ErrorCode>? defaultValue,
]) {
  if (errorCode == null) {
    return defaultValue ?? [];
  }

  return errorCode.map((e) => errorCodeFromJson(e.toString())).toList();
}

List<enums.ErrorCode>? errorCodeNullableListFromJson(
  List? errorCode, [
  List<enums.ErrorCode>? defaultValue,
]) {
  if (errorCode == null) {
    return defaultValue;
  }

  return errorCode.map((e) => errorCodeFromJson(e.toString())).toList();
}

String? errorTypeNullableToJson(enums.ErrorType? errorType) {
  return errorType?.value;
}

String? errorTypeToJson(enums.ErrorType errorType) {
  return errorType.value;
}

enums.ErrorType errorTypeFromJson(
  Object? errorType, [
  enums.ErrorType? defaultValue,
]) {
  return enums.ErrorType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          errorType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ErrorType.swaggerGeneratedUnknown;
}

enums.ErrorType? errorTypeNullableFromJson(
  Object? errorType, [
  enums.ErrorType? defaultValue,
]) {
  if (errorType == null) {
    return null;
  }
  return enums.ErrorType.values.firstWhereOrNull((e) => e.value == errorType) ??
      defaultValue;
}

String errorTypeExplodedListToJson(List<enums.ErrorType>? errorType) {
  return errorType?.map((e) => e.value!).join(',') ?? '';
}

List<String> errorTypeListToJson(List<enums.ErrorType>? errorType) {
  if (errorType == null) {
    return [];
  }

  return errorType.map((e) => e.value!).toList();
}

List<enums.ErrorType> errorTypeListFromJson(
  List? errorType, [
  List<enums.ErrorType>? defaultValue,
]) {
  if (errorType == null) {
    return defaultValue ?? [];
  }

  return errorType.map((e) => errorTypeFromJson(e.toString())).toList();
}

List<enums.ErrorType>? errorTypeNullableListFromJson(
  List? errorType, [
  List<enums.ErrorType>? defaultValue,
]) {
  if (errorType == null) {
    return defaultValue;
  }

  return errorType.map((e) => errorTypeFromJson(e.toString())).toList();
}

String? inviteRoleNullableToJson(enums.InviteRole? inviteRole) {
  return inviteRole?.value;
}

String? inviteRoleToJson(enums.InviteRole inviteRole) {
  return inviteRole.value;
}

enums.InviteRole inviteRoleFromJson(
  Object? inviteRole, [
  enums.InviteRole? defaultValue,
]) {
  return enums.InviteRole.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          inviteRole?.toString().toLowerCase()) ??
      defaultValue ??
      enums.InviteRole.swaggerGeneratedUnknown;
}

enums.InviteRole? inviteRoleNullableFromJson(
  Object? inviteRole, [
  enums.InviteRole? defaultValue,
]) {
  if (inviteRole == null) {
    return null;
  }
  return enums.InviteRole.values
          .firstWhereOrNull((e) => e.value == inviteRole) ??
      defaultValue;
}

String inviteRoleExplodedListToJson(List<enums.InviteRole>? inviteRole) {
  return inviteRole?.map((e) => e.value!).join(',') ?? '';
}

List<String> inviteRoleListToJson(List<enums.InviteRole>? inviteRole) {
  if (inviteRole == null) {
    return [];
  }

  return inviteRole.map((e) => e.value!).toList();
}

List<enums.InviteRole> inviteRoleListFromJson(
  List? inviteRole, [
  List<enums.InviteRole>? defaultValue,
]) {
  if (inviteRole == null) {
    return defaultValue ?? [];
  }

  return inviteRole.map((e) => inviteRoleFromJson(e.toString())).toList();
}

List<enums.InviteRole>? inviteRoleNullableListFromJson(
  List? inviteRole, [
  List<enums.InviteRole>? defaultValue,
]) {
  if (inviteRole == null) {
    return defaultValue;
  }

  return inviteRole.map((e) => inviteRoleFromJson(e.toString())).toList();
}

String? orderStatusNullableToJson(enums.OrderStatus? orderStatus) {
  return orderStatus?.value;
}

String? orderStatusToJson(enums.OrderStatus orderStatus) {
  return orderStatus.value;
}

enums.OrderStatus orderStatusFromJson(
  Object? orderStatus, [
  enums.OrderStatus? defaultValue,
]) {
  return enums.OrderStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          orderStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.OrderStatus.swaggerGeneratedUnknown;
}

enums.OrderStatus? orderStatusNullableFromJson(
  Object? orderStatus, [
  enums.OrderStatus? defaultValue,
]) {
  if (orderStatus == null) {
    return null;
  }
  return enums.OrderStatus.values
          .firstWhereOrNull((e) => e.value == orderStatus) ??
      defaultValue;
}

String orderStatusExplodedListToJson(List<enums.OrderStatus>? orderStatus) {
  return orderStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> orderStatusListToJson(List<enums.OrderStatus>? orderStatus) {
  if (orderStatus == null) {
    return [];
  }

  return orderStatus.map((e) => e.value!).toList();
}

List<enums.OrderStatus> orderStatusListFromJson(
  List? orderStatus, [
  List<enums.OrderStatus>? defaultValue,
]) {
  if (orderStatus == null) {
    return defaultValue ?? [];
  }

  return orderStatus.map((e) => orderStatusFromJson(e.toString())).toList();
}

List<enums.OrderStatus>? orderStatusNullableListFromJson(
  List? orderStatus, [
  List<enums.OrderStatus>? defaultValue,
]) {
  if (orderStatus == null) {
    return defaultValue;
  }

  return orderStatus.map((e) => orderStatusFromJson(e.toString())).toList();
}

String? orderFulfillmentStatusNullableToJson(
    enums.OrderFulfillmentStatus? orderFulfillmentStatus) {
  return orderFulfillmentStatus?.value;
}

String? orderFulfillmentStatusToJson(
    enums.OrderFulfillmentStatus orderFulfillmentStatus) {
  return orderFulfillmentStatus.value;
}

enums.OrderFulfillmentStatus orderFulfillmentStatusFromJson(
  Object? orderFulfillmentStatus, [
  enums.OrderFulfillmentStatus? defaultValue,
]) {
  return enums.OrderFulfillmentStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          orderFulfillmentStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.OrderFulfillmentStatus.swaggerGeneratedUnknown;
}

enums.OrderFulfillmentStatus? orderFulfillmentStatusNullableFromJson(
  Object? orderFulfillmentStatus, [
  enums.OrderFulfillmentStatus? defaultValue,
]) {
  if (orderFulfillmentStatus == null) {
    return null;
  }
  return enums.OrderFulfillmentStatus.values
          .firstWhereOrNull((e) => e.value == orderFulfillmentStatus) ??
      defaultValue;
}

String orderFulfillmentStatusExplodedListToJson(
    List<enums.OrderFulfillmentStatus>? orderFulfillmentStatus) {
  return orderFulfillmentStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> orderFulfillmentStatusListToJson(
    List<enums.OrderFulfillmentStatus>? orderFulfillmentStatus) {
  if (orderFulfillmentStatus == null) {
    return [];
  }

  return orderFulfillmentStatus.map((e) => e.value!).toList();
}

List<enums.OrderFulfillmentStatus> orderFulfillmentStatusListFromJson(
  List? orderFulfillmentStatus, [
  List<enums.OrderFulfillmentStatus>? defaultValue,
]) {
  if (orderFulfillmentStatus == null) {
    return defaultValue ?? [];
  }

  return orderFulfillmentStatus
      .map((e) => orderFulfillmentStatusFromJson(e.toString()))
      .toList();
}

List<enums.OrderFulfillmentStatus>? orderFulfillmentStatusNullableListFromJson(
  List? orderFulfillmentStatus, [
  List<enums.OrderFulfillmentStatus>? defaultValue,
]) {
  if (orderFulfillmentStatus == null) {
    return defaultValue;
  }

  return orderFulfillmentStatus
      .map((e) => orderFulfillmentStatusFromJson(e.toString()))
      .toList();
}

String? orderPaymentStatusNullableToJson(
    enums.OrderPaymentStatus? orderPaymentStatus) {
  return orderPaymentStatus?.value;
}

String? orderPaymentStatusToJson(enums.OrderPaymentStatus orderPaymentStatus) {
  return orderPaymentStatus.value;
}

enums.OrderPaymentStatus orderPaymentStatusFromJson(
  Object? orderPaymentStatus, [
  enums.OrderPaymentStatus? defaultValue,
]) {
  return enums.OrderPaymentStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          orderPaymentStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.OrderPaymentStatus.swaggerGeneratedUnknown;
}

enums.OrderPaymentStatus? orderPaymentStatusNullableFromJson(
  Object? orderPaymentStatus, [
  enums.OrderPaymentStatus? defaultValue,
]) {
  if (orderPaymentStatus == null) {
    return null;
  }
  return enums.OrderPaymentStatus.values
          .firstWhereOrNull((e) => e.value == orderPaymentStatus) ??
      defaultValue;
}

String orderPaymentStatusExplodedListToJson(
    List<enums.OrderPaymentStatus>? orderPaymentStatus) {
  return orderPaymentStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> orderPaymentStatusListToJson(
    List<enums.OrderPaymentStatus>? orderPaymentStatus) {
  if (orderPaymentStatus == null) {
    return [];
  }

  return orderPaymentStatus.map((e) => e.value!).toList();
}

List<enums.OrderPaymentStatus> orderPaymentStatusListFromJson(
  List? orderPaymentStatus, [
  List<enums.OrderPaymentStatus>? defaultValue,
]) {
  if (orderPaymentStatus == null) {
    return defaultValue ?? [];
  }

  return orderPaymentStatus
      .map((e) => orderPaymentStatusFromJson(e.toString()))
      .toList();
}

List<enums.OrderPaymentStatus>? orderPaymentStatusNullableListFromJson(
  List? orderPaymentStatus, [
  List<enums.OrderPaymentStatus>? defaultValue,
]) {
  if (orderPaymentStatus == null) {
    return defaultValue;
  }

  return orderPaymentStatus
      .map((e) => orderPaymentStatusFromJson(e.toString()))
      .toList();
}

String? orderEditStatusNullableToJson(enums.OrderEditStatus? orderEditStatus) {
  return orderEditStatus?.value;
}

String? orderEditStatusToJson(enums.OrderEditStatus orderEditStatus) {
  return orderEditStatus.value;
}

enums.OrderEditStatus orderEditStatusFromJson(
  Object? orderEditStatus, [
  enums.OrderEditStatus? defaultValue,
]) {
  return enums.OrderEditStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          orderEditStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.OrderEditStatus.swaggerGeneratedUnknown;
}

enums.OrderEditStatus? orderEditStatusNullableFromJson(
  Object? orderEditStatus, [
  enums.OrderEditStatus? defaultValue,
]) {
  if (orderEditStatus == null) {
    return null;
  }
  return enums.OrderEditStatus.values
          .firstWhereOrNull((e) => e.value == orderEditStatus) ??
      defaultValue;
}

String orderEditStatusExplodedListToJson(
    List<enums.OrderEditStatus>? orderEditStatus) {
  return orderEditStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> orderEditStatusListToJson(
    List<enums.OrderEditStatus>? orderEditStatus) {
  if (orderEditStatus == null) {
    return [];
  }

  return orderEditStatus.map((e) => e.value!).toList();
}

List<enums.OrderEditStatus> orderEditStatusListFromJson(
  List? orderEditStatus, [
  List<enums.OrderEditStatus>? defaultValue,
]) {
  if (orderEditStatus == null) {
    return defaultValue ?? [];
  }

  return orderEditStatus
      .map((e) => orderEditStatusFromJson(e.toString()))
      .toList();
}

List<enums.OrderEditStatus>? orderEditStatusNullableListFromJson(
  List? orderEditStatus, [
  List<enums.OrderEditStatus>? defaultValue,
]) {
  if (orderEditStatus == null) {
    return defaultValue;
  }

  return orderEditStatus
      .map((e) => orderEditStatusFromJson(e.toString()))
      .toList();
}

String? orderItemChangeTypeNullableToJson(
    enums.OrderItemChangeType? orderItemChangeType) {
  return orderItemChangeType?.value;
}

String? orderItemChangeTypeToJson(
    enums.OrderItemChangeType orderItemChangeType) {
  return orderItemChangeType.value;
}

enums.OrderItemChangeType orderItemChangeTypeFromJson(
  Object? orderItemChangeType, [
  enums.OrderItemChangeType? defaultValue,
]) {
  return enums.OrderItemChangeType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          orderItemChangeType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.OrderItemChangeType.swaggerGeneratedUnknown;
}

enums.OrderItemChangeType? orderItemChangeTypeNullableFromJson(
  Object? orderItemChangeType, [
  enums.OrderItemChangeType? defaultValue,
]) {
  if (orderItemChangeType == null) {
    return null;
  }
  return enums.OrderItemChangeType.values
          .firstWhereOrNull((e) => e.value == orderItemChangeType) ??
      defaultValue;
}

String orderItemChangeTypeExplodedListToJson(
    List<enums.OrderItemChangeType>? orderItemChangeType) {
  return orderItemChangeType?.map((e) => e.value!).join(',') ?? '';
}

List<String> orderItemChangeTypeListToJson(
    List<enums.OrderItemChangeType>? orderItemChangeType) {
  if (orderItemChangeType == null) {
    return [];
  }

  return orderItemChangeType.map((e) => e.value!).toList();
}

List<enums.OrderItemChangeType> orderItemChangeTypeListFromJson(
  List? orderItemChangeType, [
  List<enums.OrderItemChangeType>? defaultValue,
]) {
  if (orderItemChangeType == null) {
    return defaultValue ?? [];
  }

  return orderItemChangeType
      .map((e) => orderItemChangeTypeFromJson(e.toString()))
      .toList();
}

List<enums.OrderItemChangeType>? orderItemChangeTypeNullableListFromJson(
  List? orderItemChangeType, [
  List<enums.OrderItemChangeType>? defaultValue,
]) {
  if (orderItemChangeType == null) {
    return defaultValue;
  }

  return orderItemChangeType
      .map((e) => orderItemChangeTypeFromJson(e.toString()))
      .toList();
}

String? paymentCollectionTypeNullableToJson(
    enums.PaymentCollectionType? paymentCollectionType) {
  return paymentCollectionType?.value;
}

String? paymentCollectionTypeToJson(
    enums.PaymentCollectionType paymentCollectionType) {
  return paymentCollectionType.value;
}

enums.PaymentCollectionType paymentCollectionTypeFromJson(
  Object? paymentCollectionType, [
  enums.PaymentCollectionType? defaultValue,
]) {
  return enums.PaymentCollectionType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          paymentCollectionType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.PaymentCollectionType.swaggerGeneratedUnknown;
}

enums.PaymentCollectionType? paymentCollectionTypeNullableFromJson(
  Object? paymentCollectionType, [
  enums.PaymentCollectionType? defaultValue,
]) {
  if (paymentCollectionType == null) {
    return null;
  }
  return enums.PaymentCollectionType.values
          .firstWhereOrNull((e) => e.value == paymentCollectionType) ??
      defaultValue;
}

String paymentCollectionTypeExplodedListToJson(
    List<enums.PaymentCollectionType>? paymentCollectionType) {
  return paymentCollectionType?.map((e) => e.value!).join(',') ?? '';
}

List<String> paymentCollectionTypeListToJson(
    List<enums.PaymentCollectionType>? paymentCollectionType) {
  if (paymentCollectionType == null) {
    return [];
  }

  return paymentCollectionType.map((e) => e.value!).toList();
}

List<enums.PaymentCollectionType> paymentCollectionTypeListFromJson(
  List? paymentCollectionType, [
  List<enums.PaymentCollectionType>? defaultValue,
]) {
  if (paymentCollectionType == null) {
    return defaultValue ?? [];
  }

  return paymentCollectionType
      .map((e) => paymentCollectionTypeFromJson(e.toString()))
      .toList();
}

List<enums.PaymentCollectionType>? paymentCollectionTypeNullableListFromJson(
  List? paymentCollectionType, [
  List<enums.PaymentCollectionType>? defaultValue,
]) {
  if (paymentCollectionType == null) {
    return defaultValue;
  }

  return paymentCollectionType
      .map((e) => paymentCollectionTypeFromJson(e.toString()))
      .toList();
}

String? paymentCollectionStatusNullableToJson(
    enums.PaymentCollectionStatus? paymentCollectionStatus) {
  return paymentCollectionStatus?.value;
}

String? paymentCollectionStatusToJson(
    enums.PaymentCollectionStatus paymentCollectionStatus) {
  return paymentCollectionStatus.value;
}

enums.PaymentCollectionStatus paymentCollectionStatusFromJson(
  Object? paymentCollectionStatus, [
  enums.PaymentCollectionStatus? defaultValue,
]) {
  return enums.PaymentCollectionStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          paymentCollectionStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.PaymentCollectionStatus.swaggerGeneratedUnknown;
}

enums.PaymentCollectionStatus? paymentCollectionStatusNullableFromJson(
  Object? paymentCollectionStatus, [
  enums.PaymentCollectionStatus? defaultValue,
]) {
  if (paymentCollectionStatus == null) {
    return null;
  }
  return enums.PaymentCollectionStatus.values
          .firstWhereOrNull((e) => e.value == paymentCollectionStatus) ??
      defaultValue;
}

String paymentCollectionStatusExplodedListToJson(
    List<enums.PaymentCollectionStatus>? paymentCollectionStatus) {
  return paymentCollectionStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> paymentCollectionStatusListToJson(
    List<enums.PaymentCollectionStatus>? paymentCollectionStatus) {
  if (paymentCollectionStatus == null) {
    return [];
  }

  return paymentCollectionStatus.map((e) => e.value!).toList();
}

List<enums.PaymentCollectionStatus> paymentCollectionStatusListFromJson(
  List? paymentCollectionStatus, [
  List<enums.PaymentCollectionStatus>? defaultValue,
]) {
  if (paymentCollectionStatus == null) {
    return defaultValue ?? [];
  }

  return paymentCollectionStatus
      .map((e) => paymentCollectionStatusFromJson(e.toString()))
      .toList();
}

List<enums.PaymentCollectionStatus>?
    paymentCollectionStatusNullableListFromJson(
  List? paymentCollectionStatus, [
  List<enums.PaymentCollectionStatus>? defaultValue,
]) {
  if (paymentCollectionStatus == null) {
    return defaultValue;
  }

  return paymentCollectionStatus
      .map((e) => paymentCollectionStatusFromJson(e.toString()))
      .toList();
}

String? paymentSessionStatusNullableToJson(
    enums.PaymentSessionStatus? paymentSessionStatus) {
  return paymentSessionStatus?.value;
}

String? paymentSessionStatusToJson(
    enums.PaymentSessionStatus paymentSessionStatus) {
  return paymentSessionStatus.value;
}

enums.PaymentSessionStatus paymentSessionStatusFromJson(
  Object? paymentSessionStatus, [
  enums.PaymentSessionStatus? defaultValue,
]) {
  return enums.PaymentSessionStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          paymentSessionStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.PaymentSessionStatus.swaggerGeneratedUnknown;
}

enums.PaymentSessionStatus? paymentSessionStatusNullableFromJson(
  Object? paymentSessionStatus, [
  enums.PaymentSessionStatus? defaultValue,
]) {
  if (paymentSessionStatus == null) {
    return null;
  }
  return enums.PaymentSessionStatus.values
          .firstWhereOrNull((e) => e.value == paymentSessionStatus) ??
      defaultValue;
}

String paymentSessionStatusExplodedListToJson(
    List<enums.PaymentSessionStatus>? paymentSessionStatus) {
  return paymentSessionStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> paymentSessionStatusListToJson(
    List<enums.PaymentSessionStatus>? paymentSessionStatus) {
  if (paymentSessionStatus == null) {
    return [];
  }

  return paymentSessionStatus.map((e) => e.value!).toList();
}

List<enums.PaymentSessionStatus> paymentSessionStatusListFromJson(
  List? paymentSessionStatus, [
  List<enums.PaymentSessionStatus>? defaultValue,
]) {
  if (paymentSessionStatus == null) {
    return defaultValue ?? [];
  }

  return paymentSessionStatus
      .map((e) => paymentSessionStatusFromJson(e.toString()))
      .toList();
}

List<enums.PaymentSessionStatus>? paymentSessionStatusNullableListFromJson(
  List? paymentSessionStatus, [
  List<enums.PaymentSessionStatus>? defaultValue,
]) {
  if (paymentSessionStatus == null) {
    return defaultValue;
  }

  return paymentSessionStatus
      .map((e) => paymentSessionStatusFromJson(e.toString()))
      .toList();
}

String? priceListTypeNullableToJson(enums.PriceListType? priceListType) {
  return priceListType?.value;
}

String? priceListTypeToJson(enums.PriceListType priceListType) {
  return priceListType.value;
}

enums.PriceListType priceListTypeFromJson(
  Object? priceListType, [
  enums.PriceListType? defaultValue,
]) {
  return enums.PriceListType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          priceListType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.PriceListType.swaggerGeneratedUnknown;
}

enums.PriceListType? priceListTypeNullableFromJson(
  Object? priceListType, [
  enums.PriceListType? defaultValue,
]) {
  if (priceListType == null) {
    return null;
  }
  return enums.PriceListType.values
          .firstWhereOrNull((e) => e.value == priceListType) ??
      defaultValue;
}

String priceListTypeExplodedListToJson(
    List<enums.PriceListType>? priceListType) {
  return priceListType?.map((e) => e.value!).join(',') ?? '';
}

List<String> priceListTypeListToJson(List<enums.PriceListType>? priceListType) {
  if (priceListType == null) {
    return [];
  }

  return priceListType.map((e) => e.value!).toList();
}

List<enums.PriceListType> priceListTypeListFromJson(
  List? priceListType, [
  List<enums.PriceListType>? defaultValue,
]) {
  if (priceListType == null) {
    return defaultValue ?? [];
  }

  return priceListType.map((e) => priceListTypeFromJson(e.toString())).toList();
}

List<enums.PriceListType>? priceListTypeNullableListFromJson(
  List? priceListType, [
  List<enums.PriceListType>? defaultValue,
]) {
  if (priceListType == null) {
    return defaultValue;
  }

  return priceListType.map((e) => priceListTypeFromJson(e.toString())).toList();
}

String? priceListStatusNullableToJson(enums.PriceListStatus? priceListStatus) {
  return priceListStatus?.value;
}

String? priceListStatusToJson(enums.PriceListStatus priceListStatus) {
  return priceListStatus.value;
}

enums.PriceListStatus priceListStatusFromJson(
  Object? priceListStatus, [
  enums.PriceListStatus? defaultValue,
]) {
  return enums.PriceListStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          priceListStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.PriceListStatus.swaggerGeneratedUnknown;
}

enums.PriceListStatus? priceListStatusNullableFromJson(
  Object? priceListStatus, [
  enums.PriceListStatus? defaultValue,
]) {
  if (priceListStatus == null) {
    return null;
  }
  return enums.PriceListStatus.values
          .firstWhereOrNull((e) => e.value == priceListStatus) ??
      defaultValue;
}

String priceListStatusExplodedListToJson(
    List<enums.PriceListStatus>? priceListStatus) {
  return priceListStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> priceListStatusListToJson(
    List<enums.PriceListStatus>? priceListStatus) {
  if (priceListStatus == null) {
    return [];
  }

  return priceListStatus.map((e) => e.value!).toList();
}

List<enums.PriceListStatus> priceListStatusListFromJson(
  List? priceListStatus, [
  List<enums.PriceListStatus>? defaultValue,
]) {
  if (priceListStatus == null) {
    return defaultValue ?? [];
  }

  return priceListStatus
      .map((e) => priceListStatusFromJson(e.toString()))
      .toList();
}

List<enums.PriceListStatus>? priceListStatusNullableListFromJson(
  List? priceListStatus, [
  List<enums.PriceListStatus>? defaultValue,
]) {
  if (priceListStatus == null) {
    return defaultValue;
  }

  return priceListStatus
      .map((e) => priceListStatusFromJson(e.toString()))
      .toList();
}

String? pricedProductStatusNullableToJson(
    enums.PricedProductStatus? pricedProductStatus) {
  return pricedProductStatus?.value;
}

String? pricedProductStatusToJson(
    enums.PricedProductStatus pricedProductStatus) {
  return pricedProductStatus.value;
}

enums.PricedProductStatus pricedProductStatusFromJson(
  Object? pricedProductStatus, [
  enums.PricedProductStatus? defaultValue,
]) {
  return enums.PricedProductStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          pricedProductStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.PricedProductStatus.swaggerGeneratedUnknown;
}

enums.PricedProductStatus? pricedProductStatusNullableFromJson(
  Object? pricedProductStatus, [
  enums.PricedProductStatus? defaultValue,
]) {
  if (pricedProductStatus == null) {
    return null;
  }
  return enums.PricedProductStatus.values
          .firstWhereOrNull((e) => e.value == pricedProductStatus) ??
      defaultValue;
}

String pricedProductStatusExplodedListToJson(
    List<enums.PricedProductStatus>? pricedProductStatus) {
  return pricedProductStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> pricedProductStatusListToJson(
    List<enums.PricedProductStatus>? pricedProductStatus) {
  if (pricedProductStatus == null) {
    return [];
  }

  return pricedProductStatus.map((e) => e.value!).toList();
}

List<enums.PricedProductStatus> pricedProductStatusListFromJson(
  List? pricedProductStatus, [
  List<enums.PricedProductStatus>? defaultValue,
]) {
  if (pricedProductStatus == null) {
    return defaultValue ?? [];
  }

  return pricedProductStatus
      .map((e) => pricedProductStatusFromJson(e.toString()))
      .toList();
}

List<enums.PricedProductStatus>? pricedProductStatusNullableListFromJson(
  List? pricedProductStatus, [
  List<enums.PricedProductStatus>? defaultValue,
]) {
  if (pricedProductStatus == null) {
    return defaultValue;
  }

  return pricedProductStatus
      .map((e) => pricedProductStatusFromJson(e.toString()))
      .toList();
}

String? pricedShippingOptionPriceTypeNullableToJson(
    enums.PricedShippingOptionPriceType? pricedShippingOptionPriceType) {
  return pricedShippingOptionPriceType?.value;
}

String? pricedShippingOptionPriceTypeToJson(
    enums.PricedShippingOptionPriceType pricedShippingOptionPriceType) {
  return pricedShippingOptionPriceType.value;
}

enums.PricedShippingOptionPriceType pricedShippingOptionPriceTypeFromJson(
  Object? pricedShippingOptionPriceType, [
  enums.PricedShippingOptionPriceType? defaultValue,
]) {
  return enums.PricedShippingOptionPriceType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          pricedShippingOptionPriceType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.PricedShippingOptionPriceType.swaggerGeneratedUnknown;
}

enums.PricedShippingOptionPriceType?
    pricedShippingOptionPriceTypeNullableFromJson(
  Object? pricedShippingOptionPriceType, [
  enums.PricedShippingOptionPriceType? defaultValue,
]) {
  if (pricedShippingOptionPriceType == null) {
    return null;
  }
  return enums.PricedShippingOptionPriceType.values
          .firstWhereOrNull((e) => e.value == pricedShippingOptionPriceType) ??
      defaultValue;
}

String pricedShippingOptionPriceTypeExplodedListToJson(
    List<enums.PricedShippingOptionPriceType>? pricedShippingOptionPriceType) {
  return pricedShippingOptionPriceType?.map((e) => e.value!).join(',') ?? '';
}

List<String> pricedShippingOptionPriceTypeListToJson(
    List<enums.PricedShippingOptionPriceType>? pricedShippingOptionPriceType) {
  if (pricedShippingOptionPriceType == null) {
    return [];
  }

  return pricedShippingOptionPriceType.map((e) => e.value!).toList();
}

List<enums.PricedShippingOptionPriceType>
    pricedShippingOptionPriceTypeListFromJson(
  List? pricedShippingOptionPriceType, [
  List<enums.PricedShippingOptionPriceType>? defaultValue,
]) {
  if (pricedShippingOptionPriceType == null) {
    return defaultValue ?? [];
  }

  return pricedShippingOptionPriceType
      .map((e) => pricedShippingOptionPriceTypeFromJson(e.toString()))
      .toList();
}

List<enums.PricedShippingOptionPriceType>?
    pricedShippingOptionPriceTypeNullableListFromJson(
  List? pricedShippingOptionPriceType, [
  List<enums.PricedShippingOptionPriceType>? defaultValue,
]) {
  if (pricedShippingOptionPriceType == null) {
    return defaultValue;
  }

  return pricedShippingOptionPriceType
      .map((e) => pricedShippingOptionPriceTypeFromJson(e.toString()))
      .toList();
}

String? productStatusNullableToJson(enums.ProductStatus? productStatus) {
  return productStatus?.value;
}

String? productStatusToJson(enums.ProductStatus productStatus) {
  return productStatus.value;
}

enums.ProductStatus productStatusFromJson(
  Object? productStatus, [
  enums.ProductStatus? defaultValue,
]) {
  return enums.ProductStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          productStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ProductStatus.swaggerGeneratedUnknown;
}

enums.ProductStatus? productStatusNullableFromJson(
  Object? productStatus, [
  enums.ProductStatus? defaultValue,
]) {
  if (productStatus == null) {
    return null;
  }
  return enums.ProductStatus.values
          .firstWhereOrNull((e) => e.value == productStatus) ??
      defaultValue;
}

String productStatusExplodedListToJson(
    List<enums.ProductStatus>? productStatus) {
  return productStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> productStatusListToJson(List<enums.ProductStatus>? productStatus) {
  if (productStatus == null) {
    return [];
  }

  return productStatus.map((e) => e.value!).toList();
}

List<enums.ProductStatus> productStatusListFromJson(
  List? productStatus, [
  List<enums.ProductStatus>? defaultValue,
]) {
  if (productStatus == null) {
    return defaultValue ?? [];
  }

  return productStatus.map((e) => productStatusFromJson(e.toString())).toList();
}

List<enums.ProductStatus>? productStatusNullableListFromJson(
  List? productStatus, [
  List<enums.ProductStatus>? defaultValue,
]) {
  if (productStatus == null) {
    return defaultValue;
  }

  return productStatus.map((e) => productStatusFromJson(e.toString())).toList();
}

String? refundReasonNullableToJson(enums.RefundReason? refundReason) {
  return refundReason?.value;
}

String? refundReasonToJson(enums.RefundReason refundReason) {
  return refundReason.value;
}

enums.RefundReason refundReasonFromJson(
  Object? refundReason, [
  enums.RefundReason? defaultValue,
]) {
  return enums.RefundReason.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          refundReason?.toString().toLowerCase()) ??
      defaultValue ??
      enums.RefundReason.swaggerGeneratedUnknown;
}

enums.RefundReason? refundReasonNullableFromJson(
  Object? refundReason, [
  enums.RefundReason? defaultValue,
]) {
  if (refundReason == null) {
    return null;
  }
  return enums.RefundReason.values
          .firstWhereOrNull((e) => e.value == refundReason) ??
      defaultValue;
}

String refundReasonExplodedListToJson(List<enums.RefundReason>? refundReason) {
  return refundReason?.map((e) => e.value!).join(',') ?? '';
}

List<String> refundReasonListToJson(List<enums.RefundReason>? refundReason) {
  if (refundReason == null) {
    return [];
  }

  return refundReason.map((e) => e.value!).toList();
}

List<enums.RefundReason> refundReasonListFromJson(
  List? refundReason, [
  List<enums.RefundReason>? defaultValue,
]) {
  if (refundReason == null) {
    return defaultValue ?? [];
  }

  return refundReason.map((e) => refundReasonFromJson(e.toString())).toList();
}

List<enums.RefundReason>? refundReasonNullableListFromJson(
  List? refundReason, [
  List<enums.RefundReason>? defaultValue,
]) {
  if (refundReason == null) {
    return defaultValue;
  }

  return refundReason.map((e) => refundReasonFromJson(e.toString())).toList();
}

String? returnStatusNullableToJson(enums.ReturnStatus? returnStatus) {
  return returnStatus?.value;
}

String? returnStatusToJson(enums.ReturnStatus returnStatus) {
  return returnStatus.value;
}

enums.ReturnStatus returnStatusFromJson(
  Object? returnStatus, [
  enums.ReturnStatus? defaultValue,
]) {
  return enums.ReturnStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          returnStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ReturnStatus.swaggerGeneratedUnknown;
}

enums.ReturnStatus? returnStatusNullableFromJson(
  Object? returnStatus, [
  enums.ReturnStatus? defaultValue,
]) {
  if (returnStatus == null) {
    return null;
  }
  return enums.ReturnStatus.values
          .firstWhereOrNull((e) => e.value == returnStatus) ??
      defaultValue;
}

String returnStatusExplodedListToJson(List<enums.ReturnStatus>? returnStatus) {
  return returnStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> returnStatusListToJson(List<enums.ReturnStatus>? returnStatus) {
  if (returnStatus == null) {
    return [];
  }

  return returnStatus.map((e) => e.value!).toList();
}

List<enums.ReturnStatus> returnStatusListFromJson(
  List? returnStatus, [
  List<enums.ReturnStatus>? defaultValue,
]) {
  if (returnStatus == null) {
    return defaultValue ?? [];
  }

  return returnStatus.map((e) => returnStatusFromJson(e.toString())).toList();
}

List<enums.ReturnStatus>? returnStatusNullableListFromJson(
  List? returnStatus, [
  List<enums.ReturnStatus>? defaultValue,
]) {
  if (returnStatus == null) {
    return defaultValue;
  }

  return returnStatus.map((e) => returnStatusFromJson(e.toString())).toList();
}

String? shippingOptionPriceTypeNullableToJson(
    enums.ShippingOptionPriceType? shippingOptionPriceType) {
  return shippingOptionPriceType?.value;
}

String? shippingOptionPriceTypeToJson(
    enums.ShippingOptionPriceType shippingOptionPriceType) {
  return shippingOptionPriceType.value;
}

enums.ShippingOptionPriceType shippingOptionPriceTypeFromJson(
  Object? shippingOptionPriceType, [
  enums.ShippingOptionPriceType? defaultValue,
]) {
  return enums.ShippingOptionPriceType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          shippingOptionPriceType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ShippingOptionPriceType.swaggerGeneratedUnknown;
}

enums.ShippingOptionPriceType? shippingOptionPriceTypeNullableFromJson(
  Object? shippingOptionPriceType, [
  enums.ShippingOptionPriceType? defaultValue,
]) {
  if (shippingOptionPriceType == null) {
    return null;
  }
  return enums.ShippingOptionPriceType.values
          .firstWhereOrNull((e) => e.value == shippingOptionPriceType) ??
      defaultValue;
}

String shippingOptionPriceTypeExplodedListToJson(
    List<enums.ShippingOptionPriceType>? shippingOptionPriceType) {
  return shippingOptionPriceType?.map((e) => e.value!).join(',') ?? '';
}

List<String> shippingOptionPriceTypeListToJson(
    List<enums.ShippingOptionPriceType>? shippingOptionPriceType) {
  if (shippingOptionPriceType == null) {
    return [];
  }

  return shippingOptionPriceType.map((e) => e.value!).toList();
}

List<enums.ShippingOptionPriceType> shippingOptionPriceTypeListFromJson(
  List? shippingOptionPriceType, [
  List<enums.ShippingOptionPriceType>? defaultValue,
]) {
  if (shippingOptionPriceType == null) {
    return defaultValue ?? [];
  }

  return shippingOptionPriceType
      .map((e) => shippingOptionPriceTypeFromJson(e.toString()))
      .toList();
}

List<enums.ShippingOptionPriceType>?
    shippingOptionPriceTypeNullableListFromJson(
  List? shippingOptionPriceType, [
  List<enums.ShippingOptionPriceType>? defaultValue,
]) {
  if (shippingOptionPriceType == null) {
    return defaultValue;
  }

  return shippingOptionPriceType
      .map((e) => shippingOptionPriceTypeFromJson(e.toString()))
      .toList();
}

String? shippingOptionRequirementTypeNullableToJson(
    enums.ShippingOptionRequirementType? shippingOptionRequirementType) {
  return shippingOptionRequirementType?.value;
}

String? shippingOptionRequirementTypeToJson(
    enums.ShippingOptionRequirementType shippingOptionRequirementType) {
  return shippingOptionRequirementType.value;
}

enums.ShippingOptionRequirementType shippingOptionRequirementTypeFromJson(
  Object? shippingOptionRequirementType, [
  enums.ShippingOptionRequirementType? defaultValue,
]) {
  return enums.ShippingOptionRequirementType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          shippingOptionRequirementType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ShippingOptionRequirementType.swaggerGeneratedUnknown;
}

enums.ShippingOptionRequirementType?
    shippingOptionRequirementTypeNullableFromJson(
  Object? shippingOptionRequirementType, [
  enums.ShippingOptionRequirementType? defaultValue,
]) {
  if (shippingOptionRequirementType == null) {
    return null;
  }
  return enums.ShippingOptionRequirementType.values
          .firstWhereOrNull((e) => e.value == shippingOptionRequirementType) ??
      defaultValue;
}

String shippingOptionRequirementTypeExplodedListToJson(
    List<enums.ShippingOptionRequirementType>? shippingOptionRequirementType) {
  return shippingOptionRequirementType?.map((e) => e.value!).join(',') ?? '';
}

List<String> shippingOptionRequirementTypeListToJson(
    List<enums.ShippingOptionRequirementType>? shippingOptionRequirementType) {
  if (shippingOptionRequirementType == null) {
    return [];
  }

  return shippingOptionRequirementType.map((e) => e.value!).toList();
}

List<enums.ShippingOptionRequirementType>
    shippingOptionRequirementTypeListFromJson(
  List? shippingOptionRequirementType, [
  List<enums.ShippingOptionRequirementType>? defaultValue,
]) {
  if (shippingOptionRequirementType == null) {
    return defaultValue ?? [];
  }

  return shippingOptionRequirementType
      .map((e) => shippingOptionRequirementTypeFromJson(e.toString()))
      .toList();
}

List<enums.ShippingOptionRequirementType>?
    shippingOptionRequirementTypeNullableListFromJson(
  List? shippingOptionRequirementType, [
  List<enums.ShippingOptionRequirementType>? defaultValue,
]) {
  if (shippingOptionRequirementType == null) {
    return defaultValue;
  }

  return shippingOptionRequirementType
      .map((e) => shippingOptionRequirementTypeFromJson(e.toString()))
      .toList();
}

String? shippingProfileTypeNullableToJson(
    enums.ShippingProfileType? shippingProfileType) {
  return shippingProfileType?.value;
}

String? shippingProfileTypeToJson(
    enums.ShippingProfileType shippingProfileType) {
  return shippingProfileType.value;
}

enums.ShippingProfileType shippingProfileTypeFromJson(
  Object? shippingProfileType, [
  enums.ShippingProfileType? defaultValue,
]) {
  return enums.ShippingProfileType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          shippingProfileType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.ShippingProfileType.swaggerGeneratedUnknown;
}

enums.ShippingProfileType? shippingProfileTypeNullableFromJson(
  Object? shippingProfileType, [
  enums.ShippingProfileType? defaultValue,
]) {
  if (shippingProfileType == null) {
    return null;
  }
  return enums.ShippingProfileType.values
          .firstWhereOrNull((e) => e.value == shippingProfileType) ??
      defaultValue;
}

String shippingProfileTypeExplodedListToJson(
    List<enums.ShippingProfileType>? shippingProfileType) {
  return shippingProfileType?.map((e) => e.value!).join(',') ?? '';
}

List<String> shippingProfileTypeListToJson(
    List<enums.ShippingProfileType>? shippingProfileType) {
  if (shippingProfileType == null) {
    return [];
  }

  return shippingProfileType.map((e) => e.value!).toList();
}

List<enums.ShippingProfileType> shippingProfileTypeListFromJson(
  List? shippingProfileType, [
  List<enums.ShippingProfileType>? defaultValue,
]) {
  if (shippingProfileType == null) {
    return defaultValue ?? [];
  }

  return shippingProfileType
      .map((e) => shippingProfileTypeFromJson(e.toString()))
      .toList();
}

List<enums.ShippingProfileType>? shippingProfileTypeNullableListFromJson(
  List? shippingProfileType, [
  List<enums.ShippingProfileType>? defaultValue,
]) {
  if (shippingProfileType == null) {
    return defaultValue;
  }

  return shippingProfileType
      .map((e) => shippingProfileTypeFromJson(e.toString()))
      .toList();
}

String? swapFulfillmentStatusNullableToJson(
    enums.SwapFulfillmentStatus? swapFulfillmentStatus) {
  return swapFulfillmentStatus?.value;
}

String? swapFulfillmentStatusToJson(
    enums.SwapFulfillmentStatus swapFulfillmentStatus) {
  return swapFulfillmentStatus.value;
}

enums.SwapFulfillmentStatus swapFulfillmentStatusFromJson(
  Object? swapFulfillmentStatus, [
  enums.SwapFulfillmentStatus? defaultValue,
]) {
  return enums.SwapFulfillmentStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          swapFulfillmentStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.SwapFulfillmentStatus.swaggerGeneratedUnknown;
}

enums.SwapFulfillmentStatus? swapFulfillmentStatusNullableFromJson(
  Object? swapFulfillmentStatus, [
  enums.SwapFulfillmentStatus? defaultValue,
]) {
  if (swapFulfillmentStatus == null) {
    return null;
  }
  return enums.SwapFulfillmentStatus.values
          .firstWhereOrNull((e) => e.value == swapFulfillmentStatus) ??
      defaultValue;
}

String swapFulfillmentStatusExplodedListToJson(
    List<enums.SwapFulfillmentStatus>? swapFulfillmentStatus) {
  return swapFulfillmentStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> swapFulfillmentStatusListToJson(
    List<enums.SwapFulfillmentStatus>? swapFulfillmentStatus) {
  if (swapFulfillmentStatus == null) {
    return [];
  }

  return swapFulfillmentStatus.map((e) => e.value!).toList();
}

List<enums.SwapFulfillmentStatus> swapFulfillmentStatusListFromJson(
  List? swapFulfillmentStatus, [
  List<enums.SwapFulfillmentStatus>? defaultValue,
]) {
  if (swapFulfillmentStatus == null) {
    return defaultValue ?? [];
  }

  return swapFulfillmentStatus
      .map((e) => swapFulfillmentStatusFromJson(e.toString()))
      .toList();
}

List<enums.SwapFulfillmentStatus>? swapFulfillmentStatusNullableListFromJson(
  List? swapFulfillmentStatus, [
  List<enums.SwapFulfillmentStatus>? defaultValue,
]) {
  if (swapFulfillmentStatus == null) {
    return defaultValue;
  }

  return swapFulfillmentStatus
      .map((e) => swapFulfillmentStatusFromJson(e.toString()))
      .toList();
}

String? swapPaymentStatusNullableToJson(
    enums.SwapPaymentStatus? swapPaymentStatus) {
  return swapPaymentStatus?.value;
}

String? swapPaymentStatusToJson(enums.SwapPaymentStatus swapPaymentStatus) {
  return swapPaymentStatus.value;
}

enums.SwapPaymentStatus swapPaymentStatusFromJson(
  Object? swapPaymentStatus, [
  enums.SwapPaymentStatus? defaultValue,
]) {
  return enums.SwapPaymentStatus.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          swapPaymentStatus?.toString().toLowerCase()) ??
      defaultValue ??
      enums.SwapPaymentStatus.swaggerGeneratedUnknown;
}

enums.SwapPaymentStatus? swapPaymentStatusNullableFromJson(
  Object? swapPaymentStatus, [
  enums.SwapPaymentStatus? defaultValue,
]) {
  if (swapPaymentStatus == null) {
    return null;
  }
  return enums.SwapPaymentStatus.values
          .firstWhereOrNull((e) => e.value == swapPaymentStatus) ??
      defaultValue;
}

String swapPaymentStatusExplodedListToJson(
    List<enums.SwapPaymentStatus>? swapPaymentStatus) {
  return swapPaymentStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> swapPaymentStatusListToJson(
    List<enums.SwapPaymentStatus>? swapPaymentStatus) {
  if (swapPaymentStatus == null) {
    return [];
  }

  return swapPaymentStatus.map((e) => e.value!).toList();
}

List<enums.SwapPaymentStatus> swapPaymentStatusListFromJson(
  List? swapPaymentStatus, [
  List<enums.SwapPaymentStatus>? defaultValue,
]) {
  if (swapPaymentStatus == null) {
    return defaultValue ?? [];
  }

  return swapPaymentStatus
      .map((e) => swapPaymentStatusFromJson(e.toString()))
      .toList();
}

List<enums.SwapPaymentStatus>? swapPaymentStatusNullableListFromJson(
  List? swapPaymentStatus, [
  List<enums.SwapPaymentStatus>? defaultValue,
]) {
  if (swapPaymentStatus == null) {
    return defaultValue;
  }

  return swapPaymentStatus
      .map((e) => swapPaymentStatusFromJson(e.toString()))
      .toList();
}

String? userRoleNullableToJson(enums.UserRole? userRole) {
  return userRole?.value;
}

String? userRoleToJson(enums.UserRole userRole) {
  return userRole.value;
}

enums.UserRole userRoleFromJson(
  Object? userRole, [
  enums.UserRole? defaultValue,
]) {
  return enums.UserRole.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          userRole?.toString().toLowerCase()) ??
      defaultValue ??
      enums.UserRole.swaggerGeneratedUnknown;
}

enums.UserRole? userRoleNullableFromJson(
  Object? userRole, [
  enums.UserRole? defaultValue,
]) {
  if (userRole == null) {
    return null;
  }
  return enums.UserRole.values.firstWhereOrNull((e) => e.value == userRole) ??
      defaultValue;
}

String userRoleExplodedListToJson(List<enums.UserRole>? userRole) {
  return userRole?.map((e) => e.value!).join(',') ?? '';
}

List<String> userRoleListToJson(List<enums.UserRole>? userRole) {
  if (userRole == null) {
    return [];
  }

  return userRole.map((e) => e.value!).toList();
}

List<enums.UserRole> userRoleListFromJson(
  List? userRole, [
  List<enums.UserRole>? defaultValue,
]) {
  if (userRole == null) {
    return defaultValue ?? [];
  }

  return userRole.map((e) => userRoleFromJson(e.toString())).toList();
}

List<enums.UserRole>? userRoleNullableListFromJson(
  List? userRole, [
  List<enums.UserRole>? defaultValue,
]) {
  if (userRole == null) {
    return defaultValue;
  }

  return userRole.map((e) => userRoleFromJson(e.toString())).toList();
}

String? storeCompleteCartResTypeNullableToJson(
    enums.StoreCompleteCartResType? storeCompleteCartResType) {
  return storeCompleteCartResType?.value;
}

String? storeCompleteCartResTypeToJson(
    enums.StoreCompleteCartResType storeCompleteCartResType) {
  return storeCompleteCartResType.value;
}

enums.StoreCompleteCartResType storeCompleteCartResTypeFromJson(
  Object? storeCompleteCartResType, [
  enums.StoreCompleteCartResType? defaultValue,
]) {
  return enums.StoreCompleteCartResType.values.firstWhereOrNull((e) =>
          e.value.toString().toLowerCase() ==
          storeCompleteCartResType?.toString().toLowerCase()) ??
      defaultValue ??
      enums.StoreCompleteCartResType.swaggerGeneratedUnknown;
}

enums.StoreCompleteCartResType? storeCompleteCartResTypeNullableFromJson(
  Object? storeCompleteCartResType, [
  enums.StoreCompleteCartResType? defaultValue,
]) {
  if (storeCompleteCartResType == null) {
    return null;
  }
  return enums.StoreCompleteCartResType.values
          .firstWhereOrNull((e) => e.value == storeCompleteCartResType) ??
      defaultValue;
}

String storeCompleteCartResTypeExplodedListToJson(
    List<enums.StoreCompleteCartResType>? storeCompleteCartResType) {
  return storeCompleteCartResType?.map((e) => e.value!).join(',') ?? '';
}

List<String> storeCompleteCartResTypeListToJson(
    List<enums.StoreCompleteCartResType>? storeCompleteCartResType) {
  if (storeCompleteCartResType == null) {
    return [];
  }

  return storeCompleteCartResType.map((e) => e.value!).toList();
}

List<enums.StoreCompleteCartResType> storeCompleteCartResTypeListFromJson(
  List? storeCompleteCartResType, [
  List<enums.StoreCompleteCartResType>? defaultValue,
]) {
  if (storeCompleteCartResType == null) {
    return defaultValue ?? [];
  }

  return storeCompleteCartResType
      .map((e) => storeCompleteCartResTypeFromJson(e.toString()))
      .toList();
}

List<enums.StoreCompleteCartResType>?
    storeCompleteCartResTypeNullableListFromJson(
  List? storeCompleteCartResType, [
  List<enums.StoreCompleteCartResType>? defaultValue,
]) {
  if (storeCompleteCartResType == null) {
    return defaultValue;
  }

  return storeCompleteCartResType
      .map((e) => storeCompleteCartResTypeFromJson(e.toString()))
      .toList();
}

// ignore: unused_element
String? _dateToJson(DateTime? date) {
  if (date == null) {
    return null;
  }

  final year = date.year.toString();
  final month = date.month < 10 ? '0${date.month}' : date.month.toString();
  final day = date.day < 10 ? '0${date.day}' : date.day.toString();

  return '$year-$month-$day';
}

class Wrapped<T> {
  final T value;
  const Wrapped.value(this.value);
}
